"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.IncentivizedAcknowledgement = void 0;
const binary_1 = require("../../../../binary");
function createBaseIncentivizedAcknowledgement() {
    return {
        appAcknowledgement: new Uint8Array(),
        forwardRelayerAddress: "",
        underlyingAppSuccess: false
    };
}
exports.IncentivizedAcknowledgement = {
    typeUrl: "/ibc.applications.fee.v1.IncentivizedAcknowledgement",
    encode(message, writer = binary_1.BinaryWriter.create()) {
        if (message.appAcknowledgement.length !== 0) {
            writer.uint32(10).bytes(message.appAcknowledgement);
        }
        if (message.forwardRelayerAddress !== "") {
            writer.uint32(18).string(message.forwardRelayerAddress);
        }
        if (message.underlyingAppSuccess === true) {
            writer.uint32(24).bool(message.underlyingAppSuccess);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof binary_1.BinaryReader ? input : new binary_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseIncentivizedAcknowledgement();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.appAcknowledgement = reader.bytes();
                    break;
                case 2:
                    message.forwardRelayerAddress = reader.string();
                    break;
                case 3:
                    message.underlyingAppSuccess = reader.bool();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromPartial(object) {
        const message = createBaseIncentivizedAcknowledgement();
        message.appAcknowledgement = object.appAcknowledgement ?? new Uint8Array();
        message.forwardRelayerAddress = object.forwardRelayerAddress ?? "";
        message.underlyingAppSuccess = object.underlyingAppSuccess ?? false;
        return message;
    },
    fromAmino(object) {
        return {
            appAcknowledgement: object.app_acknowledgement,
            forwardRelayerAddress: object.forward_relayer_address,
            underlyingAppSuccess: object.underlying_app_success
        };
    },
    toAmino(message) {
        const obj = {};
        obj.app_acknowledgement = message.appAcknowledgement;
        obj.forward_relayer_address = message.forwardRelayerAddress;
        obj.underlying_app_success = message.underlyingAppSuccess;
        return obj;
    },
    fromAminoMsg(object) {
        return exports.IncentivizedAcknowledgement.fromAmino(object.value);
    },
    toAminoMsg(message) {
        return {
            type: "cosmos-sdk/IncentivizedAcknowledgement",
            value: exports.IncentivizedAcknowledgement.toAmino(message)
        };
    },
    fromProtoMsg(message) {
        return exports.IncentivizedAcknowledgement.decode(message.value);
    },
    toProto(message) {
        return exports.IncentivizedAcknowledgement.encode(message).finish();
    },
    toProtoMsg(message) {
        return {
            typeUrl: "/ibc.applications.fee.v1.IncentivizedAcknowledgement",
            value: exports.IncentivizedAcknowledgement.encode(message).finish()
        };
    }
};
//# sourceMappingURL=ack.js.map
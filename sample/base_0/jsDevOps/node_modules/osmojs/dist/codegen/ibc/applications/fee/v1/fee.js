"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.IdentifiedPacketFees = exports.PacketFees = exports.PacketFee = exports.Fee = void 0;
const coin_1 = require("../../../../cosmos/base/v1beta1/coin");
const channel_1 = require("../../../core/channel/v1/channel");
const binary_1 = require("../../../../binary");
function createBaseFee() {
    return {
        recvFee: [],
        ackFee: [],
        timeoutFee: []
    };
}
exports.Fee = {
    typeUrl: "/ibc.applications.fee.v1.Fee",
    encode(message, writer = binary_1.BinaryWriter.create()) {
        for (const v of message.recvFee) {
            coin_1.Coin.encode(v, writer.uint32(10).fork()).ldelim();
        }
        for (const v of message.ackFee) {
            coin_1.Coin.encode(v, writer.uint32(18).fork()).ldelim();
        }
        for (const v of message.timeoutFee) {
            coin_1.Coin.encode(v, writer.uint32(26).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof binary_1.BinaryReader ? input : new binary_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseFee();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.recvFee.push(coin_1.Coin.decode(reader, reader.uint32()));
                    break;
                case 2:
                    message.ackFee.push(coin_1.Coin.decode(reader, reader.uint32()));
                    break;
                case 3:
                    message.timeoutFee.push(coin_1.Coin.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromPartial(object) {
        const message = createBaseFee();
        message.recvFee = object.recvFee?.map(e => coin_1.Coin.fromPartial(e)) || [];
        message.ackFee = object.ackFee?.map(e => coin_1.Coin.fromPartial(e)) || [];
        message.timeoutFee = object.timeoutFee?.map(e => coin_1.Coin.fromPartial(e)) || [];
        return message;
    },
    fromAmino(object) {
        return {
            recvFee: Array.isArray(object?.recv_fee) ? object.recv_fee.map((e) => coin_1.Coin.fromAmino(e)) : [],
            ackFee: Array.isArray(object?.ack_fee) ? object.ack_fee.map((e) => coin_1.Coin.fromAmino(e)) : [],
            timeoutFee: Array.isArray(object?.timeout_fee) ? object.timeout_fee.map((e) => coin_1.Coin.fromAmino(e)) : []
        };
    },
    toAmino(message) {
        const obj = {};
        if (message.recvFee) {
            obj.recv_fee = message.recvFee.map(e => e ? coin_1.Coin.toAmino(e) : undefined);
        }
        else {
            obj.recv_fee = [];
        }
        if (message.ackFee) {
            obj.ack_fee = message.ackFee.map(e => e ? coin_1.Coin.toAmino(e) : undefined);
        }
        else {
            obj.ack_fee = [];
        }
        if (message.timeoutFee) {
            obj.timeout_fee = message.timeoutFee.map(e => e ? coin_1.Coin.toAmino(e) : undefined);
        }
        else {
            obj.timeout_fee = [];
        }
        return obj;
    },
    fromAminoMsg(object) {
        return exports.Fee.fromAmino(object.value);
    },
    toAminoMsg(message) {
        return {
            type: "cosmos-sdk/Fee",
            value: exports.Fee.toAmino(message)
        };
    },
    fromProtoMsg(message) {
        return exports.Fee.decode(message.value);
    },
    toProto(message) {
        return exports.Fee.encode(message).finish();
    },
    toProtoMsg(message) {
        return {
            typeUrl: "/ibc.applications.fee.v1.Fee",
            value: exports.Fee.encode(message).finish()
        };
    }
};
function createBasePacketFee() {
    return {
        fee: exports.Fee.fromPartial({}),
        refundAddress: "",
        relayers: []
    };
}
exports.PacketFee = {
    typeUrl: "/ibc.applications.fee.v1.PacketFee",
    encode(message, writer = binary_1.BinaryWriter.create()) {
        if (message.fee !== undefined) {
            exports.Fee.encode(message.fee, writer.uint32(10).fork()).ldelim();
        }
        if (message.refundAddress !== "") {
            writer.uint32(18).string(message.refundAddress);
        }
        for (const v of message.relayers) {
            writer.uint32(26).string(v);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof binary_1.BinaryReader ? input : new binary_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBasePacketFee();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.fee = exports.Fee.decode(reader, reader.uint32());
                    break;
                case 2:
                    message.refundAddress = reader.string();
                    break;
                case 3:
                    message.relayers.push(reader.string());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromPartial(object) {
        const message = createBasePacketFee();
        message.fee = object.fee !== undefined && object.fee !== null ? exports.Fee.fromPartial(object.fee) : undefined;
        message.refundAddress = object.refundAddress ?? "";
        message.relayers = object.relayers?.map(e => e) || [];
        return message;
    },
    fromAmino(object) {
        return {
            fee: object?.fee ? exports.Fee.fromAmino(object.fee) : undefined,
            refundAddress: object.refund_address,
            relayers: Array.isArray(object?.relayers) ? object.relayers.map((e) => e) : []
        };
    },
    toAmino(message) {
        const obj = {};
        obj.fee = message.fee ? exports.Fee.toAmino(message.fee) : undefined;
        obj.refund_address = message.refundAddress;
        if (message.relayers) {
            obj.relayers = message.relayers.map(e => e);
        }
        else {
            obj.relayers = [];
        }
        return obj;
    },
    fromAminoMsg(object) {
        return exports.PacketFee.fromAmino(object.value);
    },
    toAminoMsg(message) {
        return {
            type: "cosmos-sdk/PacketFee",
            value: exports.PacketFee.toAmino(message)
        };
    },
    fromProtoMsg(message) {
        return exports.PacketFee.decode(message.value);
    },
    toProto(message) {
        return exports.PacketFee.encode(message).finish();
    },
    toProtoMsg(message) {
        return {
            typeUrl: "/ibc.applications.fee.v1.PacketFee",
            value: exports.PacketFee.encode(message).finish()
        };
    }
};
function createBasePacketFees() {
    return {
        packetFees: []
    };
}
exports.PacketFees = {
    typeUrl: "/ibc.applications.fee.v1.PacketFees",
    encode(message, writer = binary_1.BinaryWriter.create()) {
        for (const v of message.packetFees) {
            exports.PacketFee.encode(v, writer.uint32(10).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof binary_1.BinaryReader ? input : new binary_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBasePacketFees();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.packetFees.push(exports.PacketFee.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromPartial(object) {
        const message = createBasePacketFees();
        message.packetFees = object.packetFees?.map(e => exports.PacketFee.fromPartial(e)) || [];
        return message;
    },
    fromAmino(object) {
        return {
            packetFees: Array.isArray(object?.packet_fees) ? object.packet_fees.map((e) => exports.PacketFee.fromAmino(e)) : []
        };
    },
    toAmino(message) {
        const obj = {};
        if (message.packetFees) {
            obj.packet_fees = message.packetFees.map(e => e ? exports.PacketFee.toAmino(e) : undefined);
        }
        else {
            obj.packet_fees = [];
        }
        return obj;
    },
    fromAminoMsg(object) {
        return exports.PacketFees.fromAmino(object.value);
    },
    toAminoMsg(message) {
        return {
            type: "cosmos-sdk/PacketFees",
            value: exports.PacketFees.toAmino(message)
        };
    },
    fromProtoMsg(message) {
        return exports.PacketFees.decode(message.value);
    },
    toProto(message) {
        return exports.PacketFees.encode(message).finish();
    },
    toProtoMsg(message) {
        return {
            typeUrl: "/ibc.applications.fee.v1.PacketFees",
            value: exports.PacketFees.encode(message).finish()
        };
    }
};
function createBaseIdentifiedPacketFees() {
    return {
        packetId: channel_1.PacketId.fromPartial({}),
        packetFees: []
    };
}
exports.IdentifiedPacketFees = {
    typeUrl: "/ibc.applications.fee.v1.IdentifiedPacketFees",
    encode(message, writer = binary_1.BinaryWriter.create()) {
        if (message.packetId !== undefined) {
            channel_1.PacketId.encode(message.packetId, writer.uint32(10).fork()).ldelim();
        }
        for (const v of message.packetFees) {
            exports.PacketFee.encode(v, writer.uint32(18).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof binary_1.BinaryReader ? input : new binary_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseIdentifiedPacketFees();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.packetId = channel_1.PacketId.decode(reader, reader.uint32());
                    break;
                case 2:
                    message.packetFees.push(exports.PacketFee.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromPartial(object) {
        const message = createBaseIdentifiedPacketFees();
        message.packetId = object.packetId !== undefined && object.packetId !== null ? channel_1.PacketId.fromPartial(object.packetId) : undefined;
        message.packetFees = object.packetFees?.map(e => exports.PacketFee.fromPartial(e)) || [];
        return message;
    },
    fromAmino(object) {
        return {
            packetId: object?.packet_id ? channel_1.PacketId.fromAmino(object.packet_id) : undefined,
            packetFees: Array.isArray(object?.packet_fees) ? object.packet_fees.map((e) => exports.PacketFee.fromAmino(e)) : []
        };
    },
    toAmino(message) {
        const obj = {};
        obj.packet_id = message.packetId ? channel_1.PacketId.toAmino(message.packetId) : undefined;
        if (message.packetFees) {
            obj.packet_fees = message.packetFees.map(e => e ? exports.PacketFee.toAmino(e) : undefined);
        }
        else {
            obj.packet_fees = [];
        }
        return obj;
    },
    fromAminoMsg(object) {
        return exports.IdentifiedPacketFees.fromAmino(object.value);
    },
    toAminoMsg(message) {
        return {
            type: "cosmos-sdk/IdentifiedPacketFees",
            value: exports.IdentifiedPacketFees.toAmino(message)
        };
    },
    fromProtoMsg(message) {
        return exports.IdentifiedPacketFees.decode(message.value);
    },
    toProto(message) {
        return exports.IdentifiedPacketFees.encode(message).finish();
    },
    toProtoMsg(message) {
        return {
            typeUrl: "/ibc.applications.fee.v1.IdentifiedPacketFees",
            value: exports.IdentifiedPacketFees.encode(message).finish()
        };
    }
};
//# sourceMappingURL=fee.js.map
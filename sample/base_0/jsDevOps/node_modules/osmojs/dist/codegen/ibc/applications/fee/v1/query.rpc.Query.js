"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.createRpcQueryExtension = exports.QueryClientImpl = void 0;
const binary_1 = require("../../../../binary");
const stargate_1 = require("@cosmjs/stargate");
const query_1 = require("./query");
class QueryClientImpl {
    rpc;
    constructor(rpc) {
        this.rpc = rpc;
        this.incentivizedPackets = this.incentivizedPackets.bind(this);
        this.incentivizedPacket = this.incentivizedPacket.bind(this);
        this.incentivizedPacketsForChannel = this.incentivizedPacketsForChannel.bind(this);
        this.totalRecvFees = this.totalRecvFees.bind(this);
        this.totalAckFees = this.totalAckFees.bind(this);
        this.totalTimeoutFees = this.totalTimeoutFees.bind(this);
        this.payee = this.payee.bind(this);
        this.counterpartyPayee = this.counterpartyPayee.bind(this);
        this.feeEnabledChannels = this.feeEnabledChannels.bind(this);
        this.feeEnabledChannel = this.feeEnabledChannel.bind(this);
    }
    incentivizedPackets(request) {
        const data = query_1.QueryIncentivizedPacketsRequest.encode(request).finish();
        const promise = this.rpc.request("ibc.applications.fee.v1.Query", "IncentivizedPackets", data);
        return promise.then(data => query_1.QueryIncentivizedPacketsResponse.decode(new binary_1.BinaryReader(data)));
    }
    incentivizedPacket(request) {
        const data = query_1.QueryIncentivizedPacketRequest.encode(request).finish();
        const promise = this.rpc.request("ibc.applications.fee.v1.Query", "IncentivizedPacket", data);
        return promise.then(data => query_1.QueryIncentivizedPacketResponse.decode(new binary_1.BinaryReader(data)));
    }
    incentivizedPacketsForChannel(request) {
        const data = query_1.QueryIncentivizedPacketsForChannelRequest.encode(request).finish();
        const promise = this.rpc.request("ibc.applications.fee.v1.Query", "IncentivizedPacketsForChannel", data);
        return promise.then(data => query_1.QueryIncentivizedPacketsForChannelResponse.decode(new binary_1.BinaryReader(data)));
    }
    totalRecvFees(request) {
        const data = query_1.QueryTotalRecvFeesRequest.encode(request).finish();
        const promise = this.rpc.request("ibc.applications.fee.v1.Query", "TotalRecvFees", data);
        return promise.then(data => query_1.QueryTotalRecvFeesResponse.decode(new binary_1.BinaryReader(data)));
    }
    totalAckFees(request) {
        const data = query_1.QueryTotalAckFeesRequest.encode(request).finish();
        const promise = this.rpc.request("ibc.applications.fee.v1.Query", "TotalAckFees", data);
        return promise.then(data => query_1.QueryTotalAckFeesResponse.decode(new binary_1.BinaryReader(data)));
    }
    totalTimeoutFees(request) {
        const data = query_1.QueryTotalTimeoutFeesRequest.encode(request).finish();
        const promise = this.rpc.request("ibc.applications.fee.v1.Query", "TotalTimeoutFees", data);
        return promise.then(data => query_1.QueryTotalTimeoutFeesResponse.decode(new binary_1.BinaryReader(data)));
    }
    payee(request) {
        const data = query_1.QueryPayeeRequest.encode(request).finish();
        const promise = this.rpc.request("ibc.applications.fee.v1.Query", "Payee", data);
        return promise.then(data => query_1.QueryPayeeResponse.decode(new binary_1.BinaryReader(data)));
    }
    counterpartyPayee(request) {
        const data = query_1.QueryCounterpartyPayeeRequest.encode(request).finish();
        const promise = this.rpc.request("ibc.applications.fee.v1.Query", "CounterpartyPayee", data);
        return promise.then(data => query_1.QueryCounterpartyPayeeResponse.decode(new binary_1.BinaryReader(data)));
    }
    feeEnabledChannels(request) {
        const data = query_1.QueryFeeEnabledChannelsRequest.encode(request).finish();
        const promise = this.rpc.request("ibc.applications.fee.v1.Query", "FeeEnabledChannels", data);
        return promise.then(data => query_1.QueryFeeEnabledChannelsResponse.decode(new binary_1.BinaryReader(data)));
    }
    feeEnabledChannel(request) {
        const data = query_1.QueryFeeEnabledChannelRequest.encode(request).finish();
        const promise = this.rpc.request("ibc.applications.fee.v1.Query", "FeeEnabledChannel", data);
        return promise.then(data => query_1.QueryFeeEnabledChannelResponse.decode(new binary_1.BinaryReader(data)));
    }
}
exports.QueryClientImpl = QueryClientImpl;
const createRpcQueryExtension = (base) => {
    const rpc = (0, stargate_1.createProtobufRpcClient)(base);
    const queryService = new QueryClientImpl(rpc);
    return {
        incentivizedPackets(request) {
            return queryService.incentivizedPackets(request);
        },
        incentivizedPacket(request) {
            return queryService.incentivizedPacket(request);
        },
        incentivizedPacketsForChannel(request) {
            return queryService.incentivizedPacketsForChannel(request);
        },
        totalRecvFees(request) {
            return queryService.totalRecvFees(request);
        },
        totalAckFees(request) {
            return queryService.totalAckFees(request);
        },
        totalTimeoutFees(request) {
            return queryService.totalTimeoutFees(request);
        },
        payee(request) {
            return queryService.payee(request);
        },
        counterpartyPayee(request) {
            return queryService.counterpartyPayee(request);
        },
        feeEnabledChannels(request) {
            return queryService.feeEnabledChannels(request);
        },
        feeEnabledChannel(request) {
            return queryService.feeEnabledChannel(request);
        }
    };
};
exports.createRpcQueryExtension = createRpcQueryExtension;
//# sourceMappingURL=query.rpc.Query.js.map
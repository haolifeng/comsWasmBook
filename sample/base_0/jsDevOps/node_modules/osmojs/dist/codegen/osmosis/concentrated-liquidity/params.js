"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Params = void 0;
const duration_1 = require("../../google/protobuf/duration");
const binary_1 = require("../../binary");
const math_1 = require("@cosmjs/math");
function createBaseParams() {
    return {
        authorizedTickSpacing: [],
        authorizedSpreadFactors: [],
        balancerSharesRewardDiscount: "",
        authorizedQuoteDenoms: [],
        authorizedUptimes: [],
        isPermissionlessPoolCreationEnabled: false
    };
}
exports.Params = {
    typeUrl: "/osmosis.concentratedliquidity.Params",
    encode(message, writer = binary_1.BinaryWriter.create()) {
        writer.uint32(10).fork();
        for (const v of message.authorizedTickSpacing) {
            writer.uint64(v);
        }
        writer.ldelim();
        for (const v of message.authorizedSpreadFactors) {
            writer.uint32(18).string(math_1.Decimal.fromUserInput(v, 18).atomics);
        }
        if (message.balancerSharesRewardDiscount !== "") {
            writer.uint32(26).string(math_1.Decimal.fromUserInput(message.balancerSharesRewardDiscount, 18).atomics);
        }
        for (const v of message.authorizedQuoteDenoms) {
            writer.uint32(34).string(v);
        }
        for (const v of message.authorizedUptimes) {
            duration_1.Duration.encode(v, writer.uint32(42).fork()).ldelim();
        }
        if (message.isPermissionlessPoolCreationEnabled === true) {
            writer.uint32(48).bool(message.isPermissionlessPoolCreationEnabled);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof binary_1.BinaryReader ? input : new binary_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseParams();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if ((tag & 7) === 2) {
                        const end2 = reader.uint32() + reader.pos;
                        while (reader.pos < end2) {
                            message.authorizedTickSpacing.push(reader.uint64());
                        }
                    }
                    else {
                        message.authorizedTickSpacing.push(reader.uint64());
                    }
                    break;
                case 2:
                    message.authorizedSpreadFactors.push(math_1.Decimal.fromAtomics(reader.string(), 18).toString());
                    break;
                case 3:
                    message.balancerSharesRewardDiscount = math_1.Decimal.fromAtomics(reader.string(), 18).toString();
                    break;
                case 4:
                    message.authorizedQuoteDenoms.push(reader.string());
                    break;
                case 5:
                    message.authorizedUptimes.push(duration_1.Duration.decode(reader, reader.uint32()));
                    break;
                case 6:
                    message.isPermissionlessPoolCreationEnabled = reader.bool();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromPartial(object) {
        const message = createBaseParams();
        message.authorizedTickSpacing = object.authorizedTickSpacing?.map(e => BigInt(e.toString())) || [];
        message.authorizedSpreadFactors = object.authorizedSpreadFactors?.map(e => e) || [];
        message.balancerSharesRewardDiscount = object.balancerSharesRewardDiscount ?? "";
        message.authorizedQuoteDenoms = object.authorizedQuoteDenoms?.map(e => e) || [];
        message.authorizedUptimes = object.authorizedUptimes?.map(e => duration_1.Duration.fromPartial(e)) || [];
        message.isPermissionlessPoolCreationEnabled = object.isPermissionlessPoolCreationEnabled ?? false;
        return message;
    },
    fromAmino(object) {
        return {
            authorizedTickSpacing: Array.isArray(object?.authorized_tick_spacing) ? object.authorized_tick_spacing.map((e) => BigInt(e)) : [],
            authorizedSpreadFactors: Array.isArray(object?.authorized_spread_factors) ? object.authorized_spread_factors.map((e) => e) : [],
            balancerSharesRewardDiscount: object.balancer_shares_reward_discount,
            authorizedQuoteDenoms: Array.isArray(object?.authorized_quote_denoms) ? object.authorized_quote_denoms.map((e) => e) : [],
            authorizedUptimes: Array.isArray(object?.authorized_uptimes) ? object.authorized_uptimes.map((e) => duration_1.Duration.fromAmino(e)) : [],
            isPermissionlessPoolCreationEnabled: object.is_permissionless_pool_creation_enabled
        };
    },
    toAmino(message) {
        const obj = {};
        if (message.authorizedTickSpacing) {
            obj.authorized_tick_spacing = message.authorizedTickSpacing.map(e => e.toString());
        }
        else {
            obj.authorized_tick_spacing = [];
        }
        if (message.authorizedSpreadFactors) {
            obj.authorized_spread_factors = message.authorizedSpreadFactors.map(e => e);
        }
        else {
            obj.authorized_spread_factors = [];
        }
        obj.balancer_shares_reward_discount = message.balancerSharesRewardDiscount;
        if (message.authorizedQuoteDenoms) {
            obj.authorized_quote_denoms = message.authorizedQuoteDenoms.map(e => e);
        }
        else {
            obj.authorized_quote_denoms = [];
        }
        if (message.authorizedUptimes) {
            obj.authorized_uptimes = message.authorizedUptimes.map(e => e ? duration_1.Duration.toAmino(e) : undefined);
        }
        else {
            obj.authorized_uptimes = [];
        }
        obj.is_permissionless_pool_creation_enabled = message.isPermissionlessPoolCreationEnabled;
        return obj;
    },
    fromAminoMsg(object) {
        return exports.Params.fromAmino(object.value);
    },
    toAminoMsg(message) {
        return {
            type: "osmosis/concentratedliquidity/params",
            value: exports.Params.toAmino(message)
        };
    },
    fromProtoMsg(message) {
        return exports.Params.decode(message.value);
    },
    toProto(message) {
        return exports.Params.encode(message).finish();
    },
    toProtoMsg(message) {
        return {
            typeUrl: "/osmosis.concentratedliquidity.Params",
            value: exports.Params.encode(message).finish()
        };
    }
};
//# sourceMappingURL=params.js.map
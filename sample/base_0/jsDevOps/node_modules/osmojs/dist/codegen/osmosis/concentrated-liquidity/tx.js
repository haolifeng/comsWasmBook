"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.MsgFungifyChargedPositionsResponse = exports.MsgFungifyChargedPositions = exports.MsgCollectIncentivesResponse = exports.MsgCollectIncentives = exports.MsgCollectSpreadRewardsResponse = exports.MsgCollectSpreadRewards = exports.MsgWithdrawPositionResponse = exports.MsgWithdrawPosition = exports.MsgAddToPositionResponse = exports.MsgAddToPosition = exports.MsgCreatePositionResponse = exports.MsgCreatePosition = void 0;
const coin_1 = require("../../cosmos/base/v1beta1/coin");
const binary_1 = require("../../binary");
const math_1 = require("@cosmjs/math");
function createBaseMsgCreatePosition() {
    return {
        poolId: BigInt(0),
        sender: "",
        lowerTick: BigInt(0),
        upperTick: BigInt(0),
        tokensProvided: [],
        tokenMinAmount0: "",
        tokenMinAmount1: ""
    };
}
exports.MsgCreatePosition = {
    typeUrl: "/osmosis.concentratedliquidity.v1beta1.MsgCreatePosition",
    encode(message, writer = binary_1.BinaryWriter.create()) {
        if (message.poolId !== BigInt(0)) {
            writer.uint32(8).uint64(message.poolId);
        }
        if (message.sender !== "") {
            writer.uint32(18).string(message.sender);
        }
        if (message.lowerTick !== BigInt(0)) {
            writer.uint32(24).int64(message.lowerTick);
        }
        if (message.upperTick !== BigInt(0)) {
            writer.uint32(32).int64(message.upperTick);
        }
        for (const v of message.tokensProvided) {
            coin_1.Coin.encode(v, writer.uint32(42).fork()).ldelim();
        }
        if (message.tokenMinAmount0 !== "") {
            writer.uint32(50).string(message.tokenMinAmount0);
        }
        if (message.tokenMinAmount1 !== "") {
            writer.uint32(58).string(message.tokenMinAmount1);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof binary_1.BinaryReader ? input : new binary_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMsgCreatePosition();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.poolId = reader.uint64();
                    break;
                case 2:
                    message.sender = reader.string();
                    break;
                case 3:
                    message.lowerTick = reader.int64();
                    break;
                case 4:
                    message.upperTick = reader.int64();
                    break;
                case 5:
                    message.tokensProvided.push(coin_1.Coin.decode(reader, reader.uint32()));
                    break;
                case 6:
                    message.tokenMinAmount0 = reader.string();
                    break;
                case 7:
                    message.tokenMinAmount1 = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromPartial(object) {
        const message = createBaseMsgCreatePosition();
        message.poolId = object.poolId !== undefined && object.poolId !== null ? BigInt(object.poolId.toString()) : BigInt(0);
        message.sender = object.sender ?? "";
        message.lowerTick = object.lowerTick !== undefined && object.lowerTick !== null ? BigInt(object.lowerTick.toString()) : BigInt(0);
        message.upperTick = object.upperTick !== undefined && object.upperTick !== null ? BigInt(object.upperTick.toString()) : BigInt(0);
        message.tokensProvided = object.tokensProvided?.map(e => coin_1.Coin.fromPartial(e)) || [];
        message.tokenMinAmount0 = object.tokenMinAmount0 ?? "";
        message.tokenMinAmount1 = object.tokenMinAmount1 ?? "";
        return message;
    },
    fromAmino(object) {
        return {
            poolId: BigInt(object.pool_id),
            sender: object.sender,
            lowerTick: BigInt(object.lower_tick),
            upperTick: BigInt(object.upper_tick),
            tokensProvided: Array.isArray(object?.tokens_provided) ? object.tokens_provided.map((e) => coin_1.Coin.fromAmino(e)) : [],
            tokenMinAmount0: object.token_min_amount0,
            tokenMinAmount1: object.token_min_amount1
        };
    },
    toAmino(message) {
        const obj = {};
        obj.pool_id = message.poolId ? message.poolId.toString() : undefined;
        obj.sender = message.sender;
        obj.lower_tick = message.lowerTick ? message.lowerTick.toString() : undefined;
        obj.upper_tick = message.upperTick ? message.upperTick.toString() : undefined;
        if (message.tokensProvided) {
            obj.tokens_provided = message.tokensProvided.map(e => e ? coin_1.Coin.toAmino(e) : undefined);
        }
        else {
            obj.tokens_provided = [];
        }
        obj.token_min_amount0 = message.tokenMinAmount0;
        obj.token_min_amount1 = message.tokenMinAmount1;
        return obj;
    },
    fromAminoMsg(object) {
        return exports.MsgCreatePosition.fromAmino(object.value);
    },
    toAminoMsg(message) {
        return {
            type: "osmosis/concentratedliquidity/create-position",
            value: exports.MsgCreatePosition.toAmino(message)
        };
    },
    fromProtoMsg(message) {
        return exports.MsgCreatePosition.decode(message.value);
    },
    toProto(message) {
        return exports.MsgCreatePosition.encode(message).finish();
    },
    toProtoMsg(message) {
        return {
            typeUrl: "/osmosis.concentratedliquidity.v1beta1.MsgCreatePosition",
            value: exports.MsgCreatePosition.encode(message).finish()
        };
    }
};
function createBaseMsgCreatePositionResponse() {
    return {
        positionId: BigInt(0),
        amount0: "",
        amount1: "",
        liquidityCreated: "",
        lowerTick: BigInt(0),
        upperTick: BigInt(0)
    };
}
exports.MsgCreatePositionResponse = {
    typeUrl: "/osmosis.concentratedliquidity.v1beta1.MsgCreatePositionResponse",
    encode(message, writer = binary_1.BinaryWriter.create()) {
        if (message.positionId !== BigInt(0)) {
            writer.uint32(8).uint64(message.positionId);
        }
        if (message.amount0 !== "") {
            writer.uint32(18).string(message.amount0);
        }
        if (message.amount1 !== "") {
            writer.uint32(26).string(message.amount1);
        }
        if (message.liquidityCreated !== "") {
            writer.uint32(42).string(math_1.Decimal.fromUserInput(message.liquidityCreated, 18).atomics);
        }
        if (message.lowerTick !== BigInt(0)) {
            writer.uint32(48).int64(message.lowerTick);
        }
        if (message.upperTick !== BigInt(0)) {
            writer.uint32(56).int64(message.upperTick);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof binary_1.BinaryReader ? input : new binary_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMsgCreatePositionResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.positionId = reader.uint64();
                    break;
                case 2:
                    message.amount0 = reader.string();
                    break;
                case 3:
                    message.amount1 = reader.string();
                    break;
                case 5:
                    message.liquidityCreated = math_1.Decimal.fromAtomics(reader.string(), 18).toString();
                    break;
                case 6:
                    message.lowerTick = reader.int64();
                    break;
                case 7:
                    message.upperTick = reader.int64();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromPartial(object) {
        const message = createBaseMsgCreatePositionResponse();
        message.positionId = object.positionId !== undefined && object.positionId !== null ? BigInt(object.positionId.toString()) : BigInt(0);
        message.amount0 = object.amount0 ?? "";
        message.amount1 = object.amount1 ?? "";
        message.liquidityCreated = object.liquidityCreated ?? "";
        message.lowerTick = object.lowerTick !== undefined && object.lowerTick !== null ? BigInt(object.lowerTick.toString()) : BigInt(0);
        message.upperTick = object.upperTick !== undefined && object.upperTick !== null ? BigInt(object.upperTick.toString()) : BigInt(0);
        return message;
    },
    fromAmino(object) {
        return {
            positionId: BigInt(object.position_id),
            amount0: object.amount0,
            amount1: object.amount1,
            liquidityCreated: object.liquidity_created,
            lowerTick: BigInt(object.lower_tick),
            upperTick: BigInt(object.upper_tick)
        };
    },
    toAmino(message) {
        const obj = {};
        obj.position_id = message.positionId ? message.positionId.toString() : undefined;
        obj.amount0 = message.amount0;
        obj.amount1 = message.amount1;
        obj.liquidity_created = message.liquidityCreated;
        obj.lower_tick = message.lowerTick ? message.lowerTick.toString() : undefined;
        obj.upper_tick = message.upperTick ? message.upperTick.toString() : undefined;
        return obj;
    },
    fromAminoMsg(object) {
        return exports.MsgCreatePositionResponse.fromAmino(object.value);
    },
    toAminoMsg(message) {
        return {
            type: "osmosis/concentratedliquidity/create-position-response",
            value: exports.MsgCreatePositionResponse.toAmino(message)
        };
    },
    fromProtoMsg(message) {
        return exports.MsgCreatePositionResponse.decode(message.value);
    },
    toProto(message) {
        return exports.MsgCreatePositionResponse.encode(message).finish();
    },
    toProtoMsg(message) {
        return {
            typeUrl: "/osmosis.concentratedliquidity.v1beta1.MsgCreatePositionResponse",
            value: exports.MsgCreatePositionResponse.encode(message).finish()
        };
    }
};
function createBaseMsgAddToPosition() {
    return {
        positionId: BigInt(0),
        sender: "",
        amount0: "",
        amount1: "",
        tokenMinAmount0: "",
        tokenMinAmount1: ""
    };
}
exports.MsgAddToPosition = {
    typeUrl: "/osmosis.concentratedliquidity.v1beta1.MsgAddToPosition",
    encode(message, writer = binary_1.BinaryWriter.create()) {
        if (message.positionId !== BigInt(0)) {
            writer.uint32(8).uint64(message.positionId);
        }
        if (message.sender !== "") {
            writer.uint32(18).string(message.sender);
        }
        if (message.amount0 !== "") {
            writer.uint32(26).string(message.amount0);
        }
        if (message.amount1 !== "") {
            writer.uint32(34).string(message.amount1);
        }
        if (message.tokenMinAmount0 !== "") {
            writer.uint32(42).string(message.tokenMinAmount0);
        }
        if (message.tokenMinAmount1 !== "") {
            writer.uint32(50).string(message.tokenMinAmount1);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof binary_1.BinaryReader ? input : new binary_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMsgAddToPosition();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.positionId = reader.uint64();
                    break;
                case 2:
                    message.sender = reader.string();
                    break;
                case 3:
                    message.amount0 = reader.string();
                    break;
                case 4:
                    message.amount1 = reader.string();
                    break;
                case 5:
                    message.tokenMinAmount0 = reader.string();
                    break;
                case 6:
                    message.tokenMinAmount1 = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromPartial(object) {
        const message = createBaseMsgAddToPosition();
        message.positionId = object.positionId !== undefined && object.positionId !== null ? BigInt(object.positionId.toString()) : BigInt(0);
        message.sender = object.sender ?? "";
        message.amount0 = object.amount0 ?? "";
        message.amount1 = object.amount1 ?? "";
        message.tokenMinAmount0 = object.tokenMinAmount0 ?? "";
        message.tokenMinAmount1 = object.tokenMinAmount1 ?? "";
        return message;
    },
    fromAmino(object) {
        return {
            positionId: BigInt(object.position_id),
            sender: object.sender,
            amount0: object.amount0,
            amount1: object.amount1,
            tokenMinAmount0: object.token_min_amount0,
            tokenMinAmount1: object.token_min_amount1
        };
    },
    toAmino(message) {
        const obj = {};
        obj.position_id = message.positionId ? message.positionId.toString() : undefined;
        obj.sender = message.sender;
        obj.amount0 = message.amount0;
        obj.amount1 = message.amount1;
        obj.token_min_amount0 = message.tokenMinAmount0;
        obj.token_min_amount1 = message.tokenMinAmount1;
        return obj;
    },
    fromAminoMsg(object) {
        return exports.MsgAddToPosition.fromAmino(object.value);
    },
    toAminoMsg(message) {
        return {
            type: "osmosis/concentratedliquidity/add-to-position",
            value: exports.MsgAddToPosition.toAmino(message)
        };
    },
    fromProtoMsg(message) {
        return exports.MsgAddToPosition.decode(message.value);
    },
    toProto(message) {
        return exports.MsgAddToPosition.encode(message).finish();
    },
    toProtoMsg(message) {
        return {
            typeUrl: "/osmosis.concentratedliquidity.v1beta1.MsgAddToPosition",
            value: exports.MsgAddToPosition.encode(message).finish()
        };
    }
};
function createBaseMsgAddToPositionResponse() {
    return {
        positionId: BigInt(0),
        amount0: "",
        amount1: ""
    };
}
exports.MsgAddToPositionResponse = {
    typeUrl: "/osmosis.concentratedliquidity.v1beta1.MsgAddToPositionResponse",
    encode(message, writer = binary_1.BinaryWriter.create()) {
        if (message.positionId !== BigInt(0)) {
            writer.uint32(8).uint64(message.positionId);
        }
        if (message.amount0 !== "") {
            writer.uint32(18).string(message.amount0);
        }
        if (message.amount1 !== "") {
            writer.uint32(26).string(message.amount1);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof binary_1.BinaryReader ? input : new binary_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMsgAddToPositionResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.positionId = reader.uint64();
                    break;
                case 2:
                    message.amount0 = reader.string();
                    break;
                case 3:
                    message.amount1 = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromPartial(object) {
        const message = createBaseMsgAddToPositionResponse();
        message.positionId = object.positionId !== undefined && object.positionId !== null ? BigInt(object.positionId.toString()) : BigInt(0);
        message.amount0 = object.amount0 ?? "";
        message.amount1 = object.amount1 ?? "";
        return message;
    },
    fromAmino(object) {
        return {
            positionId: BigInt(object.position_id),
            amount0: object.amount0,
            amount1: object.amount1
        };
    },
    toAmino(message) {
        const obj = {};
        obj.position_id = message.positionId ? message.positionId.toString() : undefined;
        obj.amount0 = message.amount0;
        obj.amount1 = message.amount1;
        return obj;
    },
    fromAminoMsg(object) {
        return exports.MsgAddToPositionResponse.fromAmino(object.value);
    },
    toAminoMsg(message) {
        return {
            type: "osmosis/concentratedliquidity/add-to-position-response",
            value: exports.MsgAddToPositionResponse.toAmino(message)
        };
    },
    fromProtoMsg(message) {
        return exports.MsgAddToPositionResponse.decode(message.value);
    },
    toProto(message) {
        return exports.MsgAddToPositionResponse.encode(message).finish();
    },
    toProtoMsg(message) {
        return {
            typeUrl: "/osmosis.concentratedliquidity.v1beta1.MsgAddToPositionResponse",
            value: exports.MsgAddToPositionResponse.encode(message).finish()
        };
    }
};
function createBaseMsgWithdrawPosition() {
    return {
        positionId: BigInt(0),
        sender: "",
        liquidityAmount: ""
    };
}
exports.MsgWithdrawPosition = {
    typeUrl: "/osmosis.concentratedliquidity.v1beta1.MsgWithdrawPosition",
    encode(message, writer = binary_1.BinaryWriter.create()) {
        if (message.positionId !== BigInt(0)) {
            writer.uint32(8).uint64(message.positionId);
        }
        if (message.sender !== "") {
            writer.uint32(18).string(message.sender);
        }
        if (message.liquidityAmount !== "") {
            writer.uint32(26).string(math_1.Decimal.fromUserInput(message.liquidityAmount, 18).atomics);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof binary_1.BinaryReader ? input : new binary_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMsgWithdrawPosition();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.positionId = reader.uint64();
                    break;
                case 2:
                    message.sender = reader.string();
                    break;
                case 3:
                    message.liquidityAmount = math_1.Decimal.fromAtomics(reader.string(), 18).toString();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromPartial(object) {
        const message = createBaseMsgWithdrawPosition();
        message.positionId = object.positionId !== undefined && object.positionId !== null ? BigInt(object.positionId.toString()) : BigInt(0);
        message.sender = object.sender ?? "";
        message.liquidityAmount = object.liquidityAmount ?? "";
        return message;
    },
    fromAmino(object) {
        return {
            positionId: BigInt(object.position_id),
            sender: object.sender,
            liquidityAmount: object.liquidity_amount
        };
    },
    toAmino(message) {
        const obj = {};
        obj.position_id = message.positionId ? message.positionId.toString() : undefined;
        obj.sender = message.sender;
        obj.liquidity_amount = message.liquidityAmount;
        return obj;
    },
    fromAminoMsg(object) {
        return exports.MsgWithdrawPosition.fromAmino(object.value);
    },
    toAminoMsg(message) {
        return {
            type: "osmosis/concentratedliquidity/withdraw-position",
            value: exports.MsgWithdrawPosition.toAmino(message)
        };
    },
    fromProtoMsg(message) {
        return exports.MsgWithdrawPosition.decode(message.value);
    },
    toProto(message) {
        return exports.MsgWithdrawPosition.encode(message).finish();
    },
    toProtoMsg(message) {
        return {
            typeUrl: "/osmosis.concentratedliquidity.v1beta1.MsgWithdrawPosition",
            value: exports.MsgWithdrawPosition.encode(message).finish()
        };
    }
};
function createBaseMsgWithdrawPositionResponse() {
    return {
        amount0: "",
        amount1: ""
    };
}
exports.MsgWithdrawPositionResponse = {
    typeUrl: "/osmosis.concentratedliquidity.v1beta1.MsgWithdrawPositionResponse",
    encode(message, writer = binary_1.BinaryWriter.create()) {
        if (message.amount0 !== "") {
            writer.uint32(10).string(message.amount0);
        }
        if (message.amount1 !== "") {
            writer.uint32(18).string(message.amount1);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof binary_1.BinaryReader ? input : new binary_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMsgWithdrawPositionResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.amount0 = reader.string();
                    break;
                case 2:
                    message.amount1 = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromPartial(object) {
        const message = createBaseMsgWithdrawPositionResponse();
        message.amount0 = object.amount0 ?? "";
        message.amount1 = object.amount1 ?? "";
        return message;
    },
    fromAmino(object) {
        return {
            amount0: object.amount0,
            amount1: object.amount1
        };
    },
    toAmino(message) {
        const obj = {};
        obj.amount0 = message.amount0;
        obj.amount1 = message.amount1;
        return obj;
    },
    fromAminoMsg(object) {
        return exports.MsgWithdrawPositionResponse.fromAmino(object.value);
    },
    toAminoMsg(message) {
        return {
            type: "osmosis/concentratedliquidity/withdraw-position-response",
            value: exports.MsgWithdrawPositionResponse.toAmino(message)
        };
    },
    fromProtoMsg(message) {
        return exports.MsgWithdrawPositionResponse.decode(message.value);
    },
    toProto(message) {
        return exports.MsgWithdrawPositionResponse.encode(message).finish();
    },
    toProtoMsg(message) {
        return {
            typeUrl: "/osmosis.concentratedliquidity.v1beta1.MsgWithdrawPositionResponse",
            value: exports.MsgWithdrawPositionResponse.encode(message).finish()
        };
    }
};
function createBaseMsgCollectSpreadRewards() {
    return {
        positionIds: [],
        sender: ""
    };
}
exports.MsgCollectSpreadRewards = {
    typeUrl: "/osmosis.concentratedliquidity.v1beta1.MsgCollectSpreadRewards",
    encode(message, writer = binary_1.BinaryWriter.create()) {
        writer.uint32(10).fork();
        for (const v of message.positionIds) {
            writer.uint64(v);
        }
        writer.ldelim();
        if (message.sender !== "") {
            writer.uint32(18).string(message.sender);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof binary_1.BinaryReader ? input : new binary_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMsgCollectSpreadRewards();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if ((tag & 7) === 2) {
                        const end2 = reader.uint32() + reader.pos;
                        while (reader.pos < end2) {
                            message.positionIds.push(reader.uint64());
                        }
                    }
                    else {
                        message.positionIds.push(reader.uint64());
                    }
                    break;
                case 2:
                    message.sender = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromPartial(object) {
        const message = createBaseMsgCollectSpreadRewards();
        message.positionIds = object.positionIds?.map(e => BigInt(e.toString())) || [];
        message.sender = object.sender ?? "";
        return message;
    },
    fromAmino(object) {
        return {
            positionIds: Array.isArray(object?.position_ids) ? object.position_ids.map((e) => BigInt(e)) : [],
            sender: object.sender
        };
    },
    toAmino(message) {
        const obj = {};
        if (message.positionIds) {
            obj.position_ids = message.positionIds.map(e => e.toString());
        }
        else {
            obj.position_ids = [];
        }
        obj.sender = message.sender;
        return obj;
    },
    fromAminoMsg(object) {
        return exports.MsgCollectSpreadRewards.fromAmino(object.value);
    },
    toAminoMsg(message) {
        return {
            type: "osmosis/concentratedliquidity/collect-spread-rewards",
            value: exports.MsgCollectSpreadRewards.toAmino(message)
        };
    },
    fromProtoMsg(message) {
        return exports.MsgCollectSpreadRewards.decode(message.value);
    },
    toProto(message) {
        return exports.MsgCollectSpreadRewards.encode(message).finish();
    },
    toProtoMsg(message) {
        return {
            typeUrl: "/osmosis.concentratedliquidity.v1beta1.MsgCollectSpreadRewards",
            value: exports.MsgCollectSpreadRewards.encode(message).finish()
        };
    }
};
function createBaseMsgCollectSpreadRewardsResponse() {
    return {
        collectedSpreadRewards: []
    };
}
exports.MsgCollectSpreadRewardsResponse = {
    typeUrl: "/osmosis.concentratedliquidity.v1beta1.MsgCollectSpreadRewardsResponse",
    encode(message, writer = binary_1.BinaryWriter.create()) {
        for (const v of message.collectedSpreadRewards) {
            coin_1.Coin.encode(v, writer.uint32(10).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof binary_1.BinaryReader ? input : new binary_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMsgCollectSpreadRewardsResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.collectedSpreadRewards.push(coin_1.Coin.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromPartial(object) {
        const message = createBaseMsgCollectSpreadRewardsResponse();
        message.collectedSpreadRewards = object.collectedSpreadRewards?.map(e => coin_1.Coin.fromPartial(e)) || [];
        return message;
    },
    fromAmino(object) {
        return {
            collectedSpreadRewards: Array.isArray(object?.collected_spread_rewards) ? object.collected_spread_rewards.map((e) => coin_1.Coin.fromAmino(e)) : []
        };
    },
    toAmino(message) {
        const obj = {};
        if (message.collectedSpreadRewards) {
            obj.collected_spread_rewards = message.collectedSpreadRewards.map(e => e ? coin_1.Coin.toAmino(e) : undefined);
        }
        else {
            obj.collected_spread_rewards = [];
        }
        return obj;
    },
    fromAminoMsg(object) {
        return exports.MsgCollectSpreadRewardsResponse.fromAmino(object.value);
    },
    toAminoMsg(message) {
        return {
            type: "osmosis/concentratedliquidity/collect-spread-rewards-response",
            value: exports.MsgCollectSpreadRewardsResponse.toAmino(message)
        };
    },
    fromProtoMsg(message) {
        return exports.MsgCollectSpreadRewardsResponse.decode(message.value);
    },
    toProto(message) {
        return exports.MsgCollectSpreadRewardsResponse.encode(message).finish();
    },
    toProtoMsg(message) {
        return {
            typeUrl: "/osmosis.concentratedliquidity.v1beta1.MsgCollectSpreadRewardsResponse",
            value: exports.MsgCollectSpreadRewardsResponse.encode(message).finish()
        };
    }
};
function createBaseMsgCollectIncentives() {
    return {
        positionIds: [],
        sender: ""
    };
}
exports.MsgCollectIncentives = {
    typeUrl: "/osmosis.concentratedliquidity.v1beta1.MsgCollectIncentives",
    encode(message, writer = binary_1.BinaryWriter.create()) {
        writer.uint32(10).fork();
        for (const v of message.positionIds) {
            writer.uint64(v);
        }
        writer.ldelim();
        if (message.sender !== "") {
            writer.uint32(18).string(message.sender);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof binary_1.BinaryReader ? input : new binary_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMsgCollectIncentives();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if ((tag & 7) === 2) {
                        const end2 = reader.uint32() + reader.pos;
                        while (reader.pos < end2) {
                            message.positionIds.push(reader.uint64());
                        }
                    }
                    else {
                        message.positionIds.push(reader.uint64());
                    }
                    break;
                case 2:
                    message.sender = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromPartial(object) {
        const message = createBaseMsgCollectIncentives();
        message.positionIds = object.positionIds?.map(e => BigInt(e.toString())) || [];
        message.sender = object.sender ?? "";
        return message;
    },
    fromAmino(object) {
        return {
            positionIds: Array.isArray(object?.position_ids) ? object.position_ids.map((e) => BigInt(e)) : [],
            sender: object.sender
        };
    },
    toAmino(message) {
        const obj = {};
        if (message.positionIds) {
            obj.position_ids = message.positionIds.map(e => e.toString());
        }
        else {
            obj.position_ids = [];
        }
        obj.sender = message.sender;
        return obj;
    },
    fromAminoMsg(object) {
        return exports.MsgCollectIncentives.fromAmino(object.value);
    },
    toAminoMsg(message) {
        return {
            type: "osmosis/concentratedliquidity/collect-incentives",
            value: exports.MsgCollectIncentives.toAmino(message)
        };
    },
    fromProtoMsg(message) {
        return exports.MsgCollectIncentives.decode(message.value);
    },
    toProto(message) {
        return exports.MsgCollectIncentives.encode(message).finish();
    },
    toProtoMsg(message) {
        return {
            typeUrl: "/osmosis.concentratedliquidity.v1beta1.MsgCollectIncentives",
            value: exports.MsgCollectIncentives.encode(message).finish()
        };
    }
};
function createBaseMsgCollectIncentivesResponse() {
    return {
        collectedIncentives: [],
        forfeitedIncentives: []
    };
}
exports.MsgCollectIncentivesResponse = {
    typeUrl: "/osmosis.concentratedliquidity.v1beta1.MsgCollectIncentivesResponse",
    encode(message, writer = binary_1.BinaryWriter.create()) {
        for (const v of message.collectedIncentives) {
            coin_1.Coin.encode(v, writer.uint32(10).fork()).ldelim();
        }
        for (const v of message.forfeitedIncentives) {
            coin_1.Coin.encode(v, writer.uint32(18).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof binary_1.BinaryReader ? input : new binary_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMsgCollectIncentivesResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.collectedIncentives.push(coin_1.Coin.decode(reader, reader.uint32()));
                    break;
                case 2:
                    message.forfeitedIncentives.push(coin_1.Coin.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromPartial(object) {
        const message = createBaseMsgCollectIncentivesResponse();
        message.collectedIncentives = object.collectedIncentives?.map(e => coin_1.Coin.fromPartial(e)) || [];
        message.forfeitedIncentives = object.forfeitedIncentives?.map(e => coin_1.Coin.fromPartial(e)) || [];
        return message;
    },
    fromAmino(object) {
        return {
            collectedIncentives: Array.isArray(object?.collected_incentives) ? object.collected_incentives.map((e) => coin_1.Coin.fromAmino(e)) : [],
            forfeitedIncentives: Array.isArray(object?.forfeited_incentives) ? object.forfeited_incentives.map((e) => coin_1.Coin.fromAmino(e)) : []
        };
    },
    toAmino(message) {
        const obj = {};
        if (message.collectedIncentives) {
            obj.collected_incentives = message.collectedIncentives.map(e => e ? coin_1.Coin.toAmino(e) : undefined);
        }
        else {
            obj.collected_incentives = [];
        }
        if (message.forfeitedIncentives) {
            obj.forfeited_incentives = message.forfeitedIncentives.map(e => e ? coin_1.Coin.toAmino(e) : undefined);
        }
        else {
            obj.forfeited_incentives = [];
        }
        return obj;
    },
    fromAminoMsg(object) {
        return exports.MsgCollectIncentivesResponse.fromAmino(object.value);
    },
    toAminoMsg(message) {
        return {
            type: "osmosis/concentratedliquidity/collect-incentives-response",
            value: exports.MsgCollectIncentivesResponse.toAmino(message)
        };
    },
    fromProtoMsg(message) {
        return exports.MsgCollectIncentivesResponse.decode(message.value);
    },
    toProto(message) {
        return exports.MsgCollectIncentivesResponse.encode(message).finish();
    },
    toProtoMsg(message) {
        return {
            typeUrl: "/osmosis.concentratedliquidity.v1beta1.MsgCollectIncentivesResponse",
            value: exports.MsgCollectIncentivesResponse.encode(message).finish()
        };
    }
};
function createBaseMsgFungifyChargedPositions() {
    return {
        positionIds: [],
        sender: ""
    };
}
exports.MsgFungifyChargedPositions = {
    typeUrl: "/osmosis.concentratedliquidity.v1beta1.MsgFungifyChargedPositions",
    encode(message, writer = binary_1.BinaryWriter.create()) {
        writer.uint32(10).fork();
        for (const v of message.positionIds) {
            writer.uint64(v);
        }
        writer.ldelim();
        if (message.sender !== "") {
            writer.uint32(18).string(message.sender);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof binary_1.BinaryReader ? input : new binary_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMsgFungifyChargedPositions();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if ((tag & 7) === 2) {
                        const end2 = reader.uint32() + reader.pos;
                        while (reader.pos < end2) {
                            message.positionIds.push(reader.uint64());
                        }
                    }
                    else {
                        message.positionIds.push(reader.uint64());
                    }
                    break;
                case 2:
                    message.sender = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromPartial(object) {
        const message = createBaseMsgFungifyChargedPositions();
        message.positionIds = object.positionIds?.map(e => BigInt(e.toString())) || [];
        message.sender = object.sender ?? "";
        return message;
    },
    fromAmino(object) {
        return {
            positionIds: Array.isArray(object?.position_ids) ? object.position_ids.map((e) => BigInt(e)) : [],
            sender: object.sender
        };
    },
    toAmino(message) {
        const obj = {};
        if (message.positionIds) {
            obj.position_ids = message.positionIds.map(e => e.toString());
        }
        else {
            obj.position_ids = [];
        }
        obj.sender = message.sender;
        return obj;
    },
    fromAminoMsg(object) {
        return exports.MsgFungifyChargedPositions.fromAmino(object.value);
    },
    toAminoMsg(message) {
        return {
            type: "osmosis/concentratedliquidity/fungify-charged-positions",
            value: exports.MsgFungifyChargedPositions.toAmino(message)
        };
    },
    fromProtoMsg(message) {
        return exports.MsgFungifyChargedPositions.decode(message.value);
    },
    toProto(message) {
        return exports.MsgFungifyChargedPositions.encode(message).finish();
    },
    toProtoMsg(message) {
        return {
            typeUrl: "/osmosis.concentratedliquidity.v1beta1.MsgFungifyChargedPositions",
            value: exports.MsgFungifyChargedPositions.encode(message).finish()
        };
    }
};
function createBaseMsgFungifyChargedPositionsResponse() {
    return {
        newPositionId: BigInt(0)
    };
}
exports.MsgFungifyChargedPositionsResponse = {
    typeUrl: "/osmosis.concentratedliquidity.v1beta1.MsgFungifyChargedPositionsResponse",
    encode(message, writer = binary_1.BinaryWriter.create()) {
        if (message.newPositionId !== BigInt(0)) {
            writer.uint32(8).uint64(message.newPositionId);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof binary_1.BinaryReader ? input : new binary_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMsgFungifyChargedPositionsResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.newPositionId = reader.uint64();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromPartial(object) {
        const message = createBaseMsgFungifyChargedPositionsResponse();
        message.newPositionId = object.newPositionId !== undefined && object.newPositionId !== null ? BigInt(object.newPositionId.toString()) : BigInt(0);
        return message;
    },
    fromAmino(object) {
        return {
            newPositionId: BigInt(object.new_position_id)
        };
    },
    toAmino(message) {
        const obj = {};
        obj.new_position_id = message.newPositionId ? message.newPositionId.toString() : undefined;
        return obj;
    },
    fromAminoMsg(object) {
        return exports.MsgFungifyChargedPositionsResponse.fromAmino(object.value);
    },
    toAminoMsg(message) {
        return {
            type: "osmosis/concentratedliquidity/fungify-charged-positions-response",
            value: exports.MsgFungifyChargedPositionsResponse.toAmino(message)
        };
    },
    fromProtoMsg(message) {
        return exports.MsgFungifyChargedPositionsResponse.decode(message.value);
    },
    toProto(message) {
        return exports.MsgFungifyChargedPositionsResponse.encode(message).finish();
    },
    toProtoMsg(message) {
        return {
            typeUrl: "/osmosis.concentratedliquidity.v1beta1.MsgFungifyChargedPositionsResponse",
            value: exports.MsgFungifyChargedPositionsResponse.encode(message).finish()
        };
    }
};
//# sourceMappingURL=tx.js.map
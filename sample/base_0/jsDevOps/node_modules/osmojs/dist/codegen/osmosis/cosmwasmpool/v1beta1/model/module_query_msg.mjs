import { Coin } from "../../../../cosmos/base/v1beta1/coin";
import { BinaryReader, BinaryWriter } from "../../../../binary";
import { Decimal } from "@cosmjs/math";
function createBaseCalcOutAmtGivenIn() {
    return {
        tokenIn: undefined,
        tokenOutDenom: "",
        swapFee: ""
    };
}
export const CalcOutAmtGivenIn = {
    typeUrl: "/osmosis.cosmwasmpool.v1beta1.CalcOutAmtGivenIn",
    encode(message, writer = BinaryWriter.create()) {
        if (message.tokenIn !== undefined) {
            Coin.encode(message.tokenIn, writer.uint32(10).fork()).ldelim();
        }
        if (message.tokenOutDenom !== "") {
            writer.uint32(18).string(message.tokenOutDenom);
        }
        if (message.swapFee !== "") {
            writer.uint32(26).string(Decimal.fromUserInput(message.swapFee, 18).atomics);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCalcOutAmtGivenIn();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.tokenIn = Coin.decode(reader, reader.uint32());
                    break;
                case 2:
                    message.tokenOutDenom = reader.string();
                    break;
                case 3:
                    message.swapFee = Decimal.fromAtomics(reader.string(), 18).toString();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromPartial(object) {
        const message = createBaseCalcOutAmtGivenIn();
        message.tokenIn = object.tokenIn !== undefined && object.tokenIn !== null ? Coin.fromPartial(object.tokenIn) : undefined;
        message.tokenOutDenom = object.tokenOutDenom ?? "";
        message.swapFee = object.swapFee ?? "";
        return message;
    },
    fromAmino(object) {
        return {
            tokenIn: object?.token_in ? Coin.fromAmino(object.token_in) : undefined,
            tokenOutDenom: object.token_out_denom,
            swapFee: object.swap_fee
        };
    },
    toAmino(message) {
        const obj = {};
        obj.token_in = message.tokenIn ? Coin.toAmino(message.tokenIn) : undefined;
        obj.token_out_denom = message.tokenOutDenom;
        obj.swap_fee = message.swapFee;
        return obj;
    },
    fromAminoMsg(object) {
        return CalcOutAmtGivenIn.fromAmino(object.value);
    },
    toAminoMsg(message) {
        return {
            type: "osmosis/cosmwasmpool/calc-out-amt-given-in",
            value: CalcOutAmtGivenIn.toAmino(message)
        };
    },
    fromProtoMsg(message) {
        return CalcOutAmtGivenIn.decode(message.value);
    },
    toProto(message) {
        return CalcOutAmtGivenIn.encode(message).finish();
    },
    toProtoMsg(message) {
        return {
            typeUrl: "/osmosis.cosmwasmpool.v1beta1.CalcOutAmtGivenIn",
            value: CalcOutAmtGivenIn.encode(message).finish()
        };
    }
};
function createBaseCalcOutAmtGivenInRequest() {
    return {
        calcOutAmtGivenIn: CalcOutAmtGivenIn.fromPartial({})
    };
}
export const CalcOutAmtGivenInRequest = {
    typeUrl: "/osmosis.cosmwasmpool.v1beta1.CalcOutAmtGivenInRequest",
    encode(message, writer = BinaryWriter.create()) {
        if (message.calcOutAmtGivenIn !== undefined) {
            CalcOutAmtGivenIn.encode(message.calcOutAmtGivenIn, writer.uint32(10).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCalcOutAmtGivenInRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.calcOutAmtGivenIn = CalcOutAmtGivenIn.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromPartial(object) {
        const message = createBaseCalcOutAmtGivenInRequest();
        message.calcOutAmtGivenIn = object.calcOutAmtGivenIn !== undefined && object.calcOutAmtGivenIn !== null ? CalcOutAmtGivenIn.fromPartial(object.calcOutAmtGivenIn) : undefined;
        return message;
    },
    fromAmino(object) {
        return {
            calcOutAmtGivenIn: object?.calc_out_amt_given_in ? CalcOutAmtGivenIn.fromAmino(object.calc_out_amt_given_in) : undefined
        };
    },
    toAmino(message) {
        const obj = {};
        obj.calc_out_amt_given_in = message.calcOutAmtGivenIn ? CalcOutAmtGivenIn.toAmino(message.calcOutAmtGivenIn) : undefined;
        return obj;
    },
    fromAminoMsg(object) {
        return CalcOutAmtGivenInRequest.fromAmino(object.value);
    },
    toAminoMsg(message) {
        return {
            type: "osmosis/cosmwasmpool/calc-out-amt-given-in-request",
            value: CalcOutAmtGivenInRequest.toAmino(message)
        };
    },
    fromProtoMsg(message) {
        return CalcOutAmtGivenInRequest.decode(message.value);
    },
    toProto(message) {
        return CalcOutAmtGivenInRequest.encode(message).finish();
    },
    toProtoMsg(message) {
        return {
            typeUrl: "/osmosis.cosmwasmpool.v1beta1.CalcOutAmtGivenInRequest",
            value: CalcOutAmtGivenInRequest.encode(message).finish()
        };
    }
};
function createBaseCalcOutAmtGivenInResponse() {
    return {
        tokenOut: undefined
    };
}
export const CalcOutAmtGivenInResponse = {
    typeUrl: "/osmosis.cosmwasmpool.v1beta1.CalcOutAmtGivenInResponse",
    encode(message, writer = BinaryWriter.create()) {
        if (message.tokenOut !== undefined) {
            Coin.encode(message.tokenOut, writer.uint32(10).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCalcOutAmtGivenInResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.tokenOut = Coin.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromPartial(object) {
        const message = createBaseCalcOutAmtGivenInResponse();
        message.tokenOut = object.tokenOut !== undefined && object.tokenOut !== null ? Coin.fromPartial(object.tokenOut) : undefined;
        return message;
    },
    fromAmino(object) {
        return {
            tokenOut: object?.token_out ? Coin.fromAmino(object.token_out) : undefined
        };
    },
    toAmino(message) {
        const obj = {};
        obj.token_out = message.tokenOut ? Coin.toAmino(message.tokenOut) : undefined;
        return obj;
    },
    fromAminoMsg(object) {
        return CalcOutAmtGivenInResponse.fromAmino(object.value);
    },
    toAminoMsg(message) {
        return {
            type: "osmosis/cosmwasmpool/calc-out-amt-given-in-response",
            value: CalcOutAmtGivenInResponse.toAmino(message)
        };
    },
    fromProtoMsg(message) {
        return CalcOutAmtGivenInResponse.decode(message.value);
    },
    toProto(message) {
        return CalcOutAmtGivenInResponse.encode(message).finish();
    },
    toProtoMsg(message) {
        return {
            typeUrl: "/osmosis.cosmwasmpool.v1beta1.CalcOutAmtGivenInResponse",
            value: CalcOutAmtGivenInResponse.encode(message).finish()
        };
    }
};
function createBaseCalcInAmtGivenOut() {
    return {
        tokenOut: undefined,
        tokenInDenom: "",
        swapFee: ""
    };
}
export const CalcInAmtGivenOut = {
    typeUrl: "/osmosis.cosmwasmpool.v1beta1.CalcInAmtGivenOut",
    encode(message, writer = BinaryWriter.create()) {
        if (message.tokenOut !== undefined) {
            Coin.encode(message.tokenOut, writer.uint32(10).fork()).ldelim();
        }
        if (message.tokenInDenom !== "") {
            writer.uint32(18).string(message.tokenInDenom);
        }
        if (message.swapFee !== "") {
            writer.uint32(26).string(Decimal.fromUserInput(message.swapFee, 18).atomics);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCalcInAmtGivenOut();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.tokenOut = Coin.decode(reader, reader.uint32());
                    break;
                case 2:
                    message.tokenInDenom = reader.string();
                    break;
                case 3:
                    message.swapFee = Decimal.fromAtomics(reader.string(), 18).toString();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromPartial(object) {
        const message = createBaseCalcInAmtGivenOut();
        message.tokenOut = object.tokenOut !== undefined && object.tokenOut !== null ? Coin.fromPartial(object.tokenOut) : undefined;
        message.tokenInDenom = object.tokenInDenom ?? "";
        message.swapFee = object.swapFee ?? "";
        return message;
    },
    fromAmino(object) {
        return {
            tokenOut: object?.token_out ? Coin.fromAmino(object.token_out) : undefined,
            tokenInDenom: object.token_in_denom,
            swapFee: object.swap_fee
        };
    },
    toAmino(message) {
        const obj = {};
        obj.token_out = message.tokenOut ? Coin.toAmino(message.tokenOut) : undefined;
        obj.token_in_denom = message.tokenInDenom;
        obj.swap_fee = message.swapFee;
        return obj;
    },
    fromAminoMsg(object) {
        return CalcInAmtGivenOut.fromAmino(object.value);
    },
    toAminoMsg(message) {
        return {
            type: "osmosis/cosmwasmpool/calc-in-amt-given-out",
            value: CalcInAmtGivenOut.toAmino(message)
        };
    },
    fromProtoMsg(message) {
        return CalcInAmtGivenOut.decode(message.value);
    },
    toProto(message) {
        return CalcInAmtGivenOut.encode(message).finish();
    },
    toProtoMsg(message) {
        return {
            typeUrl: "/osmosis.cosmwasmpool.v1beta1.CalcInAmtGivenOut",
            value: CalcInAmtGivenOut.encode(message).finish()
        };
    }
};
function createBaseCalcInAmtGivenOutRequest() {
    return {
        calcInAmtGivenOut: CalcInAmtGivenOut.fromPartial({})
    };
}
export const CalcInAmtGivenOutRequest = {
    typeUrl: "/osmosis.cosmwasmpool.v1beta1.CalcInAmtGivenOutRequest",
    encode(message, writer = BinaryWriter.create()) {
        if (message.calcInAmtGivenOut !== undefined) {
            CalcInAmtGivenOut.encode(message.calcInAmtGivenOut, writer.uint32(10).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCalcInAmtGivenOutRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.calcInAmtGivenOut = CalcInAmtGivenOut.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromPartial(object) {
        const message = createBaseCalcInAmtGivenOutRequest();
        message.calcInAmtGivenOut = object.calcInAmtGivenOut !== undefined && object.calcInAmtGivenOut !== null ? CalcInAmtGivenOut.fromPartial(object.calcInAmtGivenOut) : undefined;
        return message;
    },
    fromAmino(object) {
        return {
            calcInAmtGivenOut: object?.calc_in_amt_given_out ? CalcInAmtGivenOut.fromAmino(object.calc_in_amt_given_out) : undefined
        };
    },
    toAmino(message) {
        const obj = {};
        obj.calc_in_amt_given_out = message.calcInAmtGivenOut ? CalcInAmtGivenOut.toAmino(message.calcInAmtGivenOut) : undefined;
        return obj;
    },
    fromAminoMsg(object) {
        return CalcInAmtGivenOutRequest.fromAmino(object.value);
    },
    toAminoMsg(message) {
        return {
            type: "osmosis/cosmwasmpool/calc-in-amt-given-out-request",
            value: CalcInAmtGivenOutRequest.toAmino(message)
        };
    },
    fromProtoMsg(message) {
        return CalcInAmtGivenOutRequest.decode(message.value);
    },
    toProto(message) {
        return CalcInAmtGivenOutRequest.encode(message).finish();
    },
    toProtoMsg(message) {
        return {
            typeUrl: "/osmosis.cosmwasmpool.v1beta1.CalcInAmtGivenOutRequest",
            value: CalcInAmtGivenOutRequest.encode(message).finish()
        };
    }
};
function createBaseCalcInAmtGivenOutResponse() {
    return {
        tokenIn: undefined
    };
}
export const CalcInAmtGivenOutResponse = {
    typeUrl: "/osmosis.cosmwasmpool.v1beta1.CalcInAmtGivenOutResponse",
    encode(message, writer = BinaryWriter.create()) {
        if (message.tokenIn !== undefined) {
            Coin.encode(message.tokenIn, writer.uint32(10).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCalcInAmtGivenOutResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.tokenIn = Coin.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromPartial(object) {
        const message = createBaseCalcInAmtGivenOutResponse();
        message.tokenIn = object.tokenIn !== undefined && object.tokenIn !== null ? Coin.fromPartial(object.tokenIn) : undefined;
        return message;
    },
    fromAmino(object) {
        return {
            tokenIn: object?.token_in ? Coin.fromAmino(object.token_in) : undefined
        };
    },
    toAmino(message) {
        const obj = {};
        obj.token_in = message.tokenIn ? Coin.toAmino(message.tokenIn) : undefined;
        return obj;
    },
    fromAminoMsg(object) {
        return CalcInAmtGivenOutResponse.fromAmino(object.value);
    },
    toAminoMsg(message) {
        return {
            type: "osmosis/cosmwasmpool/calc-in-amt-given-out-response",
            value: CalcInAmtGivenOutResponse.toAmino(message)
        };
    },
    fromProtoMsg(message) {
        return CalcInAmtGivenOutResponse.decode(message.value);
    },
    toProto(message) {
        return CalcInAmtGivenOutResponse.encode(message).finish();
    },
    toProtoMsg(message) {
        return {
            typeUrl: "/osmosis.cosmwasmpool.v1beta1.CalcInAmtGivenOutResponse",
            value: CalcInAmtGivenOutResponse.encode(message).finish()
        };
    }
};
//# sourceMappingURL=module_query_msg.js.map
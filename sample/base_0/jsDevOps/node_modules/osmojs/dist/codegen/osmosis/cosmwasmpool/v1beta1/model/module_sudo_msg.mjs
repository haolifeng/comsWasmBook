import { Coin } from "../../../../cosmos/base/v1beta1/coin";
import { BinaryReader, BinaryWriter } from "../../../../binary";
import { Decimal } from "@cosmjs/math";
function createBaseSwapExactAmountIn() {
    return {
        sender: "",
        tokenIn: undefined,
        tokenOutDenom: "",
        tokenOutMinAmount: "",
        swapFee: ""
    };
}
export const SwapExactAmountIn = {
    typeUrl: "/osmosis.cosmwasmpool.v1beta1.SwapExactAmountIn",
    encode(message, writer = BinaryWriter.create()) {
        if (message.sender !== "") {
            writer.uint32(10).string(message.sender);
        }
        if (message.tokenIn !== undefined) {
            Coin.encode(message.tokenIn, writer.uint32(18).fork()).ldelim();
        }
        if (message.tokenOutDenom !== "") {
            writer.uint32(26).string(message.tokenOutDenom);
        }
        if (message.tokenOutMinAmount !== "") {
            writer.uint32(34).string(message.tokenOutMinAmount);
        }
        if (message.swapFee !== "") {
            writer.uint32(42).string(Decimal.fromUserInput(message.swapFee, 18).atomics);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseSwapExactAmountIn();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.sender = reader.string();
                    break;
                case 2:
                    message.tokenIn = Coin.decode(reader, reader.uint32());
                    break;
                case 3:
                    message.tokenOutDenom = reader.string();
                    break;
                case 4:
                    message.tokenOutMinAmount = reader.string();
                    break;
                case 5:
                    message.swapFee = Decimal.fromAtomics(reader.string(), 18).toString();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromPartial(object) {
        const message = createBaseSwapExactAmountIn();
        message.sender = object.sender ?? "";
        message.tokenIn = object.tokenIn !== undefined && object.tokenIn !== null ? Coin.fromPartial(object.tokenIn) : undefined;
        message.tokenOutDenom = object.tokenOutDenom ?? "";
        message.tokenOutMinAmount = object.tokenOutMinAmount ?? "";
        message.swapFee = object.swapFee ?? "";
        return message;
    },
    fromAmino(object) {
        return {
            sender: object.sender,
            tokenIn: object?.token_in ? Coin.fromAmino(object.token_in) : undefined,
            tokenOutDenom: object.token_out_denom,
            tokenOutMinAmount: object.token_out_min_amount,
            swapFee: object.swap_fee
        };
    },
    toAmino(message) {
        const obj = {};
        obj.sender = message.sender;
        obj.token_in = message.tokenIn ? Coin.toAmino(message.tokenIn) : undefined;
        obj.token_out_denom = message.tokenOutDenom;
        obj.token_out_min_amount = message.tokenOutMinAmount;
        obj.swap_fee = message.swapFee;
        return obj;
    },
    fromAminoMsg(object) {
        return SwapExactAmountIn.fromAmino(object.value);
    },
    toAminoMsg(message) {
        return {
            type: "osmosis/cosmwasmpool/swap-exact-amount-in",
            value: SwapExactAmountIn.toAmino(message)
        };
    },
    fromProtoMsg(message) {
        return SwapExactAmountIn.decode(message.value);
    },
    toProto(message) {
        return SwapExactAmountIn.encode(message).finish();
    },
    toProtoMsg(message) {
        return {
            typeUrl: "/osmosis.cosmwasmpool.v1beta1.SwapExactAmountIn",
            value: SwapExactAmountIn.encode(message).finish()
        };
    }
};
function createBaseSwapExactAmountInSudoMsg() {
    return {
        swapExactAmountIn: SwapExactAmountIn.fromPartial({})
    };
}
export const SwapExactAmountInSudoMsg = {
    typeUrl: "/osmosis.cosmwasmpool.v1beta1.SwapExactAmountInSudoMsg",
    encode(message, writer = BinaryWriter.create()) {
        if (message.swapExactAmountIn !== undefined) {
            SwapExactAmountIn.encode(message.swapExactAmountIn, writer.uint32(10).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseSwapExactAmountInSudoMsg();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.swapExactAmountIn = SwapExactAmountIn.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromPartial(object) {
        const message = createBaseSwapExactAmountInSudoMsg();
        message.swapExactAmountIn = object.swapExactAmountIn !== undefined && object.swapExactAmountIn !== null ? SwapExactAmountIn.fromPartial(object.swapExactAmountIn) : undefined;
        return message;
    },
    fromAmino(object) {
        return {
            swapExactAmountIn: object?.swap_exact_amount_in ? SwapExactAmountIn.fromAmino(object.swap_exact_amount_in) : undefined
        };
    },
    toAmino(message) {
        const obj = {};
        obj.swap_exact_amount_in = message.swapExactAmountIn ? SwapExactAmountIn.toAmino(message.swapExactAmountIn) : undefined;
        return obj;
    },
    fromAminoMsg(object) {
        return SwapExactAmountInSudoMsg.fromAmino(object.value);
    },
    toAminoMsg(message) {
        return {
            type: "osmosis/cosmwasmpool/swap-exact-amount-in-sudo-msg",
            value: SwapExactAmountInSudoMsg.toAmino(message)
        };
    },
    fromProtoMsg(message) {
        return SwapExactAmountInSudoMsg.decode(message.value);
    },
    toProto(message) {
        return SwapExactAmountInSudoMsg.encode(message).finish();
    },
    toProtoMsg(message) {
        return {
            typeUrl: "/osmosis.cosmwasmpool.v1beta1.SwapExactAmountInSudoMsg",
            value: SwapExactAmountInSudoMsg.encode(message).finish()
        };
    }
};
function createBaseSwapExactAmountInSudoMsgResponse() {
    return {
        tokenOutAmount: ""
    };
}
export const SwapExactAmountInSudoMsgResponse = {
    typeUrl: "/osmosis.cosmwasmpool.v1beta1.SwapExactAmountInSudoMsgResponse",
    encode(message, writer = BinaryWriter.create()) {
        if (message.tokenOutAmount !== "") {
            writer.uint32(10).string(message.tokenOutAmount);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseSwapExactAmountInSudoMsgResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.tokenOutAmount = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromPartial(object) {
        const message = createBaseSwapExactAmountInSudoMsgResponse();
        message.tokenOutAmount = object.tokenOutAmount ?? "";
        return message;
    },
    fromAmino(object) {
        return {
            tokenOutAmount: object.token_out_amount
        };
    },
    toAmino(message) {
        const obj = {};
        obj.token_out_amount = message.tokenOutAmount;
        return obj;
    },
    fromAminoMsg(object) {
        return SwapExactAmountInSudoMsgResponse.fromAmino(object.value);
    },
    toAminoMsg(message) {
        return {
            type: "osmosis/cosmwasmpool/swap-exact-amount-in-sudo-msg-response",
            value: SwapExactAmountInSudoMsgResponse.toAmino(message)
        };
    },
    fromProtoMsg(message) {
        return SwapExactAmountInSudoMsgResponse.decode(message.value);
    },
    toProto(message) {
        return SwapExactAmountInSudoMsgResponse.encode(message).finish();
    },
    toProtoMsg(message) {
        return {
            typeUrl: "/osmosis.cosmwasmpool.v1beta1.SwapExactAmountInSudoMsgResponse",
            value: SwapExactAmountInSudoMsgResponse.encode(message).finish()
        };
    }
};
function createBaseSwapExactAmountOut() {
    return {
        sender: "",
        tokenOut: undefined,
        tokenInDenom: "",
        tokenInMaxAmount: "",
        swapFee: ""
    };
}
export const SwapExactAmountOut = {
    typeUrl: "/osmosis.cosmwasmpool.v1beta1.SwapExactAmountOut",
    encode(message, writer = BinaryWriter.create()) {
        if (message.sender !== "") {
            writer.uint32(10).string(message.sender);
        }
        if (message.tokenOut !== undefined) {
            Coin.encode(message.tokenOut, writer.uint32(18).fork()).ldelim();
        }
        if (message.tokenInDenom !== "") {
            writer.uint32(26).string(message.tokenInDenom);
        }
        if (message.tokenInMaxAmount !== "") {
            writer.uint32(34).string(message.tokenInMaxAmount);
        }
        if (message.swapFee !== "") {
            writer.uint32(42).string(Decimal.fromUserInput(message.swapFee, 18).atomics);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseSwapExactAmountOut();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.sender = reader.string();
                    break;
                case 2:
                    message.tokenOut = Coin.decode(reader, reader.uint32());
                    break;
                case 3:
                    message.tokenInDenom = reader.string();
                    break;
                case 4:
                    message.tokenInMaxAmount = reader.string();
                    break;
                case 5:
                    message.swapFee = Decimal.fromAtomics(reader.string(), 18).toString();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromPartial(object) {
        const message = createBaseSwapExactAmountOut();
        message.sender = object.sender ?? "";
        message.tokenOut = object.tokenOut !== undefined && object.tokenOut !== null ? Coin.fromPartial(object.tokenOut) : undefined;
        message.tokenInDenom = object.tokenInDenom ?? "";
        message.tokenInMaxAmount = object.tokenInMaxAmount ?? "";
        message.swapFee = object.swapFee ?? "";
        return message;
    },
    fromAmino(object) {
        return {
            sender: object.sender,
            tokenOut: object?.token_out ? Coin.fromAmino(object.token_out) : undefined,
            tokenInDenom: object.token_in_denom,
            tokenInMaxAmount: object.token_in_max_amount,
            swapFee: object.swap_fee
        };
    },
    toAmino(message) {
        const obj = {};
        obj.sender = message.sender;
        obj.token_out = message.tokenOut ? Coin.toAmino(message.tokenOut) : undefined;
        obj.token_in_denom = message.tokenInDenom;
        obj.token_in_max_amount = message.tokenInMaxAmount;
        obj.swap_fee = message.swapFee;
        return obj;
    },
    fromAminoMsg(object) {
        return SwapExactAmountOut.fromAmino(object.value);
    },
    toAminoMsg(message) {
        return {
            type: "osmosis/cosmwasmpool/swap-exact-amount-out",
            value: SwapExactAmountOut.toAmino(message)
        };
    },
    fromProtoMsg(message) {
        return SwapExactAmountOut.decode(message.value);
    },
    toProto(message) {
        return SwapExactAmountOut.encode(message).finish();
    },
    toProtoMsg(message) {
        return {
            typeUrl: "/osmosis.cosmwasmpool.v1beta1.SwapExactAmountOut",
            value: SwapExactAmountOut.encode(message).finish()
        };
    }
};
function createBaseSwapExactAmountOutSudoMsg() {
    return {
        swapExactAmountOut: SwapExactAmountOut.fromPartial({})
    };
}
export const SwapExactAmountOutSudoMsg = {
    typeUrl: "/osmosis.cosmwasmpool.v1beta1.SwapExactAmountOutSudoMsg",
    encode(message, writer = BinaryWriter.create()) {
        if (message.swapExactAmountOut !== undefined) {
            SwapExactAmountOut.encode(message.swapExactAmountOut, writer.uint32(10).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseSwapExactAmountOutSudoMsg();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.swapExactAmountOut = SwapExactAmountOut.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromPartial(object) {
        const message = createBaseSwapExactAmountOutSudoMsg();
        message.swapExactAmountOut = object.swapExactAmountOut !== undefined && object.swapExactAmountOut !== null ? SwapExactAmountOut.fromPartial(object.swapExactAmountOut) : undefined;
        return message;
    },
    fromAmino(object) {
        return {
            swapExactAmountOut: object?.swap_exact_amount_out ? SwapExactAmountOut.fromAmino(object.swap_exact_amount_out) : undefined
        };
    },
    toAmino(message) {
        const obj = {};
        obj.swap_exact_amount_out = message.swapExactAmountOut ? SwapExactAmountOut.toAmino(message.swapExactAmountOut) : undefined;
        return obj;
    },
    fromAminoMsg(object) {
        return SwapExactAmountOutSudoMsg.fromAmino(object.value);
    },
    toAminoMsg(message) {
        return {
            type: "osmosis/cosmwasmpool/swap-exact-amount-out-sudo-msg",
            value: SwapExactAmountOutSudoMsg.toAmino(message)
        };
    },
    fromProtoMsg(message) {
        return SwapExactAmountOutSudoMsg.decode(message.value);
    },
    toProto(message) {
        return SwapExactAmountOutSudoMsg.encode(message).finish();
    },
    toProtoMsg(message) {
        return {
            typeUrl: "/osmosis.cosmwasmpool.v1beta1.SwapExactAmountOutSudoMsg",
            value: SwapExactAmountOutSudoMsg.encode(message).finish()
        };
    }
};
function createBaseSwapExactAmountOutSudoMsgResponse() {
    return {
        tokenInAmount: ""
    };
}
export const SwapExactAmountOutSudoMsgResponse = {
    typeUrl: "/osmosis.cosmwasmpool.v1beta1.SwapExactAmountOutSudoMsgResponse",
    encode(message, writer = BinaryWriter.create()) {
        if (message.tokenInAmount !== "") {
            writer.uint32(10).string(message.tokenInAmount);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseSwapExactAmountOutSudoMsgResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.tokenInAmount = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromPartial(object) {
        const message = createBaseSwapExactAmountOutSudoMsgResponse();
        message.tokenInAmount = object.tokenInAmount ?? "";
        return message;
    },
    fromAmino(object) {
        return {
            tokenInAmount: object.token_in_amount
        };
    },
    toAmino(message) {
        const obj = {};
        obj.token_in_amount = message.tokenInAmount;
        return obj;
    },
    fromAminoMsg(object) {
        return SwapExactAmountOutSudoMsgResponse.fromAmino(object.value);
    },
    toAminoMsg(message) {
        return {
            type: "osmosis/cosmwasmpool/swap-exact-amount-out-sudo-msg-response",
            value: SwapExactAmountOutSudoMsgResponse.toAmino(message)
        };
    },
    fromProtoMsg(message) {
        return SwapExactAmountOutSudoMsgResponse.decode(message.value);
    },
    toProto(message) {
        return SwapExactAmountOutSudoMsgResponse.encode(message).finish();
    },
    toProtoMsg(message) {
        return {
            typeUrl: "/osmosis.cosmwasmpool.v1beta1.SwapExactAmountOutSudoMsgResponse",
            value: SwapExactAmountOutSudoMsgResponse.encode(message).finish()
        };
    }
};
//# sourceMappingURL=module_sudo_msg.js.map
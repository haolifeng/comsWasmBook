"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.MsgCreateCosmWasmPoolResponse = exports.MsgCreateCosmWasmPool = void 0;
const binary_1 = require("../../../../binary");
function createBaseMsgCreateCosmWasmPool() {
    return {
        codeId: BigInt(0),
        instantiateMsg: new Uint8Array(),
        sender: ""
    };
}
exports.MsgCreateCosmWasmPool = {
    typeUrl: "/osmosis.cosmwasmpool.v1beta1.MsgCreateCosmWasmPool",
    encode(message, writer = binary_1.BinaryWriter.create()) {
        if (message.codeId !== BigInt(0)) {
            writer.uint32(8).uint64(message.codeId);
        }
        if (message.instantiateMsg.length !== 0) {
            writer.uint32(18).bytes(message.instantiateMsg);
        }
        if (message.sender !== "") {
            writer.uint32(26).string(message.sender);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof binary_1.BinaryReader ? input : new binary_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMsgCreateCosmWasmPool();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.codeId = reader.uint64();
                    break;
                case 2:
                    message.instantiateMsg = reader.bytes();
                    break;
                case 3:
                    message.sender = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromPartial(object) {
        const message = createBaseMsgCreateCosmWasmPool();
        message.codeId = object.codeId !== undefined && object.codeId !== null ? BigInt(object.codeId.toString()) : BigInt(0);
        message.instantiateMsg = object.instantiateMsg ?? new Uint8Array();
        message.sender = object.sender ?? "";
        return message;
    },
    fromAmino(object) {
        return {
            codeId: BigInt(object.code_id),
            instantiateMsg: object.instantiate_msg,
            sender: object.sender
        };
    },
    toAmino(message) {
        const obj = {};
        obj.code_id = message.codeId ? message.codeId.toString() : undefined;
        obj.instantiate_msg = message.instantiateMsg;
        obj.sender = message.sender;
        return obj;
    },
    fromAminoMsg(object) {
        return exports.MsgCreateCosmWasmPool.fromAmino(object.value);
    },
    toAminoMsg(message) {
        return {
            type: "osmosis/cosmwasmpool/create-cosm-wasm-pool",
            value: exports.MsgCreateCosmWasmPool.toAmino(message)
        };
    },
    fromProtoMsg(message) {
        return exports.MsgCreateCosmWasmPool.decode(message.value);
    },
    toProto(message) {
        return exports.MsgCreateCosmWasmPool.encode(message).finish();
    },
    toProtoMsg(message) {
        return {
            typeUrl: "/osmosis.cosmwasmpool.v1beta1.MsgCreateCosmWasmPool",
            value: exports.MsgCreateCosmWasmPool.encode(message).finish()
        };
    }
};
function createBaseMsgCreateCosmWasmPoolResponse() {
    return {
        poolId: BigInt(0)
    };
}
exports.MsgCreateCosmWasmPoolResponse = {
    typeUrl: "/osmosis.cosmwasmpool.v1beta1.MsgCreateCosmWasmPoolResponse",
    encode(message, writer = binary_1.BinaryWriter.create()) {
        if (message.poolId !== BigInt(0)) {
            writer.uint32(8).uint64(message.poolId);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof binary_1.BinaryReader ? input : new binary_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMsgCreateCosmWasmPoolResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.poolId = reader.uint64();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromPartial(object) {
        const message = createBaseMsgCreateCosmWasmPoolResponse();
        message.poolId = object.poolId !== undefined && object.poolId !== null ? BigInt(object.poolId.toString()) : BigInt(0);
        return message;
    },
    fromAmino(object) {
        return {
            poolId: BigInt(object.pool_id)
        };
    },
    toAmino(message) {
        const obj = {};
        obj.pool_id = message.poolId ? message.poolId.toString() : undefined;
        return obj;
    },
    fromAminoMsg(object) {
        return exports.MsgCreateCosmWasmPoolResponse.fromAmino(object.value);
    },
    toAminoMsg(message) {
        return {
            type: "osmosis/cosmwasmpool/create-cosm-wasm-pool-response",
            value: exports.MsgCreateCosmWasmPoolResponse.toAmino(message)
        };
    },
    fromProtoMsg(message) {
        return exports.MsgCreateCosmWasmPoolResponse.decode(message.value);
    },
    toProto(message) {
        return exports.MsgCreateCosmWasmPoolResponse.encode(message).finish();
    },
    toProtoMsg(message) {
        return {
            typeUrl: "/osmosis.cosmwasmpool.v1beta1.MsgCreateCosmWasmPoolResponse",
            value: exports.MsgCreateCosmWasmPoolResponse.encode(message).finish()
        };
    }
};
//# sourceMappingURL=tx.js.map
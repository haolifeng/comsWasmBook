"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.UpdateMigrationRecordsProposal = exports.ReplaceMigrationRecordsProposal = void 0;
const shared_1 = require("./shared");
const binary_1 = require("../../../binary");
function createBaseReplaceMigrationRecordsProposal() {
    return {
        $typeUrl: "/osmosis.gamm.v1beta1.ReplaceMigrationRecordsProposal",
        title: "",
        description: "",
        records: []
    };
}
exports.ReplaceMigrationRecordsProposal = {
    typeUrl: "/osmosis.gamm.v1beta1.ReplaceMigrationRecordsProposal",
    encode(message, writer = binary_1.BinaryWriter.create()) {
        if (message.title !== "") {
            writer.uint32(10).string(message.title);
        }
        if (message.description !== "") {
            writer.uint32(18).string(message.description);
        }
        for (const v of message.records) {
            shared_1.BalancerToConcentratedPoolLink.encode(v, writer.uint32(26).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof binary_1.BinaryReader ? input : new binary_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseReplaceMigrationRecordsProposal();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.title = reader.string();
                    break;
                case 2:
                    message.description = reader.string();
                    break;
                case 3:
                    message.records.push(shared_1.BalancerToConcentratedPoolLink.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromPartial(object) {
        const message = createBaseReplaceMigrationRecordsProposal();
        message.title = object.title ?? "";
        message.description = object.description ?? "";
        message.records = object.records?.map(e => shared_1.BalancerToConcentratedPoolLink.fromPartial(e)) || [];
        return message;
    },
    fromAmino(object) {
        return {
            title: object.title,
            description: object.description,
            records: Array.isArray(object?.records) ? object.records.map((e) => shared_1.BalancerToConcentratedPoolLink.fromAmino(e)) : []
        };
    },
    toAmino(message) {
        const obj = {};
        obj.title = message.title;
        obj.description = message.description;
        if (message.records) {
            obj.records = message.records.map(e => e ? shared_1.BalancerToConcentratedPoolLink.toAmino(e) : undefined);
        }
        else {
            obj.records = [];
        }
        return obj;
    },
    fromAminoMsg(object) {
        return exports.ReplaceMigrationRecordsProposal.fromAmino(object.value);
    },
    toAminoMsg(message) {
        return {
            type: "osmosis/ReplaceMigrationRecordsProposal",
            value: exports.ReplaceMigrationRecordsProposal.toAmino(message)
        };
    },
    fromProtoMsg(message) {
        return exports.ReplaceMigrationRecordsProposal.decode(message.value);
    },
    toProto(message) {
        return exports.ReplaceMigrationRecordsProposal.encode(message).finish();
    },
    toProtoMsg(message) {
        return {
            typeUrl: "/osmosis.gamm.v1beta1.ReplaceMigrationRecordsProposal",
            value: exports.ReplaceMigrationRecordsProposal.encode(message).finish()
        };
    }
};
function createBaseUpdateMigrationRecordsProposal() {
    return {
        $typeUrl: "/osmosis.gamm.v1beta1.UpdateMigrationRecordsProposal",
        title: "",
        description: "",
        records: []
    };
}
exports.UpdateMigrationRecordsProposal = {
    typeUrl: "/osmosis.gamm.v1beta1.UpdateMigrationRecordsProposal",
    encode(message, writer = binary_1.BinaryWriter.create()) {
        if (message.title !== "") {
            writer.uint32(10).string(message.title);
        }
        if (message.description !== "") {
            writer.uint32(18).string(message.description);
        }
        for (const v of message.records) {
            shared_1.BalancerToConcentratedPoolLink.encode(v, writer.uint32(26).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof binary_1.BinaryReader ? input : new binary_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseUpdateMigrationRecordsProposal();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.title = reader.string();
                    break;
                case 2:
                    message.description = reader.string();
                    break;
                case 3:
                    message.records.push(shared_1.BalancerToConcentratedPoolLink.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromPartial(object) {
        const message = createBaseUpdateMigrationRecordsProposal();
        message.title = object.title ?? "";
        message.description = object.description ?? "";
        message.records = object.records?.map(e => shared_1.BalancerToConcentratedPoolLink.fromPartial(e)) || [];
        return message;
    },
    fromAmino(object) {
        return {
            title: object.title,
            description: object.description,
            records: Array.isArray(object?.records) ? object.records.map((e) => shared_1.BalancerToConcentratedPoolLink.fromAmino(e)) : []
        };
    },
    toAmino(message) {
        const obj = {};
        obj.title = message.title;
        obj.description = message.description;
        if (message.records) {
            obj.records = message.records.map(e => e ? shared_1.BalancerToConcentratedPoolLink.toAmino(e) : undefined);
        }
        else {
            obj.records = [];
        }
        return obj;
    },
    fromAminoMsg(object) {
        return exports.UpdateMigrationRecordsProposal.fromAmino(object.value);
    },
    toAminoMsg(message) {
        return {
            type: "osmosis/UpdateMigrationRecordsProposal",
            value: exports.UpdateMigrationRecordsProposal.toAmino(message)
        };
    },
    fromProtoMsg(message) {
        return exports.UpdateMigrationRecordsProposal.decode(message.value);
    },
    toProto(message) {
        return exports.UpdateMigrationRecordsProposal.encode(message).finish();
    },
    toProtoMsg(message) {
        return {
            typeUrl: "/osmosis.gamm.v1beta1.UpdateMigrationRecordsProposal",
            value: exports.UpdateMigrationRecordsProposal.encode(message).finish()
        };
    }
};
//# sourceMappingURL=gov.js.map
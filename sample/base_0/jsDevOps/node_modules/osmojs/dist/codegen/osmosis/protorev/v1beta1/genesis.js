"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.GenesisState = void 0;
const params_1 = require("./params");
const protorev_1 = require("./protorev");
const coin_1 = require("../../../cosmos/base/v1beta1/coin");
const binary_1 = require("../../../binary");
function createBaseGenesisState() {
    return {
        params: params_1.Params.fromPartial({}),
        tokenPairArbRoutes: [],
        baseDenoms: [],
        poolWeights: protorev_1.PoolWeights.fromPartial({}),
        daysSinceModuleGenesis: BigInt(0),
        developerFees: [],
        latestBlockHeight: BigInt(0),
        developerAddress: "",
        maxPoolPointsPerBlock: BigInt(0),
        maxPoolPointsPerTx: BigInt(0),
        pointCountForBlock: BigInt(0),
        profits: []
    };
}
exports.GenesisState = {
    typeUrl: "/osmosis.protorev.v1beta1.GenesisState",
    encode(message, writer = binary_1.BinaryWriter.create()) {
        if (message.params !== undefined) {
            params_1.Params.encode(message.params, writer.uint32(10).fork()).ldelim();
        }
        for (const v of message.tokenPairArbRoutes) {
            protorev_1.TokenPairArbRoutes.encode(v, writer.uint32(18).fork()).ldelim();
        }
        for (const v of message.baseDenoms) {
            protorev_1.BaseDenom.encode(v, writer.uint32(26).fork()).ldelim();
        }
        if (message.poolWeights !== undefined) {
            protorev_1.PoolWeights.encode(message.poolWeights, writer.uint32(34).fork()).ldelim();
        }
        if (message.daysSinceModuleGenesis !== BigInt(0)) {
            writer.uint32(40).uint64(message.daysSinceModuleGenesis);
        }
        for (const v of message.developerFees) {
            coin_1.Coin.encode(v, writer.uint32(50).fork()).ldelim();
        }
        if (message.latestBlockHeight !== BigInt(0)) {
            writer.uint32(56).uint64(message.latestBlockHeight);
        }
        if (message.developerAddress !== "") {
            writer.uint32(66).string(message.developerAddress);
        }
        if (message.maxPoolPointsPerBlock !== BigInt(0)) {
            writer.uint32(72).uint64(message.maxPoolPointsPerBlock);
        }
        if (message.maxPoolPointsPerTx !== BigInt(0)) {
            writer.uint32(80).uint64(message.maxPoolPointsPerTx);
        }
        if (message.pointCountForBlock !== BigInt(0)) {
            writer.uint32(88).uint64(message.pointCountForBlock);
        }
        for (const v of message.profits) {
            coin_1.Coin.encode(v, writer.uint32(98).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof binary_1.BinaryReader ? input : new binary_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseGenesisState();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.params = params_1.Params.decode(reader, reader.uint32());
                    break;
                case 2:
                    message.tokenPairArbRoutes.push(protorev_1.TokenPairArbRoutes.decode(reader, reader.uint32()));
                    break;
                case 3:
                    message.baseDenoms.push(protorev_1.BaseDenom.decode(reader, reader.uint32()));
                    break;
                case 4:
                    message.poolWeights = protorev_1.PoolWeights.decode(reader, reader.uint32());
                    break;
                case 5:
                    message.daysSinceModuleGenesis = reader.uint64();
                    break;
                case 6:
                    message.developerFees.push(coin_1.Coin.decode(reader, reader.uint32()));
                    break;
                case 7:
                    message.latestBlockHeight = reader.uint64();
                    break;
                case 8:
                    message.developerAddress = reader.string();
                    break;
                case 9:
                    message.maxPoolPointsPerBlock = reader.uint64();
                    break;
                case 10:
                    message.maxPoolPointsPerTx = reader.uint64();
                    break;
                case 11:
                    message.pointCountForBlock = reader.uint64();
                    break;
                case 12:
                    message.profits.push(coin_1.Coin.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromPartial(object) {
        const message = createBaseGenesisState();
        message.params = object.params !== undefined && object.params !== null ? params_1.Params.fromPartial(object.params) : undefined;
        message.tokenPairArbRoutes = object.tokenPairArbRoutes?.map(e => protorev_1.TokenPairArbRoutes.fromPartial(e)) || [];
        message.baseDenoms = object.baseDenoms?.map(e => protorev_1.BaseDenom.fromPartial(e)) || [];
        message.poolWeights = object.poolWeights !== undefined && object.poolWeights !== null ? protorev_1.PoolWeights.fromPartial(object.poolWeights) : undefined;
        message.daysSinceModuleGenesis = object.daysSinceModuleGenesis !== undefined && object.daysSinceModuleGenesis !== null ? BigInt(object.daysSinceModuleGenesis.toString()) : BigInt(0);
        message.developerFees = object.developerFees?.map(e => coin_1.Coin.fromPartial(e)) || [];
        message.latestBlockHeight = object.latestBlockHeight !== undefined && object.latestBlockHeight !== null ? BigInt(object.latestBlockHeight.toString()) : BigInt(0);
        message.developerAddress = object.developerAddress ?? "";
        message.maxPoolPointsPerBlock = object.maxPoolPointsPerBlock !== undefined && object.maxPoolPointsPerBlock !== null ? BigInt(object.maxPoolPointsPerBlock.toString()) : BigInt(0);
        message.maxPoolPointsPerTx = object.maxPoolPointsPerTx !== undefined && object.maxPoolPointsPerTx !== null ? BigInt(object.maxPoolPointsPerTx.toString()) : BigInt(0);
        message.pointCountForBlock = object.pointCountForBlock !== undefined && object.pointCountForBlock !== null ? BigInt(object.pointCountForBlock.toString()) : BigInt(0);
        message.profits = object.profits?.map(e => coin_1.Coin.fromPartial(e)) || [];
        return message;
    },
    fromAmino(object) {
        return {
            params: object?.params ? params_1.Params.fromAmino(object.params) : undefined,
            tokenPairArbRoutes: Array.isArray(object?.token_pair_arb_routes) ? object.token_pair_arb_routes.map((e) => protorev_1.TokenPairArbRoutes.fromAmino(e)) : [],
            baseDenoms: Array.isArray(object?.base_denoms) ? object.base_denoms.map((e) => protorev_1.BaseDenom.fromAmino(e)) : [],
            poolWeights: object?.pool_weights ? protorev_1.PoolWeights.fromAmino(object.pool_weights) : undefined,
            daysSinceModuleGenesis: BigInt(object.days_since_module_genesis),
            developerFees: Array.isArray(object?.developer_fees) ? object.developer_fees.map((e) => coin_1.Coin.fromAmino(e)) : [],
            latestBlockHeight: BigInt(object.latest_block_height),
            developerAddress: object.developer_address,
            maxPoolPointsPerBlock: BigInt(object.max_pool_points_per_block),
            maxPoolPointsPerTx: BigInt(object.max_pool_points_per_tx),
            pointCountForBlock: BigInt(object.point_count_for_block),
            profits: Array.isArray(object?.profits) ? object.profits.map((e) => coin_1.Coin.fromAmino(e)) : []
        };
    },
    toAmino(message) {
        const obj = {};
        obj.params = message.params ? params_1.Params.toAmino(message.params) : undefined;
        if (message.tokenPairArbRoutes) {
            obj.token_pair_arb_routes = message.tokenPairArbRoutes.map(e => e ? protorev_1.TokenPairArbRoutes.toAmino(e) : undefined);
        }
        else {
            obj.token_pair_arb_routes = [];
        }
        if (message.baseDenoms) {
            obj.base_denoms = message.baseDenoms.map(e => e ? protorev_1.BaseDenom.toAmino(e) : undefined);
        }
        else {
            obj.base_denoms = [];
        }
        obj.pool_weights = message.poolWeights ? protorev_1.PoolWeights.toAmino(message.poolWeights) : undefined;
        obj.days_since_module_genesis = message.daysSinceModuleGenesis ? message.daysSinceModuleGenesis.toString() : undefined;
        if (message.developerFees) {
            obj.developer_fees = message.developerFees.map(e => e ? coin_1.Coin.toAmino(e) : undefined);
        }
        else {
            obj.developer_fees = [];
        }
        obj.latest_block_height = message.latestBlockHeight ? message.latestBlockHeight.toString() : undefined;
        obj.developer_address = message.developerAddress;
        obj.max_pool_points_per_block = message.maxPoolPointsPerBlock ? message.maxPoolPointsPerBlock.toString() : undefined;
        obj.max_pool_points_per_tx = message.maxPoolPointsPerTx ? message.maxPoolPointsPerTx.toString() : undefined;
        obj.point_count_for_block = message.pointCountForBlock ? message.pointCountForBlock.toString() : undefined;
        if (message.profits) {
            obj.profits = message.profits.map(e => e ? coin_1.Coin.toAmino(e) : undefined);
        }
        else {
            obj.profits = [];
        }
        return obj;
    },
    fromAminoMsg(object) {
        return exports.GenesisState.fromAmino(object.value);
    },
    toAminoMsg(message) {
        return {
            type: "osmosis/protorev/genesis-state",
            value: exports.GenesisState.toAmino(message)
        };
    },
    fromProtoMsg(message) {
        return exports.GenesisState.decode(message.value);
    },
    toProto(message) {
        return exports.GenesisState.encode(message).finish();
    },
    toProtoMsg(message) {
        return {
            typeUrl: "/osmosis.protorev.v1beta1.GenesisState",
            value: exports.GenesisState.encode(message).finish()
        };
    }
};
//# sourceMappingURL=genesis.js.map
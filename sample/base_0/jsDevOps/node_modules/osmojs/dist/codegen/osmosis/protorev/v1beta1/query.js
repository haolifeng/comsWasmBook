"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.QueryGetProtoRevPoolResponse = exports.QueryGetProtoRevPoolRequest = exports.QueryGetProtoRevEnabledResponse = exports.QueryGetProtoRevEnabledRequest = exports.QueryGetProtoRevBaseDenomsResponse = exports.QueryGetProtoRevBaseDenomsRequest = exports.QueryGetProtoRevMaxPoolPointsPerTxResponse = exports.QueryGetProtoRevMaxPoolPointsPerTxRequest = exports.QueryGetProtoRevMaxPoolPointsPerBlockResponse = exports.QueryGetProtoRevMaxPoolPointsPerBlockRequest = exports.QueryGetProtoRevPoolWeightsResponse = exports.QueryGetProtoRevPoolWeightsRequest = exports.QueryGetProtoRevDeveloperAccountResponse = exports.QueryGetProtoRevDeveloperAccountRequest = exports.QueryGetProtoRevAdminAccountResponse = exports.QueryGetProtoRevAdminAccountRequest = exports.QueryGetProtoRevTokenPairArbRoutesResponse = exports.QueryGetProtoRevTokenPairArbRoutesRequest = exports.QueryGetProtoRevAllRouteStatisticsResponse = exports.QueryGetProtoRevAllRouteStatisticsRequest = exports.QueryGetProtoRevStatisticsByRouteResponse = exports.QueryGetProtoRevStatisticsByRouteRequest = exports.QueryGetProtoRevAllProfitsResponse = exports.QueryGetProtoRevAllProfitsRequest = exports.QueryGetProtoRevProfitsByDenomResponse = exports.QueryGetProtoRevProfitsByDenomRequest = exports.QueryGetProtoRevNumberOfTradesResponse = exports.QueryGetProtoRevNumberOfTradesRequest = exports.QueryParamsResponse = exports.QueryParamsRequest = void 0;
const params_1 = require("./params");
const coin_1 = require("../../../cosmos/base/v1beta1/coin");
const protorev_1 = require("./protorev");
const binary_1 = require("../../../binary");
function createBaseQueryParamsRequest() {
    return {};
}
exports.QueryParamsRequest = {
    typeUrl: "/osmosis.protorev.v1beta1.QueryParamsRequest",
    encode(_, writer = binary_1.BinaryWriter.create()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof binary_1.BinaryReader ? input : new binary_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryParamsRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromPartial(_) {
        const message = createBaseQueryParamsRequest();
        return message;
    },
    fromAmino(_) {
        return {};
    },
    toAmino(_) {
        const obj = {};
        return obj;
    },
    fromAminoMsg(object) {
        return exports.QueryParamsRequest.fromAmino(object.value);
    },
    toAminoMsg(message) {
        return {
            type: "osmosis/protorev/query-params-request",
            value: exports.QueryParamsRequest.toAmino(message)
        };
    },
    fromProtoMsg(message) {
        return exports.QueryParamsRequest.decode(message.value);
    },
    toProto(message) {
        return exports.QueryParamsRequest.encode(message).finish();
    },
    toProtoMsg(message) {
        return {
            typeUrl: "/osmosis.protorev.v1beta1.QueryParamsRequest",
            value: exports.QueryParamsRequest.encode(message).finish()
        };
    }
};
function createBaseQueryParamsResponse() {
    return {
        params: params_1.Params.fromPartial({})
    };
}
exports.QueryParamsResponse = {
    typeUrl: "/osmosis.protorev.v1beta1.QueryParamsResponse",
    encode(message, writer = binary_1.BinaryWriter.create()) {
        if (message.params !== undefined) {
            params_1.Params.encode(message.params, writer.uint32(10).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof binary_1.BinaryReader ? input : new binary_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryParamsResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.params = params_1.Params.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromPartial(object) {
        const message = createBaseQueryParamsResponse();
        message.params = object.params !== undefined && object.params !== null ? params_1.Params.fromPartial(object.params) : undefined;
        return message;
    },
    fromAmino(object) {
        return {
            params: object?.params ? params_1.Params.fromAmino(object.params) : undefined
        };
    },
    toAmino(message) {
        const obj = {};
        obj.params = message.params ? params_1.Params.toAmino(message.params) : undefined;
        return obj;
    },
    fromAminoMsg(object) {
        return exports.QueryParamsResponse.fromAmino(object.value);
    },
    toAminoMsg(message) {
        return {
            type: "osmosis/protorev/query-params-response",
            value: exports.QueryParamsResponse.toAmino(message)
        };
    },
    fromProtoMsg(message) {
        return exports.QueryParamsResponse.decode(message.value);
    },
    toProto(message) {
        return exports.QueryParamsResponse.encode(message).finish();
    },
    toProtoMsg(message) {
        return {
            typeUrl: "/osmosis.protorev.v1beta1.QueryParamsResponse",
            value: exports.QueryParamsResponse.encode(message).finish()
        };
    }
};
function createBaseQueryGetProtoRevNumberOfTradesRequest() {
    return {};
}
exports.QueryGetProtoRevNumberOfTradesRequest = {
    typeUrl: "/osmosis.protorev.v1beta1.QueryGetProtoRevNumberOfTradesRequest",
    encode(_, writer = binary_1.BinaryWriter.create()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof binary_1.BinaryReader ? input : new binary_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryGetProtoRevNumberOfTradesRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromPartial(_) {
        const message = createBaseQueryGetProtoRevNumberOfTradesRequest();
        return message;
    },
    fromAmino(_) {
        return {};
    },
    toAmino(_) {
        const obj = {};
        return obj;
    },
    fromAminoMsg(object) {
        return exports.QueryGetProtoRevNumberOfTradesRequest.fromAmino(object.value);
    },
    toAminoMsg(message) {
        return {
            type: "osmosis/protorev/query-get-proto-rev-number-of-trades-request",
            value: exports.QueryGetProtoRevNumberOfTradesRequest.toAmino(message)
        };
    },
    fromProtoMsg(message) {
        return exports.QueryGetProtoRevNumberOfTradesRequest.decode(message.value);
    },
    toProto(message) {
        return exports.QueryGetProtoRevNumberOfTradesRequest.encode(message).finish();
    },
    toProtoMsg(message) {
        return {
            typeUrl: "/osmosis.protorev.v1beta1.QueryGetProtoRevNumberOfTradesRequest",
            value: exports.QueryGetProtoRevNumberOfTradesRequest.encode(message).finish()
        };
    }
};
function createBaseQueryGetProtoRevNumberOfTradesResponse() {
    return {
        numberOfTrades: ""
    };
}
exports.QueryGetProtoRevNumberOfTradesResponse = {
    typeUrl: "/osmosis.protorev.v1beta1.QueryGetProtoRevNumberOfTradesResponse",
    encode(message, writer = binary_1.BinaryWriter.create()) {
        if (message.numberOfTrades !== "") {
            writer.uint32(10).string(message.numberOfTrades);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof binary_1.BinaryReader ? input : new binary_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryGetProtoRevNumberOfTradesResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.numberOfTrades = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromPartial(object) {
        const message = createBaseQueryGetProtoRevNumberOfTradesResponse();
        message.numberOfTrades = object.numberOfTrades ?? "";
        return message;
    },
    fromAmino(object) {
        return {
            numberOfTrades: object.number_of_trades
        };
    },
    toAmino(message) {
        const obj = {};
        obj.number_of_trades = message.numberOfTrades;
        return obj;
    },
    fromAminoMsg(object) {
        return exports.QueryGetProtoRevNumberOfTradesResponse.fromAmino(object.value);
    },
    toAminoMsg(message) {
        return {
            type: "osmosis/protorev/query-get-proto-rev-number-of-trades-response",
            value: exports.QueryGetProtoRevNumberOfTradesResponse.toAmino(message)
        };
    },
    fromProtoMsg(message) {
        return exports.QueryGetProtoRevNumberOfTradesResponse.decode(message.value);
    },
    toProto(message) {
        return exports.QueryGetProtoRevNumberOfTradesResponse.encode(message).finish();
    },
    toProtoMsg(message) {
        return {
            typeUrl: "/osmosis.protorev.v1beta1.QueryGetProtoRevNumberOfTradesResponse",
            value: exports.QueryGetProtoRevNumberOfTradesResponse.encode(message).finish()
        };
    }
};
function createBaseQueryGetProtoRevProfitsByDenomRequest() {
    return {
        denom: ""
    };
}
exports.QueryGetProtoRevProfitsByDenomRequest = {
    typeUrl: "/osmosis.protorev.v1beta1.QueryGetProtoRevProfitsByDenomRequest",
    encode(message, writer = binary_1.BinaryWriter.create()) {
        if (message.denom !== "") {
            writer.uint32(10).string(message.denom);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof binary_1.BinaryReader ? input : new binary_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryGetProtoRevProfitsByDenomRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.denom = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromPartial(object) {
        const message = createBaseQueryGetProtoRevProfitsByDenomRequest();
        message.denom = object.denom ?? "";
        return message;
    },
    fromAmino(object) {
        return {
            denom: object.denom
        };
    },
    toAmino(message) {
        const obj = {};
        obj.denom = message.denom;
        return obj;
    },
    fromAminoMsg(object) {
        return exports.QueryGetProtoRevProfitsByDenomRequest.fromAmino(object.value);
    },
    toAminoMsg(message) {
        return {
            type: "osmosis/protorev/query-get-proto-rev-profits-by-denom-request",
            value: exports.QueryGetProtoRevProfitsByDenomRequest.toAmino(message)
        };
    },
    fromProtoMsg(message) {
        return exports.QueryGetProtoRevProfitsByDenomRequest.decode(message.value);
    },
    toProto(message) {
        return exports.QueryGetProtoRevProfitsByDenomRequest.encode(message).finish();
    },
    toProtoMsg(message) {
        return {
            typeUrl: "/osmosis.protorev.v1beta1.QueryGetProtoRevProfitsByDenomRequest",
            value: exports.QueryGetProtoRevProfitsByDenomRequest.encode(message).finish()
        };
    }
};
function createBaseQueryGetProtoRevProfitsByDenomResponse() {
    return {
        profit: undefined
    };
}
exports.QueryGetProtoRevProfitsByDenomResponse = {
    typeUrl: "/osmosis.protorev.v1beta1.QueryGetProtoRevProfitsByDenomResponse",
    encode(message, writer = binary_1.BinaryWriter.create()) {
        if (message.profit !== undefined) {
            coin_1.Coin.encode(message.profit, writer.uint32(10).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof binary_1.BinaryReader ? input : new binary_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryGetProtoRevProfitsByDenomResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.profit = coin_1.Coin.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromPartial(object) {
        const message = createBaseQueryGetProtoRevProfitsByDenomResponse();
        message.profit = object.profit !== undefined && object.profit !== null ? coin_1.Coin.fromPartial(object.profit) : undefined;
        return message;
    },
    fromAmino(object) {
        return {
            profit: object?.profit ? coin_1.Coin.fromAmino(object.profit) : undefined
        };
    },
    toAmino(message) {
        const obj = {};
        obj.profit = message.profit ? coin_1.Coin.toAmino(message.profit) : undefined;
        return obj;
    },
    fromAminoMsg(object) {
        return exports.QueryGetProtoRevProfitsByDenomResponse.fromAmino(object.value);
    },
    toAminoMsg(message) {
        return {
            type: "osmosis/protorev/query-get-proto-rev-profits-by-denom-response",
            value: exports.QueryGetProtoRevProfitsByDenomResponse.toAmino(message)
        };
    },
    fromProtoMsg(message) {
        return exports.QueryGetProtoRevProfitsByDenomResponse.decode(message.value);
    },
    toProto(message) {
        return exports.QueryGetProtoRevProfitsByDenomResponse.encode(message).finish();
    },
    toProtoMsg(message) {
        return {
            typeUrl: "/osmosis.protorev.v1beta1.QueryGetProtoRevProfitsByDenomResponse",
            value: exports.QueryGetProtoRevProfitsByDenomResponse.encode(message).finish()
        };
    }
};
function createBaseQueryGetProtoRevAllProfitsRequest() {
    return {};
}
exports.QueryGetProtoRevAllProfitsRequest = {
    typeUrl: "/osmosis.protorev.v1beta1.QueryGetProtoRevAllProfitsRequest",
    encode(_, writer = binary_1.BinaryWriter.create()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof binary_1.BinaryReader ? input : new binary_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryGetProtoRevAllProfitsRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromPartial(_) {
        const message = createBaseQueryGetProtoRevAllProfitsRequest();
        return message;
    },
    fromAmino(_) {
        return {};
    },
    toAmino(_) {
        const obj = {};
        return obj;
    },
    fromAminoMsg(object) {
        return exports.QueryGetProtoRevAllProfitsRequest.fromAmino(object.value);
    },
    toAminoMsg(message) {
        return {
            type: "osmosis/protorev/query-get-proto-rev-all-profits-request",
            value: exports.QueryGetProtoRevAllProfitsRequest.toAmino(message)
        };
    },
    fromProtoMsg(message) {
        return exports.QueryGetProtoRevAllProfitsRequest.decode(message.value);
    },
    toProto(message) {
        return exports.QueryGetProtoRevAllProfitsRequest.encode(message).finish();
    },
    toProtoMsg(message) {
        return {
            typeUrl: "/osmosis.protorev.v1beta1.QueryGetProtoRevAllProfitsRequest",
            value: exports.QueryGetProtoRevAllProfitsRequest.encode(message).finish()
        };
    }
};
function createBaseQueryGetProtoRevAllProfitsResponse() {
    return {
        profits: []
    };
}
exports.QueryGetProtoRevAllProfitsResponse = {
    typeUrl: "/osmosis.protorev.v1beta1.QueryGetProtoRevAllProfitsResponse",
    encode(message, writer = binary_1.BinaryWriter.create()) {
        for (const v of message.profits) {
            coin_1.Coin.encode(v, writer.uint32(10).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof binary_1.BinaryReader ? input : new binary_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryGetProtoRevAllProfitsResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.profits.push(coin_1.Coin.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromPartial(object) {
        const message = createBaseQueryGetProtoRevAllProfitsResponse();
        message.profits = object.profits?.map(e => coin_1.Coin.fromPartial(e)) || [];
        return message;
    },
    fromAmino(object) {
        return {
            profits: Array.isArray(object?.profits) ? object.profits.map((e) => coin_1.Coin.fromAmino(e)) : []
        };
    },
    toAmino(message) {
        const obj = {};
        if (message.profits) {
            obj.profits = message.profits.map(e => e ? coin_1.Coin.toAmino(e) : undefined);
        }
        else {
            obj.profits = [];
        }
        return obj;
    },
    fromAminoMsg(object) {
        return exports.QueryGetProtoRevAllProfitsResponse.fromAmino(object.value);
    },
    toAminoMsg(message) {
        return {
            type: "osmosis/protorev/query-get-proto-rev-all-profits-response",
            value: exports.QueryGetProtoRevAllProfitsResponse.toAmino(message)
        };
    },
    fromProtoMsg(message) {
        return exports.QueryGetProtoRevAllProfitsResponse.decode(message.value);
    },
    toProto(message) {
        return exports.QueryGetProtoRevAllProfitsResponse.encode(message).finish();
    },
    toProtoMsg(message) {
        return {
            typeUrl: "/osmosis.protorev.v1beta1.QueryGetProtoRevAllProfitsResponse",
            value: exports.QueryGetProtoRevAllProfitsResponse.encode(message).finish()
        };
    }
};
function createBaseQueryGetProtoRevStatisticsByRouteRequest() {
    return {
        route: []
    };
}
exports.QueryGetProtoRevStatisticsByRouteRequest = {
    typeUrl: "/osmosis.protorev.v1beta1.QueryGetProtoRevStatisticsByRouteRequest",
    encode(message, writer = binary_1.BinaryWriter.create()) {
        writer.uint32(10).fork();
        for (const v of message.route) {
            writer.uint64(v);
        }
        writer.ldelim();
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof binary_1.BinaryReader ? input : new binary_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryGetProtoRevStatisticsByRouteRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if ((tag & 7) === 2) {
                        const end2 = reader.uint32() + reader.pos;
                        while (reader.pos < end2) {
                            message.route.push(reader.uint64());
                        }
                    }
                    else {
                        message.route.push(reader.uint64());
                    }
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromPartial(object) {
        const message = createBaseQueryGetProtoRevStatisticsByRouteRequest();
        message.route = object.route?.map(e => BigInt(e.toString())) || [];
        return message;
    },
    fromAmino(object) {
        return {
            route: Array.isArray(object?.route) ? object.route.map((e) => BigInt(e)) : []
        };
    },
    toAmino(message) {
        const obj = {};
        if (message.route) {
            obj.route = message.route.map(e => e.toString());
        }
        else {
            obj.route = [];
        }
        return obj;
    },
    fromAminoMsg(object) {
        return exports.QueryGetProtoRevStatisticsByRouteRequest.fromAmino(object.value);
    },
    toAminoMsg(message) {
        return {
            type: "osmosis/protorev/query-get-proto-rev-statistics-by-route-request",
            value: exports.QueryGetProtoRevStatisticsByRouteRequest.toAmino(message)
        };
    },
    fromProtoMsg(message) {
        return exports.QueryGetProtoRevStatisticsByRouteRequest.decode(message.value);
    },
    toProto(message) {
        return exports.QueryGetProtoRevStatisticsByRouteRequest.encode(message).finish();
    },
    toProtoMsg(message) {
        return {
            typeUrl: "/osmosis.protorev.v1beta1.QueryGetProtoRevStatisticsByRouteRequest",
            value: exports.QueryGetProtoRevStatisticsByRouteRequest.encode(message).finish()
        };
    }
};
function createBaseQueryGetProtoRevStatisticsByRouteResponse() {
    return {
        statistics: protorev_1.RouteStatistics.fromPartial({})
    };
}
exports.QueryGetProtoRevStatisticsByRouteResponse = {
    typeUrl: "/osmosis.protorev.v1beta1.QueryGetProtoRevStatisticsByRouteResponse",
    encode(message, writer = binary_1.BinaryWriter.create()) {
        if (message.statistics !== undefined) {
            protorev_1.RouteStatistics.encode(message.statistics, writer.uint32(10).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof binary_1.BinaryReader ? input : new binary_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryGetProtoRevStatisticsByRouteResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.statistics = protorev_1.RouteStatistics.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromPartial(object) {
        const message = createBaseQueryGetProtoRevStatisticsByRouteResponse();
        message.statistics = object.statistics !== undefined && object.statistics !== null ? protorev_1.RouteStatistics.fromPartial(object.statistics) : undefined;
        return message;
    },
    fromAmino(object) {
        return {
            statistics: object?.statistics ? protorev_1.RouteStatistics.fromAmino(object.statistics) : undefined
        };
    },
    toAmino(message) {
        const obj = {};
        obj.statistics = message.statistics ? protorev_1.RouteStatistics.toAmino(message.statistics) : undefined;
        return obj;
    },
    fromAminoMsg(object) {
        return exports.QueryGetProtoRevStatisticsByRouteResponse.fromAmino(object.value);
    },
    toAminoMsg(message) {
        return {
            type: "osmosis/protorev/query-get-proto-rev-statistics-by-route-response",
            value: exports.QueryGetProtoRevStatisticsByRouteResponse.toAmino(message)
        };
    },
    fromProtoMsg(message) {
        return exports.QueryGetProtoRevStatisticsByRouteResponse.decode(message.value);
    },
    toProto(message) {
        return exports.QueryGetProtoRevStatisticsByRouteResponse.encode(message).finish();
    },
    toProtoMsg(message) {
        return {
            typeUrl: "/osmosis.protorev.v1beta1.QueryGetProtoRevStatisticsByRouteResponse",
            value: exports.QueryGetProtoRevStatisticsByRouteResponse.encode(message).finish()
        };
    }
};
function createBaseQueryGetProtoRevAllRouteStatisticsRequest() {
    return {};
}
exports.QueryGetProtoRevAllRouteStatisticsRequest = {
    typeUrl: "/osmosis.protorev.v1beta1.QueryGetProtoRevAllRouteStatisticsRequest",
    encode(_, writer = binary_1.BinaryWriter.create()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof binary_1.BinaryReader ? input : new binary_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryGetProtoRevAllRouteStatisticsRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromPartial(_) {
        const message = createBaseQueryGetProtoRevAllRouteStatisticsRequest();
        return message;
    },
    fromAmino(_) {
        return {};
    },
    toAmino(_) {
        const obj = {};
        return obj;
    },
    fromAminoMsg(object) {
        return exports.QueryGetProtoRevAllRouteStatisticsRequest.fromAmino(object.value);
    },
    toAminoMsg(message) {
        return {
            type: "osmosis/protorev/query-get-proto-rev-all-route-statistics-request",
            value: exports.QueryGetProtoRevAllRouteStatisticsRequest.toAmino(message)
        };
    },
    fromProtoMsg(message) {
        return exports.QueryGetProtoRevAllRouteStatisticsRequest.decode(message.value);
    },
    toProto(message) {
        return exports.QueryGetProtoRevAllRouteStatisticsRequest.encode(message).finish();
    },
    toProtoMsg(message) {
        return {
            typeUrl: "/osmosis.protorev.v1beta1.QueryGetProtoRevAllRouteStatisticsRequest",
            value: exports.QueryGetProtoRevAllRouteStatisticsRequest.encode(message).finish()
        };
    }
};
function createBaseQueryGetProtoRevAllRouteStatisticsResponse() {
    return {
        statistics: []
    };
}
exports.QueryGetProtoRevAllRouteStatisticsResponse = {
    typeUrl: "/osmosis.protorev.v1beta1.QueryGetProtoRevAllRouteStatisticsResponse",
    encode(message, writer = binary_1.BinaryWriter.create()) {
        for (const v of message.statistics) {
            protorev_1.RouteStatistics.encode(v, writer.uint32(10).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof binary_1.BinaryReader ? input : new binary_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryGetProtoRevAllRouteStatisticsResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.statistics.push(protorev_1.RouteStatistics.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromPartial(object) {
        const message = createBaseQueryGetProtoRevAllRouteStatisticsResponse();
        message.statistics = object.statistics?.map(e => protorev_1.RouteStatistics.fromPartial(e)) || [];
        return message;
    },
    fromAmino(object) {
        return {
            statistics: Array.isArray(object?.statistics) ? object.statistics.map((e) => protorev_1.RouteStatistics.fromAmino(e)) : []
        };
    },
    toAmino(message) {
        const obj = {};
        if (message.statistics) {
            obj.statistics = message.statistics.map(e => e ? protorev_1.RouteStatistics.toAmino(e) : undefined);
        }
        else {
            obj.statistics = [];
        }
        return obj;
    },
    fromAminoMsg(object) {
        return exports.QueryGetProtoRevAllRouteStatisticsResponse.fromAmino(object.value);
    },
    toAminoMsg(message) {
        return {
            type: "osmosis/protorev/query-get-proto-rev-all-route-statistics-response",
            value: exports.QueryGetProtoRevAllRouteStatisticsResponse.toAmino(message)
        };
    },
    fromProtoMsg(message) {
        return exports.QueryGetProtoRevAllRouteStatisticsResponse.decode(message.value);
    },
    toProto(message) {
        return exports.QueryGetProtoRevAllRouteStatisticsResponse.encode(message).finish();
    },
    toProtoMsg(message) {
        return {
            typeUrl: "/osmosis.protorev.v1beta1.QueryGetProtoRevAllRouteStatisticsResponse",
            value: exports.QueryGetProtoRevAllRouteStatisticsResponse.encode(message).finish()
        };
    }
};
function createBaseQueryGetProtoRevTokenPairArbRoutesRequest() {
    return {};
}
exports.QueryGetProtoRevTokenPairArbRoutesRequest = {
    typeUrl: "/osmosis.protorev.v1beta1.QueryGetProtoRevTokenPairArbRoutesRequest",
    encode(_, writer = binary_1.BinaryWriter.create()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof binary_1.BinaryReader ? input : new binary_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryGetProtoRevTokenPairArbRoutesRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromPartial(_) {
        const message = createBaseQueryGetProtoRevTokenPairArbRoutesRequest();
        return message;
    },
    fromAmino(_) {
        return {};
    },
    toAmino(_) {
        const obj = {};
        return obj;
    },
    fromAminoMsg(object) {
        return exports.QueryGetProtoRevTokenPairArbRoutesRequest.fromAmino(object.value);
    },
    toAminoMsg(message) {
        return {
            type: "osmosis/protorev/query-get-proto-rev-token-pair-arb-routes-request",
            value: exports.QueryGetProtoRevTokenPairArbRoutesRequest.toAmino(message)
        };
    },
    fromProtoMsg(message) {
        return exports.QueryGetProtoRevTokenPairArbRoutesRequest.decode(message.value);
    },
    toProto(message) {
        return exports.QueryGetProtoRevTokenPairArbRoutesRequest.encode(message).finish();
    },
    toProtoMsg(message) {
        return {
            typeUrl: "/osmosis.protorev.v1beta1.QueryGetProtoRevTokenPairArbRoutesRequest",
            value: exports.QueryGetProtoRevTokenPairArbRoutesRequest.encode(message).finish()
        };
    }
};
function createBaseQueryGetProtoRevTokenPairArbRoutesResponse() {
    return {
        routes: []
    };
}
exports.QueryGetProtoRevTokenPairArbRoutesResponse = {
    typeUrl: "/osmosis.protorev.v1beta1.QueryGetProtoRevTokenPairArbRoutesResponse",
    encode(message, writer = binary_1.BinaryWriter.create()) {
        for (const v of message.routes) {
            protorev_1.TokenPairArbRoutes.encode(v, writer.uint32(10).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof binary_1.BinaryReader ? input : new binary_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryGetProtoRevTokenPairArbRoutesResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.routes.push(protorev_1.TokenPairArbRoutes.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromPartial(object) {
        const message = createBaseQueryGetProtoRevTokenPairArbRoutesResponse();
        message.routes = object.routes?.map(e => protorev_1.TokenPairArbRoutes.fromPartial(e)) || [];
        return message;
    },
    fromAmino(object) {
        return {
            routes: Array.isArray(object?.routes) ? object.routes.map((e) => protorev_1.TokenPairArbRoutes.fromAmino(e)) : []
        };
    },
    toAmino(message) {
        const obj = {};
        if (message.routes) {
            obj.routes = message.routes.map(e => e ? protorev_1.TokenPairArbRoutes.toAmino(e) : undefined);
        }
        else {
            obj.routes = [];
        }
        return obj;
    },
    fromAminoMsg(object) {
        return exports.QueryGetProtoRevTokenPairArbRoutesResponse.fromAmino(object.value);
    },
    toAminoMsg(message) {
        return {
            type: "osmosis/protorev/query-get-proto-rev-token-pair-arb-routes-response",
            value: exports.QueryGetProtoRevTokenPairArbRoutesResponse.toAmino(message)
        };
    },
    fromProtoMsg(message) {
        return exports.QueryGetProtoRevTokenPairArbRoutesResponse.decode(message.value);
    },
    toProto(message) {
        return exports.QueryGetProtoRevTokenPairArbRoutesResponse.encode(message).finish();
    },
    toProtoMsg(message) {
        return {
            typeUrl: "/osmosis.protorev.v1beta1.QueryGetProtoRevTokenPairArbRoutesResponse",
            value: exports.QueryGetProtoRevTokenPairArbRoutesResponse.encode(message).finish()
        };
    }
};
function createBaseQueryGetProtoRevAdminAccountRequest() {
    return {};
}
exports.QueryGetProtoRevAdminAccountRequest = {
    typeUrl: "/osmosis.protorev.v1beta1.QueryGetProtoRevAdminAccountRequest",
    encode(_, writer = binary_1.BinaryWriter.create()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof binary_1.BinaryReader ? input : new binary_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryGetProtoRevAdminAccountRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromPartial(_) {
        const message = createBaseQueryGetProtoRevAdminAccountRequest();
        return message;
    },
    fromAmino(_) {
        return {};
    },
    toAmino(_) {
        const obj = {};
        return obj;
    },
    fromAminoMsg(object) {
        return exports.QueryGetProtoRevAdminAccountRequest.fromAmino(object.value);
    },
    toAminoMsg(message) {
        return {
            type: "osmosis/protorev/query-get-proto-rev-admin-account-request",
            value: exports.QueryGetProtoRevAdminAccountRequest.toAmino(message)
        };
    },
    fromProtoMsg(message) {
        return exports.QueryGetProtoRevAdminAccountRequest.decode(message.value);
    },
    toProto(message) {
        return exports.QueryGetProtoRevAdminAccountRequest.encode(message).finish();
    },
    toProtoMsg(message) {
        return {
            typeUrl: "/osmosis.protorev.v1beta1.QueryGetProtoRevAdminAccountRequest",
            value: exports.QueryGetProtoRevAdminAccountRequest.encode(message).finish()
        };
    }
};
function createBaseQueryGetProtoRevAdminAccountResponse() {
    return {
        adminAccount: ""
    };
}
exports.QueryGetProtoRevAdminAccountResponse = {
    typeUrl: "/osmosis.protorev.v1beta1.QueryGetProtoRevAdminAccountResponse",
    encode(message, writer = binary_1.BinaryWriter.create()) {
        if (message.adminAccount !== "") {
            writer.uint32(10).string(message.adminAccount);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof binary_1.BinaryReader ? input : new binary_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryGetProtoRevAdminAccountResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.adminAccount = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromPartial(object) {
        const message = createBaseQueryGetProtoRevAdminAccountResponse();
        message.adminAccount = object.adminAccount ?? "";
        return message;
    },
    fromAmino(object) {
        return {
            adminAccount: object.admin_account
        };
    },
    toAmino(message) {
        const obj = {};
        obj.admin_account = message.adminAccount;
        return obj;
    },
    fromAminoMsg(object) {
        return exports.QueryGetProtoRevAdminAccountResponse.fromAmino(object.value);
    },
    toAminoMsg(message) {
        return {
            type: "osmosis/protorev/query-get-proto-rev-admin-account-response",
            value: exports.QueryGetProtoRevAdminAccountResponse.toAmino(message)
        };
    },
    fromProtoMsg(message) {
        return exports.QueryGetProtoRevAdminAccountResponse.decode(message.value);
    },
    toProto(message) {
        return exports.QueryGetProtoRevAdminAccountResponse.encode(message).finish();
    },
    toProtoMsg(message) {
        return {
            typeUrl: "/osmosis.protorev.v1beta1.QueryGetProtoRevAdminAccountResponse",
            value: exports.QueryGetProtoRevAdminAccountResponse.encode(message).finish()
        };
    }
};
function createBaseQueryGetProtoRevDeveloperAccountRequest() {
    return {};
}
exports.QueryGetProtoRevDeveloperAccountRequest = {
    typeUrl: "/osmosis.protorev.v1beta1.QueryGetProtoRevDeveloperAccountRequest",
    encode(_, writer = binary_1.BinaryWriter.create()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof binary_1.BinaryReader ? input : new binary_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryGetProtoRevDeveloperAccountRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromPartial(_) {
        const message = createBaseQueryGetProtoRevDeveloperAccountRequest();
        return message;
    },
    fromAmino(_) {
        return {};
    },
    toAmino(_) {
        const obj = {};
        return obj;
    },
    fromAminoMsg(object) {
        return exports.QueryGetProtoRevDeveloperAccountRequest.fromAmino(object.value);
    },
    toAminoMsg(message) {
        return {
            type: "osmosis/protorev/query-get-proto-rev-developer-account-request",
            value: exports.QueryGetProtoRevDeveloperAccountRequest.toAmino(message)
        };
    },
    fromProtoMsg(message) {
        return exports.QueryGetProtoRevDeveloperAccountRequest.decode(message.value);
    },
    toProto(message) {
        return exports.QueryGetProtoRevDeveloperAccountRequest.encode(message).finish();
    },
    toProtoMsg(message) {
        return {
            typeUrl: "/osmosis.protorev.v1beta1.QueryGetProtoRevDeveloperAccountRequest",
            value: exports.QueryGetProtoRevDeveloperAccountRequest.encode(message).finish()
        };
    }
};
function createBaseQueryGetProtoRevDeveloperAccountResponse() {
    return {
        developerAccount: ""
    };
}
exports.QueryGetProtoRevDeveloperAccountResponse = {
    typeUrl: "/osmosis.protorev.v1beta1.QueryGetProtoRevDeveloperAccountResponse",
    encode(message, writer = binary_1.BinaryWriter.create()) {
        if (message.developerAccount !== "") {
            writer.uint32(10).string(message.developerAccount);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof binary_1.BinaryReader ? input : new binary_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryGetProtoRevDeveloperAccountResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.developerAccount = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromPartial(object) {
        const message = createBaseQueryGetProtoRevDeveloperAccountResponse();
        message.developerAccount = object.developerAccount ?? "";
        return message;
    },
    fromAmino(object) {
        return {
            developerAccount: object.developer_account
        };
    },
    toAmino(message) {
        const obj = {};
        obj.developer_account = message.developerAccount;
        return obj;
    },
    fromAminoMsg(object) {
        return exports.QueryGetProtoRevDeveloperAccountResponse.fromAmino(object.value);
    },
    toAminoMsg(message) {
        return {
            type: "osmosis/protorev/query-get-proto-rev-developer-account-response",
            value: exports.QueryGetProtoRevDeveloperAccountResponse.toAmino(message)
        };
    },
    fromProtoMsg(message) {
        return exports.QueryGetProtoRevDeveloperAccountResponse.decode(message.value);
    },
    toProto(message) {
        return exports.QueryGetProtoRevDeveloperAccountResponse.encode(message).finish();
    },
    toProtoMsg(message) {
        return {
            typeUrl: "/osmosis.protorev.v1beta1.QueryGetProtoRevDeveloperAccountResponse",
            value: exports.QueryGetProtoRevDeveloperAccountResponse.encode(message).finish()
        };
    }
};
function createBaseQueryGetProtoRevPoolWeightsRequest() {
    return {};
}
exports.QueryGetProtoRevPoolWeightsRequest = {
    typeUrl: "/osmosis.protorev.v1beta1.QueryGetProtoRevPoolWeightsRequest",
    encode(_, writer = binary_1.BinaryWriter.create()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof binary_1.BinaryReader ? input : new binary_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryGetProtoRevPoolWeightsRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromPartial(_) {
        const message = createBaseQueryGetProtoRevPoolWeightsRequest();
        return message;
    },
    fromAmino(_) {
        return {};
    },
    toAmino(_) {
        const obj = {};
        return obj;
    },
    fromAminoMsg(object) {
        return exports.QueryGetProtoRevPoolWeightsRequest.fromAmino(object.value);
    },
    toAminoMsg(message) {
        return {
            type: "osmosis/protorev/query-get-proto-rev-pool-weights-request",
            value: exports.QueryGetProtoRevPoolWeightsRequest.toAmino(message)
        };
    },
    fromProtoMsg(message) {
        return exports.QueryGetProtoRevPoolWeightsRequest.decode(message.value);
    },
    toProto(message) {
        return exports.QueryGetProtoRevPoolWeightsRequest.encode(message).finish();
    },
    toProtoMsg(message) {
        return {
            typeUrl: "/osmosis.protorev.v1beta1.QueryGetProtoRevPoolWeightsRequest",
            value: exports.QueryGetProtoRevPoolWeightsRequest.encode(message).finish()
        };
    }
};
function createBaseQueryGetProtoRevPoolWeightsResponse() {
    return {
        poolWeights: protorev_1.PoolWeights.fromPartial({})
    };
}
exports.QueryGetProtoRevPoolWeightsResponse = {
    typeUrl: "/osmosis.protorev.v1beta1.QueryGetProtoRevPoolWeightsResponse",
    encode(message, writer = binary_1.BinaryWriter.create()) {
        if (message.poolWeights !== undefined) {
            protorev_1.PoolWeights.encode(message.poolWeights, writer.uint32(10).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof binary_1.BinaryReader ? input : new binary_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryGetProtoRevPoolWeightsResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.poolWeights = protorev_1.PoolWeights.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromPartial(object) {
        const message = createBaseQueryGetProtoRevPoolWeightsResponse();
        message.poolWeights = object.poolWeights !== undefined && object.poolWeights !== null ? protorev_1.PoolWeights.fromPartial(object.poolWeights) : undefined;
        return message;
    },
    fromAmino(object) {
        return {
            poolWeights: object?.pool_weights ? protorev_1.PoolWeights.fromAmino(object.pool_weights) : undefined
        };
    },
    toAmino(message) {
        const obj = {};
        obj.pool_weights = message.poolWeights ? protorev_1.PoolWeights.toAmino(message.poolWeights) : undefined;
        return obj;
    },
    fromAminoMsg(object) {
        return exports.QueryGetProtoRevPoolWeightsResponse.fromAmino(object.value);
    },
    toAminoMsg(message) {
        return {
            type: "osmosis/protorev/query-get-proto-rev-pool-weights-response",
            value: exports.QueryGetProtoRevPoolWeightsResponse.toAmino(message)
        };
    },
    fromProtoMsg(message) {
        return exports.QueryGetProtoRevPoolWeightsResponse.decode(message.value);
    },
    toProto(message) {
        return exports.QueryGetProtoRevPoolWeightsResponse.encode(message).finish();
    },
    toProtoMsg(message) {
        return {
            typeUrl: "/osmosis.protorev.v1beta1.QueryGetProtoRevPoolWeightsResponse",
            value: exports.QueryGetProtoRevPoolWeightsResponse.encode(message).finish()
        };
    }
};
function createBaseQueryGetProtoRevMaxPoolPointsPerBlockRequest() {
    return {};
}
exports.QueryGetProtoRevMaxPoolPointsPerBlockRequest = {
    typeUrl: "/osmosis.protorev.v1beta1.QueryGetProtoRevMaxPoolPointsPerBlockRequest",
    encode(_, writer = binary_1.BinaryWriter.create()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof binary_1.BinaryReader ? input : new binary_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryGetProtoRevMaxPoolPointsPerBlockRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromPartial(_) {
        const message = createBaseQueryGetProtoRevMaxPoolPointsPerBlockRequest();
        return message;
    },
    fromAmino(_) {
        return {};
    },
    toAmino(_) {
        const obj = {};
        return obj;
    },
    fromAminoMsg(object) {
        return exports.QueryGetProtoRevMaxPoolPointsPerBlockRequest.fromAmino(object.value);
    },
    toAminoMsg(message) {
        return {
            type: "osmosis/protorev/query-get-proto-rev-max-pool-points-per-block-request",
            value: exports.QueryGetProtoRevMaxPoolPointsPerBlockRequest.toAmino(message)
        };
    },
    fromProtoMsg(message) {
        return exports.QueryGetProtoRevMaxPoolPointsPerBlockRequest.decode(message.value);
    },
    toProto(message) {
        return exports.QueryGetProtoRevMaxPoolPointsPerBlockRequest.encode(message).finish();
    },
    toProtoMsg(message) {
        return {
            typeUrl: "/osmosis.protorev.v1beta1.QueryGetProtoRevMaxPoolPointsPerBlockRequest",
            value: exports.QueryGetProtoRevMaxPoolPointsPerBlockRequest.encode(message).finish()
        };
    }
};
function createBaseQueryGetProtoRevMaxPoolPointsPerBlockResponse() {
    return {
        maxPoolPointsPerBlock: BigInt(0)
    };
}
exports.QueryGetProtoRevMaxPoolPointsPerBlockResponse = {
    typeUrl: "/osmosis.protorev.v1beta1.QueryGetProtoRevMaxPoolPointsPerBlockResponse",
    encode(message, writer = binary_1.BinaryWriter.create()) {
        if (message.maxPoolPointsPerBlock !== BigInt(0)) {
            writer.uint32(8).uint64(message.maxPoolPointsPerBlock);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof binary_1.BinaryReader ? input : new binary_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryGetProtoRevMaxPoolPointsPerBlockResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.maxPoolPointsPerBlock = reader.uint64();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromPartial(object) {
        const message = createBaseQueryGetProtoRevMaxPoolPointsPerBlockResponse();
        message.maxPoolPointsPerBlock = object.maxPoolPointsPerBlock !== undefined && object.maxPoolPointsPerBlock !== null ? BigInt(object.maxPoolPointsPerBlock.toString()) : BigInt(0);
        return message;
    },
    fromAmino(object) {
        return {
            maxPoolPointsPerBlock: BigInt(object.max_pool_points_per_block)
        };
    },
    toAmino(message) {
        const obj = {};
        obj.max_pool_points_per_block = message.maxPoolPointsPerBlock ? message.maxPoolPointsPerBlock.toString() : undefined;
        return obj;
    },
    fromAminoMsg(object) {
        return exports.QueryGetProtoRevMaxPoolPointsPerBlockResponse.fromAmino(object.value);
    },
    toAminoMsg(message) {
        return {
            type: "osmosis/protorev/query-get-proto-rev-max-pool-points-per-block-response",
            value: exports.QueryGetProtoRevMaxPoolPointsPerBlockResponse.toAmino(message)
        };
    },
    fromProtoMsg(message) {
        return exports.QueryGetProtoRevMaxPoolPointsPerBlockResponse.decode(message.value);
    },
    toProto(message) {
        return exports.QueryGetProtoRevMaxPoolPointsPerBlockResponse.encode(message).finish();
    },
    toProtoMsg(message) {
        return {
            typeUrl: "/osmosis.protorev.v1beta1.QueryGetProtoRevMaxPoolPointsPerBlockResponse",
            value: exports.QueryGetProtoRevMaxPoolPointsPerBlockResponse.encode(message).finish()
        };
    }
};
function createBaseQueryGetProtoRevMaxPoolPointsPerTxRequest() {
    return {};
}
exports.QueryGetProtoRevMaxPoolPointsPerTxRequest = {
    typeUrl: "/osmosis.protorev.v1beta1.QueryGetProtoRevMaxPoolPointsPerTxRequest",
    encode(_, writer = binary_1.BinaryWriter.create()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof binary_1.BinaryReader ? input : new binary_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryGetProtoRevMaxPoolPointsPerTxRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromPartial(_) {
        const message = createBaseQueryGetProtoRevMaxPoolPointsPerTxRequest();
        return message;
    },
    fromAmino(_) {
        return {};
    },
    toAmino(_) {
        const obj = {};
        return obj;
    },
    fromAminoMsg(object) {
        return exports.QueryGetProtoRevMaxPoolPointsPerTxRequest.fromAmino(object.value);
    },
    toAminoMsg(message) {
        return {
            type: "osmosis/protorev/query-get-proto-rev-max-pool-points-per-tx-request",
            value: exports.QueryGetProtoRevMaxPoolPointsPerTxRequest.toAmino(message)
        };
    },
    fromProtoMsg(message) {
        return exports.QueryGetProtoRevMaxPoolPointsPerTxRequest.decode(message.value);
    },
    toProto(message) {
        return exports.QueryGetProtoRevMaxPoolPointsPerTxRequest.encode(message).finish();
    },
    toProtoMsg(message) {
        return {
            typeUrl: "/osmosis.protorev.v1beta1.QueryGetProtoRevMaxPoolPointsPerTxRequest",
            value: exports.QueryGetProtoRevMaxPoolPointsPerTxRequest.encode(message).finish()
        };
    }
};
function createBaseQueryGetProtoRevMaxPoolPointsPerTxResponse() {
    return {
        maxPoolPointsPerTx: BigInt(0)
    };
}
exports.QueryGetProtoRevMaxPoolPointsPerTxResponse = {
    typeUrl: "/osmosis.protorev.v1beta1.QueryGetProtoRevMaxPoolPointsPerTxResponse",
    encode(message, writer = binary_1.BinaryWriter.create()) {
        if (message.maxPoolPointsPerTx !== BigInt(0)) {
            writer.uint32(8).uint64(message.maxPoolPointsPerTx);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof binary_1.BinaryReader ? input : new binary_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryGetProtoRevMaxPoolPointsPerTxResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.maxPoolPointsPerTx = reader.uint64();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromPartial(object) {
        const message = createBaseQueryGetProtoRevMaxPoolPointsPerTxResponse();
        message.maxPoolPointsPerTx = object.maxPoolPointsPerTx !== undefined && object.maxPoolPointsPerTx !== null ? BigInt(object.maxPoolPointsPerTx.toString()) : BigInt(0);
        return message;
    },
    fromAmino(object) {
        return {
            maxPoolPointsPerTx: BigInt(object.max_pool_points_per_tx)
        };
    },
    toAmino(message) {
        const obj = {};
        obj.max_pool_points_per_tx = message.maxPoolPointsPerTx ? message.maxPoolPointsPerTx.toString() : undefined;
        return obj;
    },
    fromAminoMsg(object) {
        return exports.QueryGetProtoRevMaxPoolPointsPerTxResponse.fromAmino(object.value);
    },
    toAminoMsg(message) {
        return {
            type: "osmosis/protorev/query-get-proto-rev-max-pool-points-per-tx-response",
            value: exports.QueryGetProtoRevMaxPoolPointsPerTxResponse.toAmino(message)
        };
    },
    fromProtoMsg(message) {
        return exports.QueryGetProtoRevMaxPoolPointsPerTxResponse.decode(message.value);
    },
    toProto(message) {
        return exports.QueryGetProtoRevMaxPoolPointsPerTxResponse.encode(message).finish();
    },
    toProtoMsg(message) {
        return {
            typeUrl: "/osmosis.protorev.v1beta1.QueryGetProtoRevMaxPoolPointsPerTxResponse",
            value: exports.QueryGetProtoRevMaxPoolPointsPerTxResponse.encode(message).finish()
        };
    }
};
function createBaseQueryGetProtoRevBaseDenomsRequest() {
    return {};
}
exports.QueryGetProtoRevBaseDenomsRequest = {
    typeUrl: "/osmosis.protorev.v1beta1.QueryGetProtoRevBaseDenomsRequest",
    encode(_, writer = binary_1.BinaryWriter.create()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof binary_1.BinaryReader ? input : new binary_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryGetProtoRevBaseDenomsRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromPartial(_) {
        const message = createBaseQueryGetProtoRevBaseDenomsRequest();
        return message;
    },
    fromAmino(_) {
        return {};
    },
    toAmino(_) {
        const obj = {};
        return obj;
    },
    fromAminoMsg(object) {
        return exports.QueryGetProtoRevBaseDenomsRequest.fromAmino(object.value);
    },
    toAminoMsg(message) {
        return {
            type: "osmosis/protorev/query-get-proto-rev-base-denoms-request",
            value: exports.QueryGetProtoRevBaseDenomsRequest.toAmino(message)
        };
    },
    fromProtoMsg(message) {
        return exports.QueryGetProtoRevBaseDenomsRequest.decode(message.value);
    },
    toProto(message) {
        return exports.QueryGetProtoRevBaseDenomsRequest.encode(message).finish();
    },
    toProtoMsg(message) {
        return {
            typeUrl: "/osmosis.protorev.v1beta1.QueryGetProtoRevBaseDenomsRequest",
            value: exports.QueryGetProtoRevBaseDenomsRequest.encode(message).finish()
        };
    }
};
function createBaseQueryGetProtoRevBaseDenomsResponse() {
    return {
        baseDenoms: []
    };
}
exports.QueryGetProtoRevBaseDenomsResponse = {
    typeUrl: "/osmosis.protorev.v1beta1.QueryGetProtoRevBaseDenomsResponse",
    encode(message, writer = binary_1.BinaryWriter.create()) {
        for (const v of message.baseDenoms) {
            protorev_1.BaseDenom.encode(v, writer.uint32(10).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof binary_1.BinaryReader ? input : new binary_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryGetProtoRevBaseDenomsResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.baseDenoms.push(protorev_1.BaseDenom.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromPartial(object) {
        const message = createBaseQueryGetProtoRevBaseDenomsResponse();
        message.baseDenoms = object.baseDenoms?.map(e => protorev_1.BaseDenom.fromPartial(e)) || [];
        return message;
    },
    fromAmino(object) {
        return {
            baseDenoms: Array.isArray(object?.base_denoms) ? object.base_denoms.map((e) => protorev_1.BaseDenom.fromAmino(e)) : []
        };
    },
    toAmino(message) {
        const obj = {};
        if (message.baseDenoms) {
            obj.base_denoms = message.baseDenoms.map(e => e ? protorev_1.BaseDenom.toAmino(e) : undefined);
        }
        else {
            obj.base_denoms = [];
        }
        return obj;
    },
    fromAminoMsg(object) {
        return exports.QueryGetProtoRevBaseDenomsResponse.fromAmino(object.value);
    },
    toAminoMsg(message) {
        return {
            type: "osmosis/protorev/query-get-proto-rev-base-denoms-response",
            value: exports.QueryGetProtoRevBaseDenomsResponse.toAmino(message)
        };
    },
    fromProtoMsg(message) {
        return exports.QueryGetProtoRevBaseDenomsResponse.decode(message.value);
    },
    toProto(message) {
        return exports.QueryGetProtoRevBaseDenomsResponse.encode(message).finish();
    },
    toProtoMsg(message) {
        return {
            typeUrl: "/osmosis.protorev.v1beta1.QueryGetProtoRevBaseDenomsResponse",
            value: exports.QueryGetProtoRevBaseDenomsResponse.encode(message).finish()
        };
    }
};
function createBaseQueryGetProtoRevEnabledRequest() {
    return {};
}
exports.QueryGetProtoRevEnabledRequest = {
    typeUrl: "/osmosis.protorev.v1beta1.QueryGetProtoRevEnabledRequest",
    encode(_, writer = binary_1.BinaryWriter.create()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof binary_1.BinaryReader ? input : new binary_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryGetProtoRevEnabledRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromPartial(_) {
        const message = createBaseQueryGetProtoRevEnabledRequest();
        return message;
    },
    fromAmino(_) {
        return {};
    },
    toAmino(_) {
        const obj = {};
        return obj;
    },
    fromAminoMsg(object) {
        return exports.QueryGetProtoRevEnabledRequest.fromAmino(object.value);
    },
    toAminoMsg(message) {
        return {
            type: "osmosis/protorev/query-get-proto-rev-enabled-request",
            value: exports.QueryGetProtoRevEnabledRequest.toAmino(message)
        };
    },
    fromProtoMsg(message) {
        return exports.QueryGetProtoRevEnabledRequest.decode(message.value);
    },
    toProto(message) {
        return exports.QueryGetProtoRevEnabledRequest.encode(message).finish();
    },
    toProtoMsg(message) {
        return {
            typeUrl: "/osmosis.protorev.v1beta1.QueryGetProtoRevEnabledRequest",
            value: exports.QueryGetProtoRevEnabledRequest.encode(message).finish()
        };
    }
};
function createBaseQueryGetProtoRevEnabledResponse() {
    return {
        enabled: false
    };
}
exports.QueryGetProtoRevEnabledResponse = {
    typeUrl: "/osmosis.protorev.v1beta1.QueryGetProtoRevEnabledResponse",
    encode(message, writer = binary_1.BinaryWriter.create()) {
        if (message.enabled === true) {
            writer.uint32(8).bool(message.enabled);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof binary_1.BinaryReader ? input : new binary_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryGetProtoRevEnabledResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.enabled = reader.bool();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromPartial(object) {
        const message = createBaseQueryGetProtoRevEnabledResponse();
        message.enabled = object.enabled ?? false;
        return message;
    },
    fromAmino(object) {
        return {
            enabled: object.enabled
        };
    },
    toAmino(message) {
        const obj = {};
        obj.enabled = message.enabled;
        return obj;
    },
    fromAminoMsg(object) {
        return exports.QueryGetProtoRevEnabledResponse.fromAmino(object.value);
    },
    toAminoMsg(message) {
        return {
            type: "osmosis/protorev/query-get-proto-rev-enabled-response",
            value: exports.QueryGetProtoRevEnabledResponse.toAmino(message)
        };
    },
    fromProtoMsg(message) {
        return exports.QueryGetProtoRevEnabledResponse.decode(message.value);
    },
    toProto(message) {
        return exports.QueryGetProtoRevEnabledResponse.encode(message).finish();
    },
    toProtoMsg(message) {
        return {
            typeUrl: "/osmosis.protorev.v1beta1.QueryGetProtoRevEnabledResponse",
            value: exports.QueryGetProtoRevEnabledResponse.encode(message).finish()
        };
    }
};
function createBaseQueryGetProtoRevPoolRequest() {
    return {
        baseDenom: "",
        otherDenom: ""
    };
}
exports.QueryGetProtoRevPoolRequest = {
    typeUrl: "/osmosis.protorev.v1beta1.QueryGetProtoRevPoolRequest",
    encode(message, writer = binary_1.BinaryWriter.create()) {
        if (message.baseDenom !== "") {
            writer.uint32(10).string(message.baseDenom);
        }
        if (message.otherDenom !== "") {
            writer.uint32(18).string(message.otherDenom);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof binary_1.BinaryReader ? input : new binary_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryGetProtoRevPoolRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.baseDenom = reader.string();
                    break;
                case 2:
                    message.otherDenom = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromPartial(object) {
        const message = createBaseQueryGetProtoRevPoolRequest();
        message.baseDenom = object.baseDenom ?? "";
        message.otherDenom = object.otherDenom ?? "";
        return message;
    },
    fromAmino(object) {
        return {
            baseDenom: object.base_denom,
            otherDenom: object.other_denom
        };
    },
    toAmino(message) {
        const obj = {};
        obj.base_denom = message.baseDenom;
        obj.other_denom = message.otherDenom;
        return obj;
    },
    fromAminoMsg(object) {
        return exports.QueryGetProtoRevPoolRequest.fromAmino(object.value);
    },
    toAminoMsg(message) {
        return {
            type: "osmosis/protorev/query-get-proto-rev-pool-request",
            value: exports.QueryGetProtoRevPoolRequest.toAmino(message)
        };
    },
    fromProtoMsg(message) {
        return exports.QueryGetProtoRevPoolRequest.decode(message.value);
    },
    toProto(message) {
        return exports.QueryGetProtoRevPoolRequest.encode(message).finish();
    },
    toProtoMsg(message) {
        return {
            typeUrl: "/osmosis.protorev.v1beta1.QueryGetProtoRevPoolRequest",
            value: exports.QueryGetProtoRevPoolRequest.encode(message).finish()
        };
    }
};
function createBaseQueryGetProtoRevPoolResponse() {
    return {
        poolId: BigInt(0)
    };
}
exports.QueryGetProtoRevPoolResponse = {
    typeUrl: "/osmosis.protorev.v1beta1.QueryGetProtoRevPoolResponse",
    encode(message, writer = binary_1.BinaryWriter.create()) {
        if (message.poolId !== BigInt(0)) {
            writer.uint32(8).uint64(message.poolId);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof binary_1.BinaryReader ? input : new binary_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryGetProtoRevPoolResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.poolId = reader.uint64();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromPartial(object) {
        const message = createBaseQueryGetProtoRevPoolResponse();
        message.poolId = object.poolId !== undefined && object.poolId !== null ? BigInt(object.poolId.toString()) : BigInt(0);
        return message;
    },
    fromAmino(object) {
        return {
            poolId: BigInt(object.pool_id)
        };
    },
    toAmino(message) {
        const obj = {};
        obj.pool_id = message.poolId ? message.poolId.toString() : undefined;
        return obj;
    },
    fromAminoMsg(object) {
        return exports.QueryGetProtoRevPoolResponse.fromAmino(object.value);
    },
    toAminoMsg(message) {
        return {
            type: "osmosis/protorev/query-get-proto-rev-pool-response",
            value: exports.QueryGetProtoRevPoolResponse.toAmino(message)
        };
    },
    fromProtoMsg(message) {
        return exports.QueryGetProtoRevPoolResponse.decode(message.value);
    },
    toProto(message) {
        return exports.QueryGetProtoRevPoolResponse.encode(message).finish();
    },
    toProtoMsg(message) {
        return {
            typeUrl: "/osmosis.protorev.v1beta1.QueryGetProtoRevPoolResponse",
            value: exports.QueryGetProtoRevPoolResponse.encode(message).finish()
        };
    }
};
//# sourceMappingURL=query.js.map
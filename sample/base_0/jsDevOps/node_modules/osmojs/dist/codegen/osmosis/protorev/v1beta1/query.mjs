import { Params } from "./params";
import { Coin } from "../../../cosmos/base/v1beta1/coin";
import { RouteStatistics, TokenPairArbRoutes, PoolWeights, BaseDenom } from "./protorev";
import { BinaryReader, BinaryWriter } from "../../../binary";
function createBaseQueryParamsRequest() {
    return {};
}
export const QueryParamsRequest = {
    typeUrl: "/osmosis.protorev.v1beta1.QueryParamsRequest",
    encode(_, writer = BinaryWriter.create()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryParamsRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromPartial(_) {
        const message = createBaseQueryParamsRequest();
        return message;
    },
    fromAmino(_) {
        return {};
    },
    toAmino(_) {
        const obj = {};
        return obj;
    },
    fromAminoMsg(object) {
        return QueryParamsRequest.fromAmino(object.value);
    },
    toAminoMsg(message) {
        return {
            type: "osmosis/protorev/query-params-request",
            value: QueryParamsRequest.toAmino(message)
        };
    },
    fromProtoMsg(message) {
        return QueryParamsRequest.decode(message.value);
    },
    toProto(message) {
        return QueryParamsRequest.encode(message).finish();
    },
    toProtoMsg(message) {
        return {
            typeUrl: "/osmosis.protorev.v1beta1.QueryParamsRequest",
            value: QueryParamsRequest.encode(message).finish()
        };
    }
};
function createBaseQueryParamsResponse() {
    return {
        params: Params.fromPartial({})
    };
}
export const QueryParamsResponse = {
    typeUrl: "/osmosis.protorev.v1beta1.QueryParamsResponse",
    encode(message, writer = BinaryWriter.create()) {
        if (message.params !== undefined) {
            Params.encode(message.params, writer.uint32(10).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryParamsResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.params = Params.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromPartial(object) {
        const message = createBaseQueryParamsResponse();
        message.params = object.params !== undefined && object.params !== null ? Params.fromPartial(object.params) : undefined;
        return message;
    },
    fromAmino(object) {
        return {
            params: object?.params ? Params.fromAmino(object.params) : undefined
        };
    },
    toAmino(message) {
        const obj = {};
        obj.params = message.params ? Params.toAmino(message.params) : undefined;
        return obj;
    },
    fromAminoMsg(object) {
        return QueryParamsResponse.fromAmino(object.value);
    },
    toAminoMsg(message) {
        return {
            type: "osmosis/protorev/query-params-response",
            value: QueryParamsResponse.toAmino(message)
        };
    },
    fromProtoMsg(message) {
        return QueryParamsResponse.decode(message.value);
    },
    toProto(message) {
        return QueryParamsResponse.encode(message).finish();
    },
    toProtoMsg(message) {
        return {
            typeUrl: "/osmosis.protorev.v1beta1.QueryParamsResponse",
            value: QueryParamsResponse.encode(message).finish()
        };
    }
};
function createBaseQueryGetProtoRevNumberOfTradesRequest() {
    return {};
}
export const QueryGetProtoRevNumberOfTradesRequest = {
    typeUrl: "/osmosis.protorev.v1beta1.QueryGetProtoRevNumberOfTradesRequest",
    encode(_, writer = BinaryWriter.create()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryGetProtoRevNumberOfTradesRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromPartial(_) {
        const message = createBaseQueryGetProtoRevNumberOfTradesRequest();
        return message;
    },
    fromAmino(_) {
        return {};
    },
    toAmino(_) {
        const obj = {};
        return obj;
    },
    fromAminoMsg(object) {
        return QueryGetProtoRevNumberOfTradesRequest.fromAmino(object.value);
    },
    toAminoMsg(message) {
        return {
            type: "osmosis/protorev/query-get-proto-rev-number-of-trades-request",
            value: QueryGetProtoRevNumberOfTradesRequest.toAmino(message)
        };
    },
    fromProtoMsg(message) {
        return QueryGetProtoRevNumberOfTradesRequest.decode(message.value);
    },
    toProto(message) {
        return QueryGetProtoRevNumberOfTradesRequest.encode(message).finish();
    },
    toProtoMsg(message) {
        return {
            typeUrl: "/osmosis.protorev.v1beta1.QueryGetProtoRevNumberOfTradesRequest",
            value: QueryGetProtoRevNumberOfTradesRequest.encode(message).finish()
        };
    }
};
function createBaseQueryGetProtoRevNumberOfTradesResponse() {
    return {
        numberOfTrades: ""
    };
}
export const QueryGetProtoRevNumberOfTradesResponse = {
    typeUrl: "/osmosis.protorev.v1beta1.QueryGetProtoRevNumberOfTradesResponse",
    encode(message, writer = BinaryWriter.create()) {
        if (message.numberOfTrades !== "") {
            writer.uint32(10).string(message.numberOfTrades);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryGetProtoRevNumberOfTradesResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.numberOfTrades = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromPartial(object) {
        const message = createBaseQueryGetProtoRevNumberOfTradesResponse();
        message.numberOfTrades = object.numberOfTrades ?? "";
        return message;
    },
    fromAmino(object) {
        return {
            numberOfTrades: object.number_of_trades
        };
    },
    toAmino(message) {
        const obj = {};
        obj.number_of_trades = message.numberOfTrades;
        return obj;
    },
    fromAminoMsg(object) {
        return QueryGetProtoRevNumberOfTradesResponse.fromAmino(object.value);
    },
    toAminoMsg(message) {
        return {
            type: "osmosis/protorev/query-get-proto-rev-number-of-trades-response",
            value: QueryGetProtoRevNumberOfTradesResponse.toAmino(message)
        };
    },
    fromProtoMsg(message) {
        return QueryGetProtoRevNumberOfTradesResponse.decode(message.value);
    },
    toProto(message) {
        return QueryGetProtoRevNumberOfTradesResponse.encode(message).finish();
    },
    toProtoMsg(message) {
        return {
            typeUrl: "/osmosis.protorev.v1beta1.QueryGetProtoRevNumberOfTradesResponse",
            value: QueryGetProtoRevNumberOfTradesResponse.encode(message).finish()
        };
    }
};
function createBaseQueryGetProtoRevProfitsByDenomRequest() {
    return {
        denom: ""
    };
}
export const QueryGetProtoRevProfitsByDenomRequest = {
    typeUrl: "/osmosis.protorev.v1beta1.QueryGetProtoRevProfitsByDenomRequest",
    encode(message, writer = BinaryWriter.create()) {
        if (message.denom !== "") {
            writer.uint32(10).string(message.denom);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryGetProtoRevProfitsByDenomRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.denom = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromPartial(object) {
        const message = createBaseQueryGetProtoRevProfitsByDenomRequest();
        message.denom = object.denom ?? "";
        return message;
    },
    fromAmino(object) {
        return {
            denom: object.denom
        };
    },
    toAmino(message) {
        const obj = {};
        obj.denom = message.denom;
        return obj;
    },
    fromAminoMsg(object) {
        return QueryGetProtoRevProfitsByDenomRequest.fromAmino(object.value);
    },
    toAminoMsg(message) {
        return {
            type: "osmosis/protorev/query-get-proto-rev-profits-by-denom-request",
            value: QueryGetProtoRevProfitsByDenomRequest.toAmino(message)
        };
    },
    fromProtoMsg(message) {
        return QueryGetProtoRevProfitsByDenomRequest.decode(message.value);
    },
    toProto(message) {
        return QueryGetProtoRevProfitsByDenomRequest.encode(message).finish();
    },
    toProtoMsg(message) {
        return {
            typeUrl: "/osmosis.protorev.v1beta1.QueryGetProtoRevProfitsByDenomRequest",
            value: QueryGetProtoRevProfitsByDenomRequest.encode(message).finish()
        };
    }
};
function createBaseQueryGetProtoRevProfitsByDenomResponse() {
    return {
        profit: undefined
    };
}
export const QueryGetProtoRevProfitsByDenomResponse = {
    typeUrl: "/osmosis.protorev.v1beta1.QueryGetProtoRevProfitsByDenomResponse",
    encode(message, writer = BinaryWriter.create()) {
        if (message.profit !== undefined) {
            Coin.encode(message.profit, writer.uint32(10).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryGetProtoRevProfitsByDenomResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.profit = Coin.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromPartial(object) {
        const message = createBaseQueryGetProtoRevProfitsByDenomResponse();
        message.profit = object.profit !== undefined && object.profit !== null ? Coin.fromPartial(object.profit) : undefined;
        return message;
    },
    fromAmino(object) {
        return {
            profit: object?.profit ? Coin.fromAmino(object.profit) : undefined
        };
    },
    toAmino(message) {
        const obj = {};
        obj.profit = message.profit ? Coin.toAmino(message.profit) : undefined;
        return obj;
    },
    fromAminoMsg(object) {
        return QueryGetProtoRevProfitsByDenomResponse.fromAmino(object.value);
    },
    toAminoMsg(message) {
        return {
            type: "osmosis/protorev/query-get-proto-rev-profits-by-denom-response",
            value: QueryGetProtoRevProfitsByDenomResponse.toAmino(message)
        };
    },
    fromProtoMsg(message) {
        return QueryGetProtoRevProfitsByDenomResponse.decode(message.value);
    },
    toProto(message) {
        return QueryGetProtoRevProfitsByDenomResponse.encode(message).finish();
    },
    toProtoMsg(message) {
        return {
            typeUrl: "/osmosis.protorev.v1beta1.QueryGetProtoRevProfitsByDenomResponse",
            value: QueryGetProtoRevProfitsByDenomResponse.encode(message).finish()
        };
    }
};
function createBaseQueryGetProtoRevAllProfitsRequest() {
    return {};
}
export const QueryGetProtoRevAllProfitsRequest = {
    typeUrl: "/osmosis.protorev.v1beta1.QueryGetProtoRevAllProfitsRequest",
    encode(_, writer = BinaryWriter.create()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryGetProtoRevAllProfitsRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromPartial(_) {
        const message = createBaseQueryGetProtoRevAllProfitsRequest();
        return message;
    },
    fromAmino(_) {
        return {};
    },
    toAmino(_) {
        const obj = {};
        return obj;
    },
    fromAminoMsg(object) {
        return QueryGetProtoRevAllProfitsRequest.fromAmino(object.value);
    },
    toAminoMsg(message) {
        return {
            type: "osmosis/protorev/query-get-proto-rev-all-profits-request",
            value: QueryGetProtoRevAllProfitsRequest.toAmino(message)
        };
    },
    fromProtoMsg(message) {
        return QueryGetProtoRevAllProfitsRequest.decode(message.value);
    },
    toProto(message) {
        return QueryGetProtoRevAllProfitsRequest.encode(message).finish();
    },
    toProtoMsg(message) {
        return {
            typeUrl: "/osmosis.protorev.v1beta1.QueryGetProtoRevAllProfitsRequest",
            value: QueryGetProtoRevAllProfitsRequest.encode(message).finish()
        };
    }
};
function createBaseQueryGetProtoRevAllProfitsResponse() {
    return {
        profits: []
    };
}
export const QueryGetProtoRevAllProfitsResponse = {
    typeUrl: "/osmosis.protorev.v1beta1.QueryGetProtoRevAllProfitsResponse",
    encode(message, writer = BinaryWriter.create()) {
        for (const v of message.profits) {
            Coin.encode(v, writer.uint32(10).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryGetProtoRevAllProfitsResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.profits.push(Coin.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromPartial(object) {
        const message = createBaseQueryGetProtoRevAllProfitsResponse();
        message.profits = object.profits?.map(e => Coin.fromPartial(e)) || [];
        return message;
    },
    fromAmino(object) {
        return {
            profits: Array.isArray(object?.profits) ? object.profits.map((e) => Coin.fromAmino(e)) : []
        };
    },
    toAmino(message) {
        const obj = {};
        if (message.profits) {
            obj.profits = message.profits.map(e => e ? Coin.toAmino(e) : undefined);
        }
        else {
            obj.profits = [];
        }
        return obj;
    },
    fromAminoMsg(object) {
        return QueryGetProtoRevAllProfitsResponse.fromAmino(object.value);
    },
    toAminoMsg(message) {
        return {
            type: "osmosis/protorev/query-get-proto-rev-all-profits-response",
            value: QueryGetProtoRevAllProfitsResponse.toAmino(message)
        };
    },
    fromProtoMsg(message) {
        return QueryGetProtoRevAllProfitsResponse.decode(message.value);
    },
    toProto(message) {
        return QueryGetProtoRevAllProfitsResponse.encode(message).finish();
    },
    toProtoMsg(message) {
        return {
            typeUrl: "/osmosis.protorev.v1beta1.QueryGetProtoRevAllProfitsResponse",
            value: QueryGetProtoRevAllProfitsResponse.encode(message).finish()
        };
    }
};
function createBaseQueryGetProtoRevStatisticsByRouteRequest() {
    return {
        route: []
    };
}
export const QueryGetProtoRevStatisticsByRouteRequest = {
    typeUrl: "/osmosis.protorev.v1beta1.QueryGetProtoRevStatisticsByRouteRequest",
    encode(message, writer = BinaryWriter.create()) {
        writer.uint32(10).fork();
        for (const v of message.route) {
            writer.uint64(v);
        }
        writer.ldelim();
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryGetProtoRevStatisticsByRouteRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if ((tag & 7) === 2) {
                        const end2 = reader.uint32() + reader.pos;
                        while (reader.pos < end2) {
                            message.route.push(reader.uint64());
                        }
                    }
                    else {
                        message.route.push(reader.uint64());
                    }
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromPartial(object) {
        const message = createBaseQueryGetProtoRevStatisticsByRouteRequest();
        message.route = object.route?.map(e => BigInt(e.toString())) || [];
        return message;
    },
    fromAmino(object) {
        return {
            route: Array.isArray(object?.route) ? object.route.map((e) => BigInt(e)) : []
        };
    },
    toAmino(message) {
        const obj = {};
        if (message.route) {
            obj.route = message.route.map(e => e.toString());
        }
        else {
            obj.route = [];
        }
        return obj;
    },
    fromAminoMsg(object) {
        return QueryGetProtoRevStatisticsByRouteRequest.fromAmino(object.value);
    },
    toAminoMsg(message) {
        return {
            type: "osmosis/protorev/query-get-proto-rev-statistics-by-route-request",
            value: QueryGetProtoRevStatisticsByRouteRequest.toAmino(message)
        };
    },
    fromProtoMsg(message) {
        return QueryGetProtoRevStatisticsByRouteRequest.decode(message.value);
    },
    toProto(message) {
        return QueryGetProtoRevStatisticsByRouteRequest.encode(message).finish();
    },
    toProtoMsg(message) {
        return {
            typeUrl: "/osmosis.protorev.v1beta1.QueryGetProtoRevStatisticsByRouteRequest",
            value: QueryGetProtoRevStatisticsByRouteRequest.encode(message).finish()
        };
    }
};
function createBaseQueryGetProtoRevStatisticsByRouteResponse() {
    return {
        statistics: RouteStatistics.fromPartial({})
    };
}
export const QueryGetProtoRevStatisticsByRouteResponse = {
    typeUrl: "/osmosis.protorev.v1beta1.QueryGetProtoRevStatisticsByRouteResponse",
    encode(message, writer = BinaryWriter.create()) {
        if (message.statistics !== undefined) {
            RouteStatistics.encode(message.statistics, writer.uint32(10).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryGetProtoRevStatisticsByRouteResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.statistics = RouteStatistics.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromPartial(object) {
        const message = createBaseQueryGetProtoRevStatisticsByRouteResponse();
        message.statistics = object.statistics !== undefined && object.statistics !== null ? RouteStatistics.fromPartial(object.statistics) : undefined;
        return message;
    },
    fromAmino(object) {
        return {
            statistics: object?.statistics ? RouteStatistics.fromAmino(object.statistics) : undefined
        };
    },
    toAmino(message) {
        const obj = {};
        obj.statistics = message.statistics ? RouteStatistics.toAmino(message.statistics) : undefined;
        return obj;
    },
    fromAminoMsg(object) {
        return QueryGetProtoRevStatisticsByRouteResponse.fromAmino(object.value);
    },
    toAminoMsg(message) {
        return {
            type: "osmosis/protorev/query-get-proto-rev-statistics-by-route-response",
            value: QueryGetProtoRevStatisticsByRouteResponse.toAmino(message)
        };
    },
    fromProtoMsg(message) {
        return QueryGetProtoRevStatisticsByRouteResponse.decode(message.value);
    },
    toProto(message) {
        return QueryGetProtoRevStatisticsByRouteResponse.encode(message).finish();
    },
    toProtoMsg(message) {
        return {
            typeUrl: "/osmosis.protorev.v1beta1.QueryGetProtoRevStatisticsByRouteResponse",
            value: QueryGetProtoRevStatisticsByRouteResponse.encode(message).finish()
        };
    }
};
function createBaseQueryGetProtoRevAllRouteStatisticsRequest() {
    return {};
}
export const QueryGetProtoRevAllRouteStatisticsRequest = {
    typeUrl: "/osmosis.protorev.v1beta1.QueryGetProtoRevAllRouteStatisticsRequest",
    encode(_, writer = BinaryWriter.create()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryGetProtoRevAllRouteStatisticsRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromPartial(_) {
        const message = createBaseQueryGetProtoRevAllRouteStatisticsRequest();
        return message;
    },
    fromAmino(_) {
        return {};
    },
    toAmino(_) {
        const obj = {};
        return obj;
    },
    fromAminoMsg(object) {
        return QueryGetProtoRevAllRouteStatisticsRequest.fromAmino(object.value);
    },
    toAminoMsg(message) {
        return {
            type: "osmosis/protorev/query-get-proto-rev-all-route-statistics-request",
            value: QueryGetProtoRevAllRouteStatisticsRequest.toAmino(message)
        };
    },
    fromProtoMsg(message) {
        return QueryGetProtoRevAllRouteStatisticsRequest.decode(message.value);
    },
    toProto(message) {
        return QueryGetProtoRevAllRouteStatisticsRequest.encode(message).finish();
    },
    toProtoMsg(message) {
        return {
            typeUrl: "/osmosis.protorev.v1beta1.QueryGetProtoRevAllRouteStatisticsRequest",
            value: QueryGetProtoRevAllRouteStatisticsRequest.encode(message).finish()
        };
    }
};
function createBaseQueryGetProtoRevAllRouteStatisticsResponse() {
    return {
        statistics: []
    };
}
export const QueryGetProtoRevAllRouteStatisticsResponse = {
    typeUrl: "/osmosis.protorev.v1beta1.QueryGetProtoRevAllRouteStatisticsResponse",
    encode(message, writer = BinaryWriter.create()) {
        for (const v of message.statistics) {
            RouteStatistics.encode(v, writer.uint32(10).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryGetProtoRevAllRouteStatisticsResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.statistics.push(RouteStatistics.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromPartial(object) {
        const message = createBaseQueryGetProtoRevAllRouteStatisticsResponse();
        message.statistics = object.statistics?.map(e => RouteStatistics.fromPartial(e)) || [];
        return message;
    },
    fromAmino(object) {
        return {
            statistics: Array.isArray(object?.statistics) ? object.statistics.map((e) => RouteStatistics.fromAmino(e)) : []
        };
    },
    toAmino(message) {
        const obj = {};
        if (message.statistics) {
            obj.statistics = message.statistics.map(e => e ? RouteStatistics.toAmino(e) : undefined);
        }
        else {
            obj.statistics = [];
        }
        return obj;
    },
    fromAminoMsg(object) {
        return QueryGetProtoRevAllRouteStatisticsResponse.fromAmino(object.value);
    },
    toAminoMsg(message) {
        return {
            type: "osmosis/protorev/query-get-proto-rev-all-route-statistics-response",
            value: QueryGetProtoRevAllRouteStatisticsResponse.toAmino(message)
        };
    },
    fromProtoMsg(message) {
        return QueryGetProtoRevAllRouteStatisticsResponse.decode(message.value);
    },
    toProto(message) {
        return QueryGetProtoRevAllRouteStatisticsResponse.encode(message).finish();
    },
    toProtoMsg(message) {
        return {
            typeUrl: "/osmosis.protorev.v1beta1.QueryGetProtoRevAllRouteStatisticsResponse",
            value: QueryGetProtoRevAllRouteStatisticsResponse.encode(message).finish()
        };
    }
};
function createBaseQueryGetProtoRevTokenPairArbRoutesRequest() {
    return {};
}
export const QueryGetProtoRevTokenPairArbRoutesRequest = {
    typeUrl: "/osmosis.protorev.v1beta1.QueryGetProtoRevTokenPairArbRoutesRequest",
    encode(_, writer = BinaryWriter.create()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryGetProtoRevTokenPairArbRoutesRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromPartial(_) {
        const message = createBaseQueryGetProtoRevTokenPairArbRoutesRequest();
        return message;
    },
    fromAmino(_) {
        return {};
    },
    toAmino(_) {
        const obj = {};
        return obj;
    },
    fromAminoMsg(object) {
        return QueryGetProtoRevTokenPairArbRoutesRequest.fromAmino(object.value);
    },
    toAminoMsg(message) {
        return {
            type: "osmosis/protorev/query-get-proto-rev-token-pair-arb-routes-request",
            value: QueryGetProtoRevTokenPairArbRoutesRequest.toAmino(message)
        };
    },
    fromProtoMsg(message) {
        return QueryGetProtoRevTokenPairArbRoutesRequest.decode(message.value);
    },
    toProto(message) {
        return QueryGetProtoRevTokenPairArbRoutesRequest.encode(message).finish();
    },
    toProtoMsg(message) {
        return {
            typeUrl: "/osmosis.protorev.v1beta1.QueryGetProtoRevTokenPairArbRoutesRequest",
            value: QueryGetProtoRevTokenPairArbRoutesRequest.encode(message).finish()
        };
    }
};
function createBaseQueryGetProtoRevTokenPairArbRoutesResponse() {
    return {
        routes: []
    };
}
export const QueryGetProtoRevTokenPairArbRoutesResponse = {
    typeUrl: "/osmosis.protorev.v1beta1.QueryGetProtoRevTokenPairArbRoutesResponse",
    encode(message, writer = BinaryWriter.create()) {
        for (const v of message.routes) {
            TokenPairArbRoutes.encode(v, writer.uint32(10).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryGetProtoRevTokenPairArbRoutesResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.routes.push(TokenPairArbRoutes.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromPartial(object) {
        const message = createBaseQueryGetProtoRevTokenPairArbRoutesResponse();
        message.routes = object.routes?.map(e => TokenPairArbRoutes.fromPartial(e)) || [];
        return message;
    },
    fromAmino(object) {
        return {
            routes: Array.isArray(object?.routes) ? object.routes.map((e) => TokenPairArbRoutes.fromAmino(e)) : []
        };
    },
    toAmino(message) {
        const obj = {};
        if (message.routes) {
            obj.routes = message.routes.map(e => e ? TokenPairArbRoutes.toAmino(e) : undefined);
        }
        else {
            obj.routes = [];
        }
        return obj;
    },
    fromAminoMsg(object) {
        return QueryGetProtoRevTokenPairArbRoutesResponse.fromAmino(object.value);
    },
    toAminoMsg(message) {
        return {
            type: "osmosis/protorev/query-get-proto-rev-token-pair-arb-routes-response",
            value: QueryGetProtoRevTokenPairArbRoutesResponse.toAmino(message)
        };
    },
    fromProtoMsg(message) {
        return QueryGetProtoRevTokenPairArbRoutesResponse.decode(message.value);
    },
    toProto(message) {
        return QueryGetProtoRevTokenPairArbRoutesResponse.encode(message).finish();
    },
    toProtoMsg(message) {
        return {
            typeUrl: "/osmosis.protorev.v1beta1.QueryGetProtoRevTokenPairArbRoutesResponse",
            value: QueryGetProtoRevTokenPairArbRoutesResponse.encode(message).finish()
        };
    }
};
function createBaseQueryGetProtoRevAdminAccountRequest() {
    return {};
}
export const QueryGetProtoRevAdminAccountRequest = {
    typeUrl: "/osmosis.protorev.v1beta1.QueryGetProtoRevAdminAccountRequest",
    encode(_, writer = BinaryWriter.create()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryGetProtoRevAdminAccountRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromPartial(_) {
        const message = createBaseQueryGetProtoRevAdminAccountRequest();
        return message;
    },
    fromAmino(_) {
        return {};
    },
    toAmino(_) {
        const obj = {};
        return obj;
    },
    fromAminoMsg(object) {
        return QueryGetProtoRevAdminAccountRequest.fromAmino(object.value);
    },
    toAminoMsg(message) {
        return {
            type: "osmosis/protorev/query-get-proto-rev-admin-account-request",
            value: QueryGetProtoRevAdminAccountRequest.toAmino(message)
        };
    },
    fromProtoMsg(message) {
        return QueryGetProtoRevAdminAccountRequest.decode(message.value);
    },
    toProto(message) {
        return QueryGetProtoRevAdminAccountRequest.encode(message).finish();
    },
    toProtoMsg(message) {
        return {
            typeUrl: "/osmosis.protorev.v1beta1.QueryGetProtoRevAdminAccountRequest",
            value: QueryGetProtoRevAdminAccountRequest.encode(message).finish()
        };
    }
};
function createBaseQueryGetProtoRevAdminAccountResponse() {
    return {
        adminAccount: ""
    };
}
export const QueryGetProtoRevAdminAccountResponse = {
    typeUrl: "/osmosis.protorev.v1beta1.QueryGetProtoRevAdminAccountResponse",
    encode(message, writer = BinaryWriter.create()) {
        if (message.adminAccount !== "") {
            writer.uint32(10).string(message.adminAccount);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryGetProtoRevAdminAccountResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.adminAccount = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromPartial(object) {
        const message = createBaseQueryGetProtoRevAdminAccountResponse();
        message.adminAccount = object.adminAccount ?? "";
        return message;
    },
    fromAmino(object) {
        return {
            adminAccount: object.admin_account
        };
    },
    toAmino(message) {
        const obj = {};
        obj.admin_account = message.adminAccount;
        return obj;
    },
    fromAminoMsg(object) {
        return QueryGetProtoRevAdminAccountResponse.fromAmino(object.value);
    },
    toAminoMsg(message) {
        return {
            type: "osmosis/protorev/query-get-proto-rev-admin-account-response",
            value: QueryGetProtoRevAdminAccountResponse.toAmino(message)
        };
    },
    fromProtoMsg(message) {
        return QueryGetProtoRevAdminAccountResponse.decode(message.value);
    },
    toProto(message) {
        return QueryGetProtoRevAdminAccountResponse.encode(message).finish();
    },
    toProtoMsg(message) {
        return {
            typeUrl: "/osmosis.protorev.v1beta1.QueryGetProtoRevAdminAccountResponse",
            value: QueryGetProtoRevAdminAccountResponse.encode(message).finish()
        };
    }
};
function createBaseQueryGetProtoRevDeveloperAccountRequest() {
    return {};
}
export const QueryGetProtoRevDeveloperAccountRequest = {
    typeUrl: "/osmosis.protorev.v1beta1.QueryGetProtoRevDeveloperAccountRequest",
    encode(_, writer = BinaryWriter.create()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryGetProtoRevDeveloperAccountRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromPartial(_) {
        const message = createBaseQueryGetProtoRevDeveloperAccountRequest();
        return message;
    },
    fromAmino(_) {
        return {};
    },
    toAmino(_) {
        const obj = {};
        return obj;
    },
    fromAminoMsg(object) {
        return QueryGetProtoRevDeveloperAccountRequest.fromAmino(object.value);
    },
    toAminoMsg(message) {
        return {
            type: "osmosis/protorev/query-get-proto-rev-developer-account-request",
            value: QueryGetProtoRevDeveloperAccountRequest.toAmino(message)
        };
    },
    fromProtoMsg(message) {
        return QueryGetProtoRevDeveloperAccountRequest.decode(message.value);
    },
    toProto(message) {
        return QueryGetProtoRevDeveloperAccountRequest.encode(message).finish();
    },
    toProtoMsg(message) {
        return {
            typeUrl: "/osmosis.protorev.v1beta1.QueryGetProtoRevDeveloperAccountRequest",
            value: QueryGetProtoRevDeveloperAccountRequest.encode(message).finish()
        };
    }
};
function createBaseQueryGetProtoRevDeveloperAccountResponse() {
    return {
        developerAccount: ""
    };
}
export const QueryGetProtoRevDeveloperAccountResponse = {
    typeUrl: "/osmosis.protorev.v1beta1.QueryGetProtoRevDeveloperAccountResponse",
    encode(message, writer = BinaryWriter.create()) {
        if (message.developerAccount !== "") {
            writer.uint32(10).string(message.developerAccount);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryGetProtoRevDeveloperAccountResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.developerAccount = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromPartial(object) {
        const message = createBaseQueryGetProtoRevDeveloperAccountResponse();
        message.developerAccount = object.developerAccount ?? "";
        return message;
    },
    fromAmino(object) {
        return {
            developerAccount: object.developer_account
        };
    },
    toAmino(message) {
        const obj = {};
        obj.developer_account = message.developerAccount;
        return obj;
    },
    fromAminoMsg(object) {
        return QueryGetProtoRevDeveloperAccountResponse.fromAmino(object.value);
    },
    toAminoMsg(message) {
        return {
            type: "osmosis/protorev/query-get-proto-rev-developer-account-response",
            value: QueryGetProtoRevDeveloperAccountResponse.toAmino(message)
        };
    },
    fromProtoMsg(message) {
        return QueryGetProtoRevDeveloperAccountResponse.decode(message.value);
    },
    toProto(message) {
        return QueryGetProtoRevDeveloperAccountResponse.encode(message).finish();
    },
    toProtoMsg(message) {
        return {
            typeUrl: "/osmosis.protorev.v1beta1.QueryGetProtoRevDeveloperAccountResponse",
            value: QueryGetProtoRevDeveloperAccountResponse.encode(message).finish()
        };
    }
};
function createBaseQueryGetProtoRevPoolWeightsRequest() {
    return {};
}
export const QueryGetProtoRevPoolWeightsRequest = {
    typeUrl: "/osmosis.protorev.v1beta1.QueryGetProtoRevPoolWeightsRequest",
    encode(_, writer = BinaryWriter.create()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryGetProtoRevPoolWeightsRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromPartial(_) {
        const message = createBaseQueryGetProtoRevPoolWeightsRequest();
        return message;
    },
    fromAmino(_) {
        return {};
    },
    toAmino(_) {
        const obj = {};
        return obj;
    },
    fromAminoMsg(object) {
        return QueryGetProtoRevPoolWeightsRequest.fromAmino(object.value);
    },
    toAminoMsg(message) {
        return {
            type: "osmosis/protorev/query-get-proto-rev-pool-weights-request",
            value: QueryGetProtoRevPoolWeightsRequest.toAmino(message)
        };
    },
    fromProtoMsg(message) {
        return QueryGetProtoRevPoolWeightsRequest.decode(message.value);
    },
    toProto(message) {
        return QueryGetProtoRevPoolWeightsRequest.encode(message).finish();
    },
    toProtoMsg(message) {
        return {
            typeUrl: "/osmosis.protorev.v1beta1.QueryGetProtoRevPoolWeightsRequest",
            value: QueryGetProtoRevPoolWeightsRequest.encode(message).finish()
        };
    }
};
function createBaseQueryGetProtoRevPoolWeightsResponse() {
    return {
        poolWeights: PoolWeights.fromPartial({})
    };
}
export const QueryGetProtoRevPoolWeightsResponse = {
    typeUrl: "/osmosis.protorev.v1beta1.QueryGetProtoRevPoolWeightsResponse",
    encode(message, writer = BinaryWriter.create()) {
        if (message.poolWeights !== undefined) {
            PoolWeights.encode(message.poolWeights, writer.uint32(10).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryGetProtoRevPoolWeightsResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.poolWeights = PoolWeights.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromPartial(object) {
        const message = createBaseQueryGetProtoRevPoolWeightsResponse();
        message.poolWeights = object.poolWeights !== undefined && object.poolWeights !== null ? PoolWeights.fromPartial(object.poolWeights) : undefined;
        return message;
    },
    fromAmino(object) {
        return {
            poolWeights: object?.pool_weights ? PoolWeights.fromAmino(object.pool_weights) : undefined
        };
    },
    toAmino(message) {
        const obj = {};
        obj.pool_weights = message.poolWeights ? PoolWeights.toAmino(message.poolWeights) : undefined;
        return obj;
    },
    fromAminoMsg(object) {
        return QueryGetProtoRevPoolWeightsResponse.fromAmino(object.value);
    },
    toAminoMsg(message) {
        return {
            type: "osmosis/protorev/query-get-proto-rev-pool-weights-response",
            value: QueryGetProtoRevPoolWeightsResponse.toAmino(message)
        };
    },
    fromProtoMsg(message) {
        return QueryGetProtoRevPoolWeightsResponse.decode(message.value);
    },
    toProto(message) {
        return QueryGetProtoRevPoolWeightsResponse.encode(message).finish();
    },
    toProtoMsg(message) {
        return {
            typeUrl: "/osmosis.protorev.v1beta1.QueryGetProtoRevPoolWeightsResponse",
            value: QueryGetProtoRevPoolWeightsResponse.encode(message).finish()
        };
    }
};
function createBaseQueryGetProtoRevMaxPoolPointsPerBlockRequest() {
    return {};
}
export const QueryGetProtoRevMaxPoolPointsPerBlockRequest = {
    typeUrl: "/osmosis.protorev.v1beta1.QueryGetProtoRevMaxPoolPointsPerBlockRequest",
    encode(_, writer = BinaryWriter.create()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryGetProtoRevMaxPoolPointsPerBlockRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromPartial(_) {
        const message = createBaseQueryGetProtoRevMaxPoolPointsPerBlockRequest();
        return message;
    },
    fromAmino(_) {
        return {};
    },
    toAmino(_) {
        const obj = {};
        return obj;
    },
    fromAminoMsg(object) {
        return QueryGetProtoRevMaxPoolPointsPerBlockRequest.fromAmino(object.value);
    },
    toAminoMsg(message) {
        return {
            type: "osmosis/protorev/query-get-proto-rev-max-pool-points-per-block-request",
            value: QueryGetProtoRevMaxPoolPointsPerBlockRequest.toAmino(message)
        };
    },
    fromProtoMsg(message) {
        return QueryGetProtoRevMaxPoolPointsPerBlockRequest.decode(message.value);
    },
    toProto(message) {
        return QueryGetProtoRevMaxPoolPointsPerBlockRequest.encode(message).finish();
    },
    toProtoMsg(message) {
        return {
            typeUrl: "/osmosis.protorev.v1beta1.QueryGetProtoRevMaxPoolPointsPerBlockRequest",
            value: QueryGetProtoRevMaxPoolPointsPerBlockRequest.encode(message).finish()
        };
    }
};
function createBaseQueryGetProtoRevMaxPoolPointsPerBlockResponse() {
    return {
        maxPoolPointsPerBlock: BigInt(0)
    };
}
export const QueryGetProtoRevMaxPoolPointsPerBlockResponse = {
    typeUrl: "/osmosis.protorev.v1beta1.QueryGetProtoRevMaxPoolPointsPerBlockResponse",
    encode(message, writer = BinaryWriter.create()) {
        if (message.maxPoolPointsPerBlock !== BigInt(0)) {
            writer.uint32(8).uint64(message.maxPoolPointsPerBlock);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryGetProtoRevMaxPoolPointsPerBlockResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.maxPoolPointsPerBlock = reader.uint64();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromPartial(object) {
        const message = createBaseQueryGetProtoRevMaxPoolPointsPerBlockResponse();
        message.maxPoolPointsPerBlock = object.maxPoolPointsPerBlock !== undefined && object.maxPoolPointsPerBlock !== null ? BigInt(object.maxPoolPointsPerBlock.toString()) : BigInt(0);
        return message;
    },
    fromAmino(object) {
        return {
            maxPoolPointsPerBlock: BigInt(object.max_pool_points_per_block)
        };
    },
    toAmino(message) {
        const obj = {};
        obj.max_pool_points_per_block = message.maxPoolPointsPerBlock ? message.maxPoolPointsPerBlock.toString() : undefined;
        return obj;
    },
    fromAminoMsg(object) {
        return QueryGetProtoRevMaxPoolPointsPerBlockResponse.fromAmino(object.value);
    },
    toAminoMsg(message) {
        return {
            type: "osmosis/protorev/query-get-proto-rev-max-pool-points-per-block-response",
            value: QueryGetProtoRevMaxPoolPointsPerBlockResponse.toAmino(message)
        };
    },
    fromProtoMsg(message) {
        return QueryGetProtoRevMaxPoolPointsPerBlockResponse.decode(message.value);
    },
    toProto(message) {
        return QueryGetProtoRevMaxPoolPointsPerBlockResponse.encode(message).finish();
    },
    toProtoMsg(message) {
        return {
            typeUrl: "/osmosis.protorev.v1beta1.QueryGetProtoRevMaxPoolPointsPerBlockResponse",
            value: QueryGetProtoRevMaxPoolPointsPerBlockResponse.encode(message).finish()
        };
    }
};
function createBaseQueryGetProtoRevMaxPoolPointsPerTxRequest() {
    return {};
}
export const QueryGetProtoRevMaxPoolPointsPerTxRequest = {
    typeUrl: "/osmosis.protorev.v1beta1.QueryGetProtoRevMaxPoolPointsPerTxRequest",
    encode(_, writer = BinaryWriter.create()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryGetProtoRevMaxPoolPointsPerTxRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromPartial(_) {
        const message = createBaseQueryGetProtoRevMaxPoolPointsPerTxRequest();
        return message;
    },
    fromAmino(_) {
        return {};
    },
    toAmino(_) {
        const obj = {};
        return obj;
    },
    fromAminoMsg(object) {
        return QueryGetProtoRevMaxPoolPointsPerTxRequest.fromAmino(object.value);
    },
    toAminoMsg(message) {
        return {
            type: "osmosis/protorev/query-get-proto-rev-max-pool-points-per-tx-request",
            value: QueryGetProtoRevMaxPoolPointsPerTxRequest.toAmino(message)
        };
    },
    fromProtoMsg(message) {
        return QueryGetProtoRevMaxPoolPointsPerTxRequest.decode(message.value);
    },
    toProto(message) {
        return QueryGetProtoRevMaxPoolPointsPerTxRequest.encode(message).finish();
    },
    toProtoMsg(message) {
        return {
            typeUrl: "/osmosis.protorev.v1beta1.QueryGetProtoRevMaxPoolPointsPerTxRequest",
            value: QueryGetProtoRevMaxPoolPointsPerTxRequest.encode(message).finish()
        };
    }
};
function createBaseQueryGetProtoRevMaxPoolPointsPerTxResponse() {
    return {
        maxPoolPointsPerTx: BigInt(0)
    };
}
export const QueryGetProtoRevMaxPoolPointsPerTxResponse = {
    typeUrl: "/osmosis.protorev.v1beta1.QueryGetProtoRevMaxPoolPointsPerTxResponse",
    encode(message, writer = BinaryWriter.create()) {
        if (message.maxPoolPointsPerTx !== BigInt(0)) {
            writer.uint32(8).uint64(message.maxPoolPointsPerTx);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryGetProtoRevMaxPoolPointsPerTxResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.maxPoolPointsPerTx = reader.uint64();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromPartial(object) {
        const message = createBaseQueryGetProtoRevMaxPoolPointsPerTxResponse();
        message.maxPoolPointsPerTx = object.maxPoolPointsPerTx !== undefined && object.maxPoolPointsPerTx !== null ? BigInt(object.maxPoolPointsPerTx.toString()) : BigInt(0);
        return message;
    },
    fromAmino(object) {
        return {
            maxPoolPointsPerTx: BigInt(object.max_pool_points_per_tx)
        };
    },
    toAmino(message) {
        const obj = {};
        obj.max_pool_points_per_tx = message.maxPoolPointsPerTx ? message.maxPoolPointsPerTx.toString() : undefined;
        return obj;
    },
    fromAminoMsg(object) {
        return QueryGetProtoRevMaxPoolPointsPerTxResponse.fromAmino(object.value);
    },
    toAminoMsg(message) {
        return {
            type: "osmosis/protorev/query-get-proto-rev-max-pool-points-per-tx-response",
            value: QueryGetProtoRevMaxPoolPointsPerTxResponse.toAmino(message)
        };
    },
    fromProtoMsg(message) {
        return QueryGetProtoRevMaxPoolPointsPerTxResponse.decode(message.value);
    },
    toProto(message) {
        return QueryGetProtoRevMaxPoolPointsPerTxResponse.encode(message).finish();
    },
    toProtoMsg(message) {
        return {
            typeUrl: "/osmosis.protorev.v1beta1.QueryGetProtoRevMaxPoolPointsPerTxResponse",
            value: QueryGetProtoRevMaxPoolPointsPerTxResponse.encode(message).finish()
        };
    }
};
function createBaseQueryGetProtoRevBaseDenomsRequest() {
    return {};
}
export const QueryGetProtoRevBaseDenomsRequest = {
    typeUrl: "/osmosis.protorev.v1beta1.QueryGetProtoRevBaseDenomsRequest",
    encode(_, writer = BinaryWriter.create()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryGetProtoRevBaseDenomsRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromPartial(_) {
        const message = createBaseQueryGetProtoRevBaseDenomsRequest();
        return message;
    },
    fromAmino(_) {
        return {};
    },
    toAmino(_) {
        const obj = {};
        return obj;
    },
    fromAminoMsg(object) {
        return QueryGetProtoRevBaseDenomsRequest.fromAmino(object.value);
    },
    toAminoMsg(message) {
        return {
            type: "osmosis/protorev/query-get-proto-rev-base-denoms-request",
            value: QueryGetProtoRevBaseDenomsRequest.toAmino(message)
        };
    },
    fromProtoMsg(message) {
        return QueryGetProtoRevBaseDenomsRequest.decode(message.value);
    },
    toProto(message) {
        return QueryGetProtoRevBaseDenomsRequest.encode(message).finish();
    },
    toProtoMsg(message) {
        return {
            typeUrl: "/osmosis.protorev.v1beta1.QueryGetProtoRevBaseDenomsRequest",
            value: QueryGetProtoRevBaseDenomsRequest.encode(message).finish()
        };
    }
};
function createBaseQueryGetProtoRevBaseDenomsResponse() {
    return {
        baseDenoms: []
    };
}
export const QueryGetProtoRevBaseDenomsResponse = {
    typeUrl: "/osmosis.protorev.v1beta1.QueryGetProtoRevBaseDenomsResponse",
    encode(message, writer = BinaryWriter.create()) {
        for (const v of message.baseDenoms) {
            BaseDenom.encode(v, writer.uint32(10).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryGetProtoRevBaseDenomsResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.baseDenoms.push(BaseDenom.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromPartial(object) {
        const message = createBaseQueryGetProtoRevBaseDenomsResponse();
        message.baseDenoms = object.baseDenoms?.map(e => BaseDenom.fromPartial(e)) || [];
        return message;
    },
    fromAmino(object) {
        return {
            baseDenoms: Array.isArray(object?.base_denoms) ? object.base_denoms.map((e) => BaseDenom.fromAmino(e)) : []
        };
    },
    toAmino(message) {
        const obj = {};
        if (message.baseDenoms) {
            obj.base_denoms = message.baseDenoms.map(e => e ? BaseDenom.toAmino(e) : undefined);
        }
        else {
            obj.base_denoms = [];
        }
        return obj;
    },
    fromAminoMsg(object) {
        return QueryGetProtoRevBaseDenomsResponse.fromAmino(object.value);
    },
    toAminoMsg(message) {
        return {
            type: "osmosis/protorev/query-get-proto-rev-base-denoms-response",
            value: QueryGetProtoRevBaseDenomsResponse.toAmino(message)
        };
    },
    fromProtoMsg(message) {
        return QueryGetProtoRevBaseDenomsResponse.decode(message.value);
    },
    toProto(message) {
        return QueryGetProtoRevBaseDenomsResponse.encode(message).finish();
    },
    toProtoMsg(message) {
        return {
            typeUrl: "/osmosis.protorev.v1beta1.QueryGetProtoRevBaseDenomsResponse",
            value: QueryGetProtoRevBaseDenomsResponse.encode(message).finish()
        };
    }
};
function createBaseQueryGetProtoRevEnabledRequest() {
    return {};
}
export const QueryGetProtoRevEnabledRequest = {
    typeUrl: "/osmosis.protorev.v1beta1.QueryGetProtoRevEnabledRequest",
    encode(_, writer = BinaryWriter.create()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryGetProtoRevEnabledRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromPartial(_) {
        const message = createBaseQueryGetProtoRevEnabledRequest();
        return message;
    },
    fromAmino(_) {
        return {};
    },
    toAmino(_) {
        const obj = {};
        return obj;
    },
    fromAminoMsg(object) {
        return QueryGetProtoRevEnabledRequest.fromAmino(object.value);
    },
    toAminoMsg(message) {
        return {
            type: "osmosis/protorev/query-get-proto-rev-enabled-request",
            value: QueryGetProtoRevEnabledRequest.toAmino(message)
        };
    },
    fromProtoMsg(message) {
        return QueryGetProtoRevEnabledRequest.decode(message.value);
    },
    toProto(message) {
        return QueryGetProtoRevEnabledRequest.encode(message).finish();
    },
    toProtoMsg(message) {
        return {
            typeUrl: "/osmosis.protorev.v1beta1.QueryGetProtoRevEnabledRequest",
            value: QueryGetProtoRevEnabledRequest.encode(message).finish()
        };
    }
};
function createBaseQueryGetProtoRevEnabledResponse() {
    return {
        enabled: false
    };
}
export const QueryGetProtoRevEnabledResponse = {
    typeUrl: "/osmosis.protorev.v1beta1.QueryGetProtoRevEnabledResponse",
    encode(message, writer = BinaryWriter.create()) {
        if (message.enabled === true) {
            writer.uint32(8).bool(message.enabled);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryGetProtoRevEnabledResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.enabled = reader.bool();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromPartial(object) {
        const message = createBaseQueryGetProtoRevEnabledResponse();
        message.enabled = object.enabled ?? false;
        return message;
    },
    fromAmino(object) {
        return {
            enabled: object.enabled
        };
    },
    toAmino(message) {
        const obj = {};
        obj.enabled = message.enabled;
        return obj;
    },
    fromAminoMsg(object) {
        return QueryGetProtoRevEnabledResponse.fromAmino(object.value);
    },
    toAminoMsg(message) {
        return {
            type: "osmosis/protorev/query-get-proto-rev-enabled-response",
            value: QueryGetProtoRevEnabledResponse.toAmino(message)
        };
    },
    fromProtoMsg(message) {
        return QueryGetProtoRevEnabledResponse.decode(message.value);
    },
    toProto(message) {
        return QueryGetProtoRevEnabledResponse.encode(message).finish();
    },
    toProtoMsg(message) {
        return {
            typeUrl: "/osmosis.protorev.v1beta1.QueryGetProtoRevEnabledResponse",
            value: QueryGetProtoRevEnabledResponse.encode(message).finish()
        };
    }
};
function createBaseQueryGetProtoRevPoolRequest() {
    return {
        baseDenom: "",
        otherDenom: ""
    };
}
export const QueryGetProtoRevPoolRequest = {
    typeUrl: "/osmosis.protorev.v1beta1.QueryGetProtoRevPoolRequest",
    encode(message, writer = BinaryWriter.create()) {
        if (message.baseDenom !== "") {
            writer.uint32(10).string(message.baseDenom);
        }
        if (message.otherDenom !== "") {
            writer.uint32(18).string(message.otherDenom);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryGetProtoRevPoolRequest();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.baseDenom = reader.string();
                    break;
                case 2:
                    message.otherDenom = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromPartial(object) {
        const message = createBaseQueryGetProtoRevPoolRequest();
        message.baseDenom = object.baseDenom ?? "";
        message.otherDenom = object.otherDenom ?? "";
        return message;
    },
    fromAmino(object) {
        return {
            baseDenom: object.base_denom,
            otherDenom: object.other_denom
        };
    },
    toAmino(message) {
        const obj = {};
        obj.base_denom = message.baseDenom;
        obj.other_denom = message.otherDenom;
        return obj;
    },
    fromAminoMsg(object) {
        return QueryGetProtoRevPoolRequest.fromAmino(object.value);
    },
    toAminoMsg(message) {
        return {
            type: "osmosis/protorev/query-get-proto-rev-pool-request",
            value: QueryGetProtoRevPoolRequest.toAmino(message)
        };
    },
    fromProtoMsg(message) {
        return QueryGetProtoRevPoolRequest.decode(message.value);
    },
    toProto(message) {
        return QueryGetProtoRevPoolRequest.encode(message).finish();
    },
    toProtoMsg(message) {
        return {
            typeUrl: "/osmosis.protorev.v1beta1.QueryGetProtoRevPoolRequest",
            value: QueryGetProtoRevPoolRequest.encode(message).finish()
        };
    }
};
function createBaseQueryGetProtoRevPoolResponse() {
    return {
        poolId: BigInt(0)
    };
}
export const QueryGetProtoRevPoolResponse = {
    typeUrl: "/osmosis.protorev.v1beta1.QueryGetProtoRevPoolResponse",
    encode(message, writer = BinaryWriter.create()) {
        if (message.poolId !== BigInt(0)) {
            writer.uint32(8).uint64(message.poolId);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseQueryGetProtoRevPoolResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.poolId = reader.uint64();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromPartial(object) {
        const message = createBaseQueryGetProtoRevPoolResponse();
        message.poolId = object.poolId !== undefined && object.poolId !== null ? BigInt(object.poolId.toString()) : BigInt(0);
        return message;
    },
    fromAmino(object) {
        return {
            poolId: BigInt(object.pool_id)
        };
    },
    toAmino(message) {
        const obj = {};
        obj.pool_id = message.poolId ? message.poolId.toString() : undefined;
        return obj;
    },
    fromAminoMsg(object) {
        return QueryGetProtoRevPoolResponse.fromAmino(object.value);
    },
    toAminoMsg(message) {
        return {
            type: "osmosis/protorev/query-get-proto-rev-pool-response",
            value: QueryGetProtoRevPoolResponse.toAmino(message)
        };
    },
    fromProtoMsg(message) {
        return QueryGetProtoRevPoolResponse.decode(message.value);
    },
    toProto(message) {
        return QueryGetProtoRevPoolResponse.encode(message).finish();
    },
    toProtoMsg(message) {
        return {
            typeUrl: "/osmosis.protorev.v1beta1.QueryGetProtoRevPoolResponse",
            value: QueryGetProtoRevPoolResponse.encode(message).finish()
        };
    }
};
//# sourceMappingURL=query.js.map
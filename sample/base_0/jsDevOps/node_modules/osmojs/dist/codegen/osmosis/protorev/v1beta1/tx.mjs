import { TokenPairArbRoutes, PoolWeights, BaseDenom } from "./protorev";
import { BinaryReader, BinaryWriter } from "../../../binary";
function createBaseMsgSetHotRoutes() {
    return {
        admin: "",
        hotRoutes: []
    };
}
export const MsgSetHotRoutes = {
    typeUrl: "/osmosis.protorev.v1beta1.MsgSetHotRoutes",
    encode(message, writer = BinaryWriter.create()) {
        if (message.admin !== "") {
            writer.uint32(10).string(message.admin);
        }
        for (const v of message.hotRoutes) {
            TokenPairArbRoutes.encode(v, writer.uint32(18).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMsgSetHotRoutes();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.admin = reader.string();
                    break;
                case 2:
                    message.hotRoutes.push(TokenPairArbRoutes.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromPartial(object) {
        const message = createBaseMsgSetHotRoutes();
        message.admin = object.admin ?? "";
        message.hotRoutes = object.hotRoutes?.map(e => TokenPairArbRoutes.fromPartial(e)) || [];
        return message;
    },
    fromAmino(object) {
        return {
            admin: object.admin,
            hotRoutes: Array.isArray(object?.hot_routes) ? object.hot_routes.map((e) => TokenPairArbRoutes.fromAmino(e)) : []
        };
    },
    toAmino(message) {
        const obj = {};
        obj.admin = message.admin;
        if (message.hotRoutes) {
            obj.hot_routes = message.hotRoutes.map(e => e ? TokenPairArbRoutes.toAmino(e) : undefined);
        }
        else {
            obj.hot_routes = [];
        }
        return obj;
    },
    fromAminoMsg(object) {
        return MsgSetHotRoutes.fromAmino(object.value);
    },
    toAminoMsg(message) {
        return {
            type: "osmosis/MsgSetHotRoutes",
            value: MsgSetHotRoutes.toAmino(message)
        };
    },
    fromProtoMsg(message) {
        return MsgSetHotRoutes.decode(message.value);
    },
    toProto(message) {
        return MsgSetHotRoutes.encode(message).finish();
    },
    toProtoMsg(message) {
        return {
            typeUrl: "/osmosis.protorev.v1beta1.MsgSetHotRoutes",
            value: MsgSetHotRoutes.encode(message).finish()
        };
    }
};
function createBaseMsgSetHotRoutesResponse() {
    return {};
}
export const MsgSetHotRoutesResponse = {
    typeUrl: "/osmosis.protorev.v1beta1.MsgSetHotRoutesResponse",
    encode(_, writer = BinaryWriter.create()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMsgSetHotRoutesResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromPartial(_) {
        const message = createBaseMsgSetHotRoutesResponse();
        return message;
    },
    fromAmino(_) {
        return {};
    },
    toAmino(_) {
        const obj = {};
        return obj;
    },
    fromAminoMsg(object) {
        return MsgSetHotRoutesResponse.fromAmino(object.value);
    },
    toAminoMsg(message) {
        return {
            type: "osmosis/protorev/set-hot-routes-response",
            value: MsgSetHotRoutesResponse.toAmino(message)
        };
    },
    fromProtoMsg(message) {
        return MsgSetHotRoutesResponse.decode(message.value);
    },
    toProto(message) {
        return MsgSetHotRoutesResponse.encode(message).finish();
    },
    toProtoMsg(message) {
        return {
            typeUrl: "/osmosis.protorev.v1beta1.MsgSetHotRoutesResponse",
            value: MsgSetHotRoutesResponse.encode(message).finish()
        };
    }
};
function createBaseMsgSetDeveloperAccount() {
    return {
        admin: "",
        developerAccount: ""
    };
}
export const MsgSetDeveloperAccount = {
    typeUrl: "/osmosis.protorev.v1beta1.MsgSetDeveloperAccount",
    encode(message, writer = BinaryWriter.create()) {
        if (message.admin !== "") {
            writer.uint32(10).string(message.admin);
        }
        if (message.developerAccount !== "") {
            writer.uint32(18).string(message.developerAccount);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMsgSetDeveloperAccount();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.admin = reader.string();
                    break;
                case 2:
                    message.developerAccount = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromPartial(object) {
        const message = createBaseMsgSetDeveloperAccount();
        message.admin = object.admin ?? "";
        message.developerAccount = object.developerAccount ?? "";
        return message;
    },
    fromAmino(object) {
        return {
            admin: object.admin,
            developerAccount: object.developer_account
        };
    },
    toAmino(message) {
        const obj = {};
        obj.admin = message.admin;
        obj.developer_account = message.developerAccount;
        return obj;
    },
    fromAminoMsg(object) {
        return MsgSetDeveloperAccount.fromAmino(object.value);
    },
    toAminoMsg(message) {
        return {
            type: "osmosis/MsgSetDeveloperAccount",
            value: MsgSetDeveloperAccount.toAmino(message)
        };
    },
    fromProtoMsg(message) {
        return MsgSetDeveloperAccount.decode(message.value);
    },
    toProto(message) {
        return MsgSetDeveloperAccount.encode(message).finish();
    },
    toProtoMsg(message) {
        return {
            typeUrl: "/osmosis.protorev.v1beta1.MsgSetDeveloperAccount",
            value: MsgSetDeveloperAccount.encode(message).finish()
        };
    }
};
function createBaseMsgSetDeveloperAccountResponse() {
    return {};
}
export const MsgSetDeveloperAccountResponse = {
    typeUrl: "/osmosis.protorev.v1beta1.MsgSetDeveloperAccountResponse",
    encode(_, writer = BinaryWriter.create()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMsgSetDeveloperAccountResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromPartial(_) {
        const message = createBaseMsgSetDeveloperAccountResponse();
        return message;
    },
    fromAmino(_) {
        return {};
    },
    toAmino(_) {
        const obj = {};
        return obj;
    },
    fromAminoMsg(object) {
        return MsgSetDeveloperAccountResponse.fromAmino(object.value);
    },
    toAminoMsg(message) {
        return {
            type: "osmosis/protorev/set-developer-account-response",
            value: MsgSetDeveloperAccountResponse.toAmino(message)
        };
    },
    fromProtoMsg(message) {
        return MsgSetDeveloperAccountResponse.decode(message.value);
    },
    toProto(message) {
        return MsgSetDeveloperAccountResponse.encode(message).finish();
    },
    toProtoMsg(message) {
        return {
            typeUrl: "/osmosis.protorev.v1beta1.MsgSetDeveloperAccountResponse",
            value: MsgSetDeveloperAccountResponse.encode(message).finish()
        };
    }
};
function createBaseMsgSetPoolWeights() {
    return {
        admin: "",
        poolWeights: PoolWeights.fromPartial({})
    };
}
export const MsgSetPoolWeights = {
    typeUrl: "/osmosis.protorev.v1beta1.MsgSetPoolWeights",
    encode(message, writer = BinaryWriter.create()) {
        if (message.admin !== "") {
            writer.uint32(10).string(message.admin);
        }
        if (message.poolWeights !== undefined) {
            PoolWeights.encode(message.poolWeights, writer.uint32(18).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMsgSetPoolWeights();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.admin = reader.string();
                    break;
                case 2:
                    message.poolWeights = PoolWeights.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromPartial(object) {
        const message = createBaseMsgSetPoolWeights();
        message.admin = object.admin ?? "";
        message.poolWeights = object.poolWeights !== undefined && object.poolWeights !== null ? PoolWeights.fromPartial(object.poolWeights) : undefined;
        return message;
    },
    fromAmino(object) {
        return {
            admin: object.admin,
            poolWeights: object?.pool_weights ? PoolWeights.fromAmino(object.pool_weights) : undefined
        };
    },
    toAmino(message) {
        const obj = {};
        obj.admin = message.admin;
        obj.pool_weights = message.poolWeights ? PoolWeights.toAmino(message.poolWeights) : undefined;
        return obj;
    },
    fromAminoMsg(object) {
        return MsgSetPoolWeights.fromAmino(object.value);
    },
    toAminoMsg(message) {
        return {
            type: "osmosis/protorev/set-pool-weights",
            value: MsgSetPoolWeights.toAmino(message)
        };
    },
    fromProtoMsg(message) {
        return MsgSetPoolWeights.decode(message.value);
    },
    toProto(message) {
        return MsgSetPoolWeights.encode(message).finish();
    },
    toProtoMsg(message) {
        return {
            typeUrl: "/osmosis.protorev.v1beta1.MsgSetPoolWeights",
            value: MsgSetPoolWeights.encode(message).finish()
        };
    }
};
function createBaseMsgSetPoolWeightsResponse() {
    return {};
}
export const MsgSetPoolWeightsResponse = {
    typeUrl: "/osmosis.protorev.v1beta1.MsgSetPoolWeightsResponse",
    encode(_, writer = BinaryWriter.create()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMsgSetPoolWeightsResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromPartial(_) {
        const message = createBaseMsgSetPoolWeightsResponse();
        return message;
    },
    fromAmino(_) {
        return {};
    },
    toAmino(_) {
        const obj = {};
        return obj;
    },
    fromAminoMsg(object) {
        return MsgSetPoolWeightsResponse.fromAmino(object.value);
    },
    toAminoMsg(message) {
        return {
            type: "osmosis/protorev/set-pool-weights-response",
            value: MsgSetPoolWeightsResponse.toAmino(message)
        };
    },
    fromProtoMsg(message) {
        return MsgSetPoolWeightsResponse.decode(message.value);
    },
    toProto(message) {
        return MsgSetPoolWeightsResponse.encode(message).finish();
    },
    toProtoMsg(message) {
        return {
            typeUrl: "/osmosis.protorev.v1beta1.MsgSetPoolWeightsResponse",
            value: MsgSetPoolWeightsResponse.encode(message).finish()
        };
    }
};
function createBaseMsgSetMaxPoolPointsPerTx() {
    return {
        admin: "",
        maxPoolPointsPerTx: BigInt(0)
    };
}
export const MsgSetMaxPoolPointsPerTx = {
    typeUrl: "/osmosis.protorev.v1beta1.MsgSetMaxPoolPointsPerTx",
    encode(message, writer = BinaryWriter.create()) {
        if (message.admin !== "") {
            writer.uint32(10).string(message.admin);
        }
        if (message.maxPoolPointsPerTx !== BigInt(0)) {
            writer.uint32(16).uint64(message.maxPoolPointsPerTx);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMsgSetMaxPoolPointsPerTx();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.admin = reader.string();
                    break;
                case 2:
                    message.maxPoolPointsPerTx = reader.uint64();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromPartial(object) {
        const message = createBaseMsgSetMaxPoolPointsPerTx();
        message.admin = object.admin ?? "";
        message.maxPoolPointsPerTx = object.maxPoolPointsPerTx !== undefined && object.maxPoolPointsPerTx !== null ? BigInt(object.maxPoolPointsPerTx.toString()) : BigInt(0);
        return message;
    },
    fromAmino(object) {
        return {
            admin: object.admin,
            maxPoolPointsPerTx: BigInt(object.max_pool_points_per_tx)
        };
    },
    toAmino(message) {
        const obj = {};
        obj.admin = message.admin;
        obj.max_pool_points_per_tx = message.maxPoolPointsPerTx ? message.maxPoolPointsPerTx.toString() : undefined;
        return obj;
    },
    fromAminoMsg(object) {
        return MsgSetMaxPoolPointsPerTx.fromAmino(object.value);
    },
    toAminoMsg(message) {
        return {
            type: "osmosis/protorev/set-max-pool-points-per-tx",
            value: MsgSetMaxPoolPointsPerTx.toAmino(message)
        };
    },
    fromProtoMsg(message) {
        return MsgSetMaxPoolPointsPerTx.decode(message.value);
    },
    toProto(message) {
        return MsgSetMaxPoolPointsPerTx.encode(message).finish();
    },
    toProtoMsg(message) {
        return {
            typeUrl: "/osmosis.protorev.v1beta1.MsgSetMaxPoolPointsPerTx",
            value: MsgSetMaxPoolPointsPerTx.encode(message).finish()
        };
    }
};
function createBaseMsgSetMaxPoolPointsPerTxResponse() {
    return {};
}
export const MsgSetMaxPoolPointsPerTxResponse = {
    typeUrl: "/osmosis.protorev.v1beta1.MsgSetMaxPoolPointsPerTxResponse",
    encode(_, writer = BinaryWriter.create()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMsgSetMaxPoolPointsPerTxResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromPartial(_) {
        const message = createBaseMsgSetMaxPoolPointsPerTxResponse();
        return message;
    },
    fromAmino(_) {
        return {};
    },
    toAmino(_) {
        const obj = {};
        return obj;
    },
    fromAminoMsg(object) {
        return MsgSetMaxPoolPointsPerTxResponse.fromAmino(object.value);
    },
    toAminoMsg(message) {
        return {
            type: "osmosis/protorev/set-max-pool-points-per-tx-response",
            value: MsgSetMaxPoolPointsPerTxResponse.toAmino(message)
        };
    },
    fromProtoMsg(message) {
        return MsgSetMaxPoolPointsPerTxResponse.decode(message.value);
    },
    toProto(message) {
        return MsgSetMaxPoolPointsPerTxResponse.encode(message).finish();
    },
    toProtoMsg(message) {
        return {
            typeUrl: "/osmosis.protorev.v1beta1.MsgSetMaxPoolPointsPerTxResponse",
            value: MsgSetMaxPoolPointsPerTxResponse.encode(message).finish()
        };
    }
};
function createBaseMsgSetMaxPoolPointsPerBlock() {
    return {
        admin: "",
        maxPoolPointsPerBlock: BigInt(0)
    };
}
export const MsgSetMaxPoolPointsPerBlock = {
    typeUrl: "/osmosis.protorev.v1beta1.MsgSetMaxPoolPointsPerBlock",
    encode(message, writer = BinaryWriter.create()) {
        if (message.admin !== "") {
            writer.uint32(10).string(message.admin);
        }
        if (message.maxPoolPointsPerBlock !== BigInt(0)) {
            writer.uint32(16).uint64(message.maxPoolPointsPerBlock);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMsgSetMaxPoolPointsPerBlock();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.admin = reader.string();
                    break;
                case 2:
                    message.maxPoolPointsPerBlock = reader.uint64();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromPartial(object) {
        const message = createBaseMsgSetMaxPoolPointsPerBlock();
        message.admin = object.admin ?? "";
        message.maxPoolPointsPerBlock = object.maxPoolPointsPerBlock !== undefined && object.maxPoolPointsPerBlock !== null ? BigInt(object.maxPoolPointsPerBlock.toString()) : BigInt(0);
        return message;
    },
    fromAmino(object) {
        return {
            admin: object.admin,
            maxPoolPointsPerBlock: BigInt(object.max_pool_points_per_block)
        };
    },
    toAmino(message) {
        const obj = {};
        obj.admin = message.admin;
        obj.max_pool_points_per_block = message.maxPoolPointsPerBlock ? message.maxPoolPointsPerBlock.toString() : undefined;
        return obj;
    },
    fromAminoMsg(object) {
        return MsgSetMaxPoolPointsPerBlock.fromAmino(object.value);
    },
    toAminoMsg(message) {
        return {
            type: "osmosis/protorev/set-max-pool-points-per-block",
            value: MsgSetMaxPoolPointsPerBlock.toAmino(message)
        };
    },
    fromProtoMsg(message) {
        return MsgSetMaxPoolPointsPerBlock.decode(message.value);
    },
    toProto(message) {
        return MsgSetMaxPoolPointsPerBlock.encode(message).finish();
    },
    toProtoMsg(message) {
        return {
            typeUrl: "/osmosis.protorev.v1beta1.MsgSetMaxPoolPointsPerBlock",
            value: MsgSetMaxPoolPointsPerBlock.encode(message).finish()
        };
    }
};
function createBaseMsgSetMaxPoolPointsPerBlockResponse() {
    return {};
}
export const MsgSetMaxPoolPointsPerBlockResponse = {
    typeUrl: "/osmosis.protorev.v1beta1.MsgSetMaxPoolPointsPerBlockResponse",
    encode(_, writer = BinaryWriter.create()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMsgSetMaxPoolPointsPerBlockResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromPartial(_) {
        const message = createBaseMsgSetMaxPoolPointsPerBlockResponse();
        return message;
    },
    fromAmino(_) {
        return {};
    },
    toAmino(_) {
        const obj = {};
        return obj;
    },
    fromAminoMsg(object) {
        return MsgSetMaxPoolPointsPerBlockResponse.fromAmino(object.value);
    },
    toAminoMsg(message) {
        return {
            type: "osmosis/protorev/set-max-pool-points-per-block-response",
            value: MsgSetMaxPoolPointsPerBlockResponse.toAmino(message)
        };
    },
    fromProtoMsg(message) {
        return MsgSetMaxPoolPointsPerBlockResponse.decode(message.value);
    },
    toProto(message) {
        return MsgSetMaxPoolPointsPerBlockResponse.encode(message).finish();
    },
    toProtoMsg(message) {
        return {
            typeUrl: "/osmosis.protorev.v1beta1.MsgSetMaxPoolPointsPerBlockResponse",
            value: MsgSetMaxPoolPointsPerBlockResponse.encode(message).finish()
        };
    }
};
function createBaseMsgSetBaseDenoms() {
    return {
        admin: "",
        baseDenoms: []
    };
}
export const MsgSetBaseDenoms = {
    typeUrl: "/osmosis.protorev.v1beta1.MsgSetBaseDenoms",
    encode(message, writer = BinaryWriter.create()) {
        if (message.admin !== "") {
            writer.uint32(10).string(message.admin);
        }
        for (const v of message.baseDenoms) {
            BaseDenom.encode(v, writer.uint32(18).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMsgSetBaseDenoms();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.admin = reader.string();
                    break;
                case 2:
                    message.baseDenoms.push(BaseDenom.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromPartial(object) {
        const message = createBaseMsgSetBaseDenoms();
        message.admin = object.admin ?? "";
        message.baseDenoms = object.baseDenoms?.map(e => BaseDenom.fromPartial(e)) || [];
        return message;
    },
    fromAmino(object) {
        return {
            admin: object.admin,
            baseDenoms: Array.isArray(object?.base_denoms) ? object.base_denoms.map((e) => BaseDenom.fromAmino(e)) : []
        };
    },
    toAmino(message) {
        const obj = {};
        obj.admin = message.admin;
        if (message.baseDenoms) {
            obj.base_denoms = message.baseDenoms.map(e => e ? BaseDenom.toAmino(e) : undefined);
        }
        else {
            obj.base_denoms = [];
        }
        return obj;
    },
    fromAminoMsg(object) {
        return MsgSetBaseDenoms.fromAmino(object.value);
    },
    toAminoMsg(message) {
        return {
            type: "osmosis/protorev/set-base-denoms",
            value: MsgSetBaseDenoms.toAmino(message)
        };
    },
    fromProtoMsg(message) {
        return MsgSetBaseDenoms.decode(message.value);
    },
    toProto(message) {
        return MsgSetBaseDenoms.encode(message).finish();
    },
    toProtoMsg(message) {
        return {
            typeUrl: "/osmosis.protorev.v1beta1.MsgSetBaseDenoms",
            value: MsgSetBaseDenoms.encode(message).finish()
        };
    }
};
function createBaseMsgSetBaseDenomsResponse() {
    return {};
}
export const MsgSetBaseDenomsResponse = {
    typeUrl: "/osmosis.protorev.v1beta1.MsgSetBaseDenomsResponse",
    encode(_, writer = BinaryWriter.create()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMsgSetBaseDenomsResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromPartial(_) {
        const message = createBaseMsgSetBaseDenomsResponse();
        return message;
    },
    fromAmino(_) {
        return {};
    },
    toAmino(_) {
        const obj = {};
        return obj;
    },
    fromAminoMsg(object) {
        return MsgSetBaseDenomsResponse.fromAmino(object.value);
    },
    toAminoMsg(message) {
        return {
            type: "osmosis/protorev/set-base-denoms-response",
            value: MsgSetBaseDenomsResponse.toAmino(message)
        };
    },
    fromProtoMsg(message) {
        return MsgSetBaseDenomsResponse.decode(message.value);
    },
    toProto(message) {
        return MsgSetBaseDenomsResponse.encode(message).finish();
    },
    toProtoMsg(message) {
        return {
            typeUrl: "/osmosis.protorev.v1beta1.MsgSetBaseDenomsResponse",
            value: MsgSetBaseDenomsResponse.encode(message).finish()
        };
    }
};
//# sourceMappingURL=tx.js.map
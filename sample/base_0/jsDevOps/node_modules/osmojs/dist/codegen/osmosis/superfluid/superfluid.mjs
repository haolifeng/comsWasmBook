import { Coin } from "../../cosmos/base/v1beta1/coin";
import { SyntheticLock } from "../lockup/lock";
import { BinaryReader, BinaryWriter } from "../../binary";
import { isSet } from "../../helpers";
import { Decimal } from "@cosmjs/math";
/**
 * SuperfluidAssetType indicates whether the superfluid asset is
 * a native token, lp share of a pool, or concentrated share of a pool
 */
export var SuperfluidAssetType;
(function (SuperfluidAssetType) {
    SuperfluidAssetType[SuperfluidAssetType["SuperfluidAssetTypeNative"] = 0] = "SuperfluidAssetTypeNative";
    SuperfluidAssetType[SuperfluidAssetType["SuperfluidAssetTypeLPShare"] = 1] = "SuperfluidAssetTypeLPShare";
    SuperfluidAssetType[SuperfluidAssetType["SuperfluidAssetTypeConcentratedShare"] = 2] = "SuperfluidAssetTypeConcentratedShare";
    SuperfluidAssetType[SuperfluidAssetType["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
})(SuperfluidAssetType || (SuperfluidAssetType = {}));
export const SuperfluidAssetTypeSDKType = SuperfluidAssetType;
export const SuperfluidAssetTypeAmino = SuperfluidAssetType;
export function superfluidAssetTypeFromJSON(object) {
    switch (object) {
        case 0:
        case "SuperfluidAssetTypeNative":
            return SuperfluidAssetType.SuperfluidAssetTypeNative;
        case 1:
        case "SuperfluidAssetTypeLPShare":
            return SuperfluidAssetType.SuperfluidAssetTypeLPShare;
        case 2:
        case "SuperfluidAssetTypeConcentratedShare":
            return SuperfluidAssetType.SuperfluidAssetTypeConcentratedShare;
        case -1:
        case "UNRECOGNIZED":
        default:
            return SuperfluidAssetType.UNRECOGNIZED;
    }
}
export function superfluidAssetTypeToJSON(object) {
    switch (object) {
        case SuperfluidAssetType.SuperfluidAssetTypeNative:
            return "SuperfluidAssetTypeNative";
        case SuperfluidAssetType.SuperfluidAssetTypeLPShare:
            return "SuperfluidAssetTypeLPShare";
        case SuperfluidAssetType.SuperfluidAssetTypeConcentratedShare:
            return "SuperfluidAssetTypeConcentratedShare";
        case SuperfluidAssetType.UNRECOGNIZED:
        default:
            return "UNRECOGNIZED";
    }
}
function createBaseSuperfluidAsset() {
    return {
        denom: "",
        assetType: 0
    };
}
export const SuperfluidAsset = {
    typeUrl: "/osmosis.superfluid.SuperfluidAsset",
    encode(message, writer = BinaryWriter.create()) {
        if (message.denom !== "") {
            writer.uint32(10).string(message.denom);
        }
        if (message.assetType !== 0) {
            writer.uint32(16).int32(message.assetType);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseSuperfluidAsset();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.denom = reader.string();
                    break;
                case 2:
                    message.assetType = reader.int32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromPartial(object) {
        const message = createBaseSuperfluidAsset();
        message.denom = object.denom ?? "";
        message.assetType = object.assetType ?? 0;
        return message;
    },
    fromAmino(object) {
        return {
            denom: object.denom,
            assetType: isSet(object.asset_type) ? superfluidAssetTypeFromJSON(object.asset_type) : -1
        };
    },
    toAmino(message) {
        const obj = {};
        obj.denom = message.denom;
        obj.asset_type = message.assetType;
        return obj;
    },
    fromAminoMsg(object) {
        return SuperfluidAsset.fromAmino(object.value);
    },
    toAminoMsg(message) {
        return {
            type: "osmosis/superfluid-asset",
            value: SuperfluidAsset.toAmino(message)
        };
    },
    fromProtoMsg(message) {
        return SuperfluidAsset.decode(message.value);
    },
    toProto(message) {
        return SuperfluidAsset.encode(message).finish();
    },
    toProtoMsg(message) {
        return {
            typeUrl: "/osmosis.superfluid.SuperfluidAsset",
            value: SuperfluidAsset.encode(message).finish()
        };
    }
};
function createBaseSuperfluidIntermediaryAccount() {
    return {
        denom: "",
        valAddr: "",
        gaugeId: BigInt(0)
    };
}
export const SuperfluidIntermediaryAccount = {
    typeUrl: "/osmosis.superfluid.SuperfluidIntermediaryAccount",
    encode(message, writer = BinaryWriter.create()) {
        if (message.denom !== "") {
            writer.uint32(10).string(message.denom);
        }
        if (message.valAddr !== "") {
            writer.uint32(18).string(message.valAddr);
        }
        if (message.gaugeId !== BigInt(0)) {
            writer.uint32(24).uint64(message.gaugeId);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseSuperfluidIntermediaryAccount();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.denom = reader.string();
                    break;
                case 2:
                    message.valAddr = reader.string();
                    break;
                case 3:
                    message.gaugeId = reader.uint64();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromPartial(object) {
        const message = createBaseSuperfluidIntermediaryAccount();
        message.denom = object.denom ?? "";
        message.valAddr = object.valAddr ?? "";
        message.gaugeId = object.gaugeId !== undefined && object.gaugeId !== null ? BigInt(object.gaugeId.toString()) : BigInt(0);
        return message;
    },
    fromAmino(object) {
        return {
            denom: object.denom,
            valAddr: object.val_addr,
            gaugeId: BigInt(object.gauge_id)
        };
    },
    toAmino(message) {
        const obj = {};
        obj.denom = message.denom;
        obj.val_addr = message.valAddr;
        obj.gauge_id = message.gaugeId ? message.gaugeId.toString() : undefined;
        return obj;
    },
    fromAminoMsg(object) {
        return SuperfluidIntermediaryAccount.fromAmino(object.value);
    },
    toAminoMsg(message) {
        return {
            type: "osmosis/superfluid-intermediary-account",
            value: SuperfluidIntermediaryAccount.toAmino(message)
        };
    },
    fromProtoMsg(message) {
        return SuperfluidIntermediaryAccount.decode(message.value);
    },
    toProto(message) {
        return SuperfluidIntermediaryAccount.encode(message).finish();
    },
    toProtoMsg(message) {
        return {
            typeUrl: "/osmosis.superfluid.SuperfluidIntermediaryAccount",
            value: SuperfluidIntermediaryAccount.encode(message).finish()
        };
    }
};
function createBaseOsmoEquivalentMultiplierRecord() {
    return {
        epochNumber: BigInt(0),
        denom: "",
        multiplier: ""
    };
}
export const OsmoEquivalentMultiplierRecord = {
    typeUrl: "/osmosis.superfluid.OsmoEquivalentMultiplierRecord",
    encode(message, writer = BinaryWriter.create()) {
        if (message.epochNumber !== BigInt(0)) {
            writer.uint32(8).int64(message.epochNumber);
        }
        if (message.denom !== "") {
            writer.uint32(18).string(message.denom);
        }
        if (message.multiplier !== "") {
            writer.uint32(26).string(Decimal.fromUserInput(message.multiplier, 18).atomics);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseOsmoEquivalentMultiplierRecord();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.epochNumber = reader.int64();
                    break;
                case 2:
                    message.denom = reader.string();
                    break;
                case 3:
                    message.multiplier = Decimal.fromAtomics(reader.string(), 18).toString();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromPartial(object) {
        const message = createBaseOsmoEquivalentMultiplierRecord();
        message.epochNumber = object.epochNumber !== undefined && object.epochNumber !== null ? BigInt(object.epochNumber.toString()) : BigInt(0);
        message.denom = object.denom ?? "";
        message.multiplier = object.multiplier ?? "";
        return message;
    },
    fromAmino(object) {
        return {
            epochNumber: BigInt(object.epoch_number),
            denom: object.denom,
            multiplier: object.multiplier
        };
    },
    toAmino(message) {
        const obj = {};
        obj.epoch_number = message.epochNumber ? message.epochNumber.toString() : undefined;
        obj.denom = message.denom;
        obj.multiplier = message.multiplier;
        return obj;
    },
    fromAminoMsg(object) {
        return OsmoEquivalentMultiplierRecord.fromAmino(object.value);
    },
    toAminoMsg(message) {
        return {
            type: "osmosis/osmo-equivalent-multiplier-record",
            value: OsmoEquivalentMultiplierRecord.toAmino(message)
        };
    },
    fromProtoMsg(message) {
        return OsmoEquivalentMultiplierRecord.decode(message.value);
    },
    toProto(message) {
        return OsmoEquivalentMultiplierRecord.encode(message).finish();
    },
    toProtoMsg(message) {
        return {
            typeUrl: "/osmosis.superfluid.OsmoEquivalentMultiplierRecord",
            value: OsmoEquivalentMultiplierRecord.encode(message).finish()
        };
    }
};
function createBaseSuperfluidDelegationRecord() {
    return {
        delegatorAddress: "",
        validatorAddress: "",
        delegationAmount: undefined,
        equivalentStakedAmount: undefined
    };
}
export const SuperfluidDelegationRecord = {
    typeUrl: "/osmosis.superfluid.SuperfluidDelegationRecord",
    encode(message, writer = BinaryWriter.create()) {
        if (message.delegatorAddress !== "") {
            writer.uint32(10).string(message.delegatorAddress);
        }
        if (message.validatorAddress !== "") {
            writer.uint32(18).string(message.validatorAddress);
        }
        if (message.delegationAmount !== undefined) {
            Coin.encode(message.delegationAmount, writer.uint32(26).fork()).ldelim();
        }
        if (message.equivalentStakedAmount !== undefined) {
            Coin.encode(message.equivalentStakedAmount, writer.uint32(34).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseSuperfluidDelegationRecord();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.delegatorAddress = reader.string();
                    break;
                case 2:
                    message.validatorAddress = reader.string();
                    break;
                case 3:
                    message.delegationAmount = Coin.decode(reader, reader.uint32());
                    break;
                case 4:
                    message.equivalentStakedAmount = Coin.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromPartial(object) {
        const message = createBaseSuperfluidDelegationRecord();
        message.delegatorAddress = object.delegatorAddress ?? "";
        message.validatorAddress = object.validatorAddress ?? "";
        message.delegationAmount = object.delegationAmount !== undefined && object.delegationAmount !== null ? Coin.fromPartial(object.delegationAmount) : undefined;
        message.equivalentStakedAmount = object.equivalentStakedAmount !== undefined && object.equivalentStakedAmount !== null ? Coin.fromPartial(object.equivalentStakedAmount) : undefined;
        return message;
    },
    fromAmino(object) {
        return {
            delegatorAddress: object.delegator_address,
            validatorAddress: object.validator_address,
            delegationAmount: object?.delegation_amount ? Coin.fromAmino(object.delegation_amount) : undefined,
            equivalentStakedAmount: object?.equivalent_staked_amount ? Coin.fromAmino(object.equivalent_staked_amount) : undefined
        };
    },
    toAmino(message) {
        const obj = {};
        obj.delegator_address = message.delegatorAddress;
        obj.validator_address = message.validatorAddress;
        obj.delegation_amount = message.delegationAmount ? Coin.toAmino(message.delegationAmount) : undefined;
        obj.equivalent_staked_amount = message.equivalentStakedAmount ? Coin.toAmino(message.equivalentStakedAmount) : undefined;
        return obj;
    },
    fromAminoMsg(object) {
        return SuperfluidDelegationRecord.fromAmino(object.value);
    },
    toAminoMsg(message) {
        return {
            type: "osmosis/superfluid-delegation-record",
            value: SuperfluidDelegationRecord.toAmino(message)
        };
    },
    fromProtoMsg(message) {
        return SuperfluidDelegationRecord.decode(message.value);
    },
    toProto(message) {
        return SuperfluidDelegationRecord.encode(message).finish();
    },
    toProtoMsg(message) {
        return {
            typeUrl: "/osmosis.superfluid.SuperfluidDelegationRecord",
            value: SuperfluidDelegationRecord.encode(message).finish()
        };
    }
};
function createBaseLockIdIntermediaryAccountConnection() {
    return {
        lockId: BigInt(0),
        intermediaryAccount: ""
    };
}
export const LockIdIntermediaryAccountConnection = {
    typeUrl: "/osmosis.superfluid.LockIdIntermediaryAccountConnection",
    encode(message, writer = BinaryWriter.create()) {
        if (message.lockId !== BigInt(0)) {
            writer.uint32(8).uint64(message.lockId);
        }
        if (message.intermediaryAccount !== "") {
            writer.uint32(18).string(message.intermediaryAccount);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseLockIdIntermediaryAccountConnection();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.lockId = reader.uint64();
                    break;
                case 2:
                    message.intermediaryAccount = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromPartial(object) {
        const message = createBaseLockIdIntermediaryAccountConnection();
        message.lockId = object.lockId !== undefined && object.lockId !== null ? BigInt(object.lockId.toString()) : BigInt(0);
        message.intermediaryAccount = object.intermediaryAccount ?? "";
        return message;
    },
    fromAmino(object) {
        return {
            lockId: BigInt(object.lock_id),
            intermediaryAccount: object.intermediary_account
        };
    },
    toAmino(message) {
        const obj = {};
        obj.lock_id = message.lockId ? message.lockId.toString() : undefined;
        obj.intermediary_account = message.intermediaryAccount;
        return obj;
    },
    fromAminoMsg(object) {
        return LockIdIntermediaryAccountConnection.fromAmino(object.value);
    },
    toAminoMsg(message) {
        return {
            type: "osmosis/lock-id-intermediary-account-connection",
            value: LockIdIntermediaryAccountConnection.toAmino(message)
        };
    },
    fromProtoMsg(message) {
        return LockIdIntermediaryAccountConnection.decode(message.value);
    },
    toProto(message) {
        return LockIdIntermediaryAccountConnection.encode(message).finish();
    },
    toProtoMsg(message) {
        return {
            typeUrl: "/osmosis.superfluid.LockIdIntermediaryAccountConnection",
            value: LockIdIntermediaryAccountConnection.encode(message).finish()
        };
    }
};
function createBaseUnpoolWhitelistedPools() {
    return {
        ids: []
    };
}
export const UnpoolWhitelistedPools = {
    typeUrl: "/osmosis.superfluid.UnpoolWhitelistedPools",
    encode(message, writer = BinaryWriter.create()) {
        writer.uint32(10).fork();
        for (const v of message.ids) {
            writer.uint64(v);
        }
        writer.ldelim();
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseUnpoolWhitelistedPools();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if ((tag & 7) === 2) {
                        const end2 = reader.uint32() + reader.pos;
                        while (reader.pos < end2) {
                            message.ids.push(reader.uint64());
                        }
                    }
                    else {
                        message.ids.push(reader.uint64());
                    }
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromPartial(object) {
        const message = createBaseUnpoolWhitelistedPools();
        message.ids = object.ids?.map(e => BigInt(e.toString())) || [];
        return message;
    },
    fromAmino(object) {
        return {
            ids: Array.isArray(object?.ids) ? object.ids.map((e) => BigInt(e)) : []
        };
    },
    toAmino(message) {
        const obj = {};
        if (message.ids) {
            obj.ids = message.ids.map(e => e.toString());
        }
        else {
            obj.ids = [];
        }
        return obj;
    },
    fromAminoMsg(object) {
        return UnpoolWhitelistedPools.fromAmino(object.value);
    },
    toAminoMsg(message) {
        return {
            type: "osmosis/unpool-whitelisted-pools",
            value: UnpoolWhitelistedPools.toAmino(message)
        };
    },
    fromProtoMsg(message) {
        return UnpoolWhitelistedPools.decode(message.value);
    },
    toProto(message) {
        return UnpoolWhitelistedPools.encode(message).finish();
    },
    toProtoMsg(message) {
        return {
            typeUrl: "/osmosis.superfluid.UnpoolWhitelistedPools",
            value: UnpoolWhitelistedPools.encode(message).finish()
        };
    }
};
function createBaseConcentratedPoolUserPositionRecord() {
    return {
        validatorAddress: "",
        positionId: BigInt(0),
        lockId: BigInt(0),
        syntheticLock: SyntheticLock.fromPartial({}),
        delegationAmount: undefined,
        equivalentStakedAmount: undefined
    };
}
export const ConcentratedPoolUserPositionRecord = {
    typeUrl: "/osmosis.superfluid.ConcentratedPoolUserPositionRecord",
    encode(message, writer = BinaryWriter.create()) {
        if (message.validatorAddress !== "") {
            writer.uint32(10).string(message.validatorAddress);
        }
        if (message.positionId !== BigInt(0)) {
            writer.uint32(16).uint64(message.positionId);
        }
        if (message.lockId !== BigInt(0)) {
            writer.uint32(24).uint64(message.lockId);
        }
        if (message.syntheticLock !== undefined) {
            SyntheticLock.encode(message.syntheticLock, writer.uint32(34).fork()).ldelim();
        }
        if (message.delegationAmount !== undefined) {
            Coin.encode(message.delegationAmount, writer.uint32(42).fork()).ldelim();
        }
        if (message.equivalentStakedAmount !== undefined) {
            Coin.encode(message.equivalentStakedAmount, writer.uint32(50).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseConcentratedPoolUserPositionRecord();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.validatorAddress = reader.string();
                    break;
                case 2:
                    message.positionId = reader.uint64();
                    break;
                case 3:
                    message.lockId = reader.uint64();
                    break;
                case 4:
                    message.syntheticLock = SyntheticLock.decode(reader, reader.uint32());
                    break;
                case 5:
                    message.delegationAmount = Coin.decode(reader, reader.uint32());
                    break;
                case 6:
                    message.equivalentStakedAmount = Coin.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromPartial(object) {
        const message = createBaseConcentratedPoolUserPositionRecord();
        message.validatorAddress = object.validatorAddress ?? "";
        message.positionId = object.positionId !== undefined && object.positionId !== null ? BigInt(object.positionId.toString()) : BigInt(0);
        message.lockId = object.lockId !== undefined && object.lockId !== null ? BigInt(object.lockId.toString()) : BigInt(0);
        message.syntheticLock = object.syntheticLock !== undefined && object.syntheticLock !== null ? SyntheticLock.fromPartial(object.syntheticLock) : undefined;
        message.delegationAmount = object.delegationAmount !== undefined && object.delegationAmount !== null ? Coin.fromPartial(object.delegationAmount) : undefined;
        message.equivalentStakedAmount = object.equivalentStakedAmount !== undefined && object.equivalentStakedAmount !== null ? Coin.fromPartial(object.equivalentStakedAmount) : undefined;
        return message;
    },
    fromAmino(object) {
        return {
            validatorAddress: object.validator_address,
            positionId: BigInt(object.position_id),
            lockId: BigInt(object.lock_id),
            syntheticLock: object?.synthetic_lock ? SyntheticLock.fromAmino(object.synthetic_lock) : undefined,
            delegationAmount: object?.delegation_amount ? Coin.fromAmino(object.delegation_amount) : undefined,
            equivalentStakedAmount: object?.equivalent_staked_amount ? Coin.fromAmino(object.equivalent_staked_amount) : undefined
        };
    },
    toAmino(message) {
        const obj = {};
        obj.validator_address = message.validatorAddress;
        obj.position_id = message.positionId ? message.positionId.toString() : undefined;
        obj.lock_id = message.lockId ? message.lockId.toString() : undefined;
        obj.synthetic_lock = message.syntheticLock ? SyntheticLock.toAmino(message.syntheticLock) : undefined;
        obj.delegation_amount = message.delegationAmount ? Coin.toAmino(message.delegationAmount) : undefined;
        obj.equivalent_staked_amount = message.equivalentStakedAmount ? Coin.toAmino(message.equivalentStakedAmount) : undefined;
        return obj;
    },
    fromAminoMsg(object) {
        return ConcentratedPoolUserPositionRecord.fromAmino(object.value);
    },
    toAminoMsg(message) {
        return {
            type: "osmosis/concentrated-pool-user-position-record",
            value: ConcentratedPoolUserPositionRecord.toAmino(message)
        };
    },
    fromProtoMsg(message) {
        return ConcentratedPoolUserPositionRecord.decode(message.value);
    },
    toProto(message) {
        return ConcentratedPoolUserPositionRecord.encode(message).finish();
    },
    toProtoMsg(message) {
        return {
            typeUrl: "/osmosis.superfluid.ConcentratedPoolUserPositionRecord",
            value: ConcentratedPoolUserPositionRecord.encode(message).finish()
        };
    }
};
//# sourceMappingURL=superfluid.js.map
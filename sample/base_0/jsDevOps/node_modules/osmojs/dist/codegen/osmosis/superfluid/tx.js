"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.MsgAddToConcentratedLiquiditySuperfluidPositionResponse = exports.MsgAddToConcentratedLiquiditySuperfluidPosition = exports.MsgUnlockAndMigrateSharesToFullRangeConcentratedPositionResponse = exports.MsgUnlockAndMigrateSharesToFullRangeConcentratedPosition = exports.MsgUnPoolWhitelistedPoolResponse = exports.MsgUnPoolWhitelistedPool = exports.MsgCreateFullRangePositionAndSuperfluidDelegateResponse = exports.MsgCreateFullRangePositionAndSuperfluidDelegate = exports.MsgLockAndSuperfluidDelegateResponse = exports.MsgLockAndSuperfluidDelegate = exports.MsgSuperfluidUndelegateAndUnbondLockResponse = exports.MsgSuperfluidUndelegateAndUnbondLock = exports.MsgSuperfluidUnbondLockResponse = exports.MsgSuperfluidUnbondLock = exports.MsgSuperfluidUndelegateResponse = exports.MsgSuperfluidUndelegate = exports.MsgSuperfluidDelegateResponse = exports.MsgSuperfluidDelegate = void 0;
const coin_1 = require("../../cosmos/base/v1beta1/coin");
const timestamp_1 = require("../../google/protobuf/timestamp");
const binary_1 = require("../../binary");
const math_1 = require("@cosmjs/math");
const helpers_1 = require("../../helpers");
function createBaseMsgSuperfluidDelegate() {
    return {
        sender: "",
        lockId: BigInt(0),
        valAddr: ""
    };
}
exports.MsgSuperfluidDelegate = {
    typeUrl: "/osmosis.superfluid.MsgSuperfluidDelegate",
    encode(message, writer = binary_1.BinaryWriter.create()) {
        if (message.sender !== "") {
            writer.uint32(10).string(message.sender);
        }
        if (message.lockId !== BigInt(0)) {
            writer.uint32(16).uint64(message.lockId);
        }
        if (message.valAddr !== "") {
            writer.uint32(26).string(message.valAddr);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof binary_1.BinaryReader ? input : new binary_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMsgSuperfluidDelegate();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.sender = reader.string();
                    break;
                case 2:
                    message.lockId = reader.uint64();
                    break;
                case 3:
                    message.valAddr = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromPartial(object) {
        const message = createBaseMsgSuperfluidDelegate();
        message.sender = object.sender ?? "";
        message.lockId = object.lockId !== undefined && object.lockId !== null ? BigInt(object.lockId.toString()) : BigInt(0);
        message.valAddr = object.valAddr ?? "";
        return message;
    },
    fromAmino(object) {
        return {
            sender: object.sender,
            lockId: BigInt(object.lock_id),
            valAddr: object.val_addr
        };
    },
    toAmino(message) {
        const obj = {};
        obj.sender = message.sender;
        obj.lock_id = message.lockId ? message.lockId.toString() : undefined;
        obj.val_addr = message.valAddr;
        return obj;
    },
    fromAminoMsg(object) {
        return exports.MsgSuperfluidDelegate.fromAmino(object.value);
    },
    toAminoMsg(message) {
        return {
            type: "osmosis/superfluid-delegate",
            value: exports.MsgSuperfluidDelegate.toAmino(message)
        };
    },
    fromProtoMsg(message) {
        return exports.MsgSuperfluidDelegate.decode(message.value);
    },
    toProto(message) {
        return exports.MsgSuperfluidDelegate.encode(message).finish();
    },
    toProtoMsg(message) {
        return {
            typeUrl: "/osmosis.superfluid.MsgSuperfluidDelegate",
            value: exports.MsgSuperfluidDelegate.encode(message).finish()
        };
    }
};
function createBaseMsgSuperfluidDelegateResponse() {
    return {};
}
exports.MsgSuperfluidDelegateResponse = {
    typeUrl: "/osmosis.superfluid.MsgSuperfluidDelegateResponse",
    encode(_, writer = binary_1.BinaryWriter.create()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof binary_1.BinaryReader ? input : new binary_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMsgSuperfluidDelegateResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromPartial(_) {
        const message = createBaseMsgSuperfluidDelegateResponse();
        return message;
    },
    fromAmino(_) {
        return {};
    },
    toAmino(_) {
        const obj = {};
        return obj;
    },
    fromAminoMsg(object) {
        return exports.MsgSuperfluidDelegateResponse.fromAmino(object.value);
    },
    toAminoMsg(message) {
        return {
            type: "osmosis/superfluid-delegate-response",
            value: exports.MsgSuperfluidDelegateResponse.toAmino(message)
        };
    },
    fromProtoMsg(message) {
        return exports.MsgSuperfluidDelegateResponse.decode(message.value);
    },
    toProto(message) {
        return exports.MsgSuperfluidDelegateResponse.encode(message).finish();
    },
    toProtoMsg(message) {
        return {
            typeUrl: "/osmosis.superfluid.MsgSuperfluidDelegateResponse",
            value: exports.MsgSuperfluidDelegateResponse.encode(message).finish()
        };
    }
};
function createBaseMsgSuperfluidUndelegate() {
    return {
        sender: "",
        lockId: BigInt(0)
    };
}
exports.MsgSuperfluidUndelegate = {
    typeUrl: "/osmosis.superfluid.MsgSuperfluidUndelegate",
    encode(message, writer = binary_1.BinaryWriter.create()) {
        if (message.sender !== "") {
            writer.uint32(10).string(message.sender);
        }
        if (message.lockId !== BigInt(0)) {
            writer.uint32(16).uint64(message.lockId);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof binary_1.BinaryReader ? input : new binary_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMsgSuperfluidUndelegate();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.sender = reader.string();
                    break;
                case 2:
                    message.lockId = reader.uint64();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromPartial(object) {
        const message = createBaseMsgSuperfluidUndelegate();
        message.sender = object.sender ?? "";
        message.lockId = object.lockId !== undefined && object.lockId !== null ? BigInt(object.lockId.toString()) : BigInt(0);
        return message;
    },
    fromAmino(object) {
        return {
            sender: object.sender,
            lockId: BigInt(object.lock_id)
        };
    },
    toAmino(message) {
        const obj = {};
        obj.sender = message.sender;
        obj.lock_id = message.lockId ? message.lockId.toString() : undefined;
        return obj;
    },
    fromAminoMsg(object) {
        return exports.MsgSuperfluidUndelegate.fromAmino(object.value);
    },
    toAminoMsg(message) {
        return {
            type: "osmosis/superfluid-undelegate",
            value: exports.MsgSuperfluidUndelegate.toAmino(message)
        };
    },
    fromProtoMsg(message) {
        return exports.MsgSuperfluidUndelegate.decode(message.value);
    },
    toProto(message) {
        return exports.MsgSuperfluidUndelegate.encode(message).finish();
    },
    toProtoMsg(message) {
        return {
            typeUrl: "/osmosis.superfluid.MsgSuperfluidUndelegate",
            value: exports.MsgSuperfluidUndelegate.encode(message).finish()
        };
    }
};
function createBaseMsgSuperfluidUndelegateResponse() {
    return {};
}
exports.MsgSuperfluidUndelegateResponse = {
    typeUrl: "/osmosis.superfluid.MsgSuperfluidUndelegateResponse",
    encode(_, writer = binary_1.BinaryWriter.create()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof binary_1.BinaryReader ? input : new binary_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMsgSuperfluidUndelegateResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromPartial(_) {
        const message = createBaseMsgSuperfluidUndelegateResponse();
        return message;
    },
    fromAmino(_) {
        return {};
    },
    toAmino(_) {
        const obj = {};
        return obj;
    },
    fromAminoMsg(object) {
        return exports.MsgSuperfluidUndelegateResponse.fromAmino(object.value);
    },
    toAminoMsg(message) {
        return {
            type: "osmosis/superfluid-undelegate-response",
            value: exports.MsgSuperfluidUndelegateResponse.toAmino(message)
        };
    },
    fromProtoMsg(message) {
        return exports.MsgSuperfluidUndelegateResponse.decode(message.value);
    },
    toProto(message) {
        return exports.MsgSuperfluidUndelegateResponse.encode(message).finish();
    },
    toProtoMsg(message) {
        return {
            typeUrl: "/osmosis.superfluid.MsgSuperfluidUndelegateResponse",
            value: exports.MsgSuperfluidUndelegateResponse.encode(message).finish()
        };
    }
};
function createBaseMsgSuperfluidUnbondLock() {
    return {
        sender: "",
        lockId: BigInt(0)
    };
}
exports.MsgSuperfluidUnbondLock = {
    typeUrl: "/osmosis.superfluid.MsgSuperfluidUnbondLock",
    encode(message, writer = binary_1.BinaryWriter.create()) {
        if (message.sender !== "") {
            writer.uint32(10).string(message.sender);
        }
        if (message.lockId !== BigInt(0)) {
            writer.uint32(16).uint64(message.lockId);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof binary_1.BinaryReader ? input : new binary_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMsgSuperfluidUnbondLock();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.sender = reader.string();
                    break;
                case 2:
                    message.lockId = reader.uint64();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromPartial(object) {
        const message = createBaseMsgSuperfluidUnbondLock();
        message.sender = object.sender ?? "";
        message.lockId = object.lockId !== undefined && object.lockId !== null ? BigInt(object.lockId.toString()) : BigInt(0);
        return message;
    },
    fromAmino(object) {
        return {
            sender: object.sender,
            lockId: BigInt(object.lock_id)
        };
    },
    toAmino(message) {
        const obj = {};
        obj.sender = message.sender;
        obj.lock_id = message.lockId ? message.lockId.toString() : undefined;
        return obj;
    },
    fromAminoMsg(object) {
        return exports.MsgSuperfluidUnbondLock.fromAmino(object.value);
    },
    toAminoMsg(message) {
        return {
            type: "osmosis/superfluid-unbond-lock",
            value: exports.MsgSuperfluidUnbondLock.toAmino(message)
        };
    },
    fromProtoMsg(message) {
        return exports.MsgSuperfluidUnbondLock.decode(message.value);
    },
    toProto(message) {
        return exports.MsgSuperfluidUnbondLock.encode(message).finish();
    },
    toProtoMsg(message) {
        return {
            typeUrl: "/osmosis.superfluid.MsgSuperfluidUnbondLock",
            value: exports.MsgSuperfluidUnbondLock.encode(message).finish()
        };
    }
};
function createBaseMsgSuperfluidUnbondLockResponse() {
    return {};
}
exports.MsgSuperfluidUnbondLockResponse = {
    typeUrl: "/osmosis.superfluid.MsgSuperfluidUnbondLockResponse",
    encode(_, writer = binary_1.BinaryWriter.create()) {
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof binary_1.BinaryReader ? input : new binary_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMsgSuperfluidUnbondLockResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromPartial(_) {
        const message = createBaseMsgSuperfluidUnbondLockResponse();
        return message;
    },
    fromAmino(_) {
        return {};
    },
    toAmino(_) {
        const obj = {};
        return obj;
    },
    fromAminoMsg(object) {
        return exports.MsgSuperfluidUnbondLockResponse.fromAmino(object.value);
    },
    toAminoMsg(message) {
        return {
            type: "osmosis/superfluid-unbond-lock-response",
            value: exports.MsgSuperfluidUnbondLockResponse.toAmino(message)
        };
    },
    fromProtoMsg(message) {
        return exports.MsgSuperfluidUnbondLockResponse.decode(message.value);
    },
    toProto(message) {
        return exports.MsgSuperfluidUnbondLockResponse.encode(message).finish();
    },
    toProtoMsg(message) {
        return {
            typeUrl: "/osmosis.superfluid.MsgSuperfluidUnbondLockResponse",
            value: exports.MsgSuperfluidUnbondLockResponse.encode(message).finish()
        };
    }
};
function createBaseMsgSuperfluidUndelegateAndUnbondLock() {
    return {
        sender: "",
        lockId: BigInt(0),
        coin: undefined
    };
}
exports.MsgSuperfluidUndelegateAndUnbondLock = {
    typeUrl: "/osmosis.superfluid.MsgSuperfluidUndelegateAndUnbondLock",
    encode(message, writer = binary_1.BinaryWriter.create()) {
        if (message.sender !== "") {
            writer.uint32(10).string(message.sender);
        }
        if (message.lockId !== BigInt(0)) {
            writer.uint32(16).uint64(message.lockId);
        }
        if (message.coin !== undefined) {
            coin_1.Coin.encode(message.coin, writer.uint32(26).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof binary_1.BinaryReader ? input : new binary_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMsgSuperfluidUndelegateAndUnbondLock();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.sender = reader.string();
                    break;
                case 2:
                    message.lockId = reader.uint64();
                    break;
                case 3:
                    message.coin = coin_1.Coin.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromPartial(object) {
        const message = createBaseMsgSuperfluidUndelegateAndUnbondLock();
        message.sender = object.sender ?? "";
        message.lockId = object.lockId !== undefined && object.lockId !== null ? BigInt(object.lockId.toString()) : BigInt(0);
        message.coin = object.coin !== undefined && object.coin !== null ? coin_1.Coin.fromPartial(object.coin) : undefined;
        return message;
    },
    fromAmino(object) {
        return {
            sender: object.sender,
            lockId: BigInt(object.lock_id),
            coin: object?.coin ? coin_1.Coin.fromAmino(object.coin) : undefined
        };
    },
    toAmino(message) {
        const obj = {};
        obj.sender = message.sender;
        obj.lock_id = message.lockId ? message.lockId.toString() : undefined;
        obj.coin = message.coin ? coin_1.Coin.toAmino(message.coin) : undefined;
        return obj;
    },
    fromAminoMsg(object) {
        return exports.MsgSuperfluidUndelegateAndUnbondLock.fromAmino(object.value);
    },
    toAminoMsg(message) {
        return {
            type: "osmosis/superfluid-undelegate-and-unbond-lock",
            value: exports.MsgSuperfluidUndelegateAndUnbondLock.toAmino(message)
        };
    },
    fromProtoMsg(message) {
        return exports.MsgSuperfluidUndelegateAndUnbondLock.decode(message.value);
    },
    toProto(message) {
        return exports.MsgSuperfluidUndelegateAndUnbondLock.encode(message).finish();
    },
    toProtoMsg(message) {
        return {
            typeUrl: "/osmosis.superfluid.MsgSuperfluidUndelegateAndUnbondLock",
            value: exports.MsgSuperfluidUndelegateAndUnbondLock.encode(message).finish()
        };
    }
};
function createBaseMsgSuperfluidUndelegateAndUnbondLockResponse() {
    return {
        lockId: BigInt(0)
    };
}
exports.MsgSuperfluidUndelegateAndUnbondLockResponse = {
    typeUrl: "/osmosis.superfluid.MsgSuperfluidUndelegateAndUnbondLockResponse",
    encode(message, writer = binary_1.BinaryWriter.create()) {
        if (message.lockId !== BigInt(0)) {
            writer.uint32(8).uint64(message.lockId);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof binary_1.BinaryReader ? input : new binary_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMsgSuperfluidUndelegateAndUnbondLockResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.lockId = reader.uint64();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromPartial(object) {
        const message = createBaseMsgSuperfluidUndelegateAndUnbondLockResponse();
        message.lockId = object.lockId !== undefined && object.lockId !== null ? BigInt(object.lockId.toString()) : BigInt(0);
        return message;
    },
    fromAmino(object) {
        return {
            lockId: BigInt(object.lock_id)
        };
    },
    toAmino(message) {
        const obj = {};
        obj.lock_id = message.lockId ? message.lockId.toString() : undefined;
        return obj;
    },
    fromAminoMsg(object) {
        return exports.MsgSuperfluidUndelegateAndUnbondLockResponse.fromAmino(object.value);
    },
    toAminoMsg(message) {
        return {
            type: "osmosis/superfluid-undelegate-and-unbond-lock-response",
            value: exports.MsgSuperfluidUndelegateAndUnbondLockResponse.toAmino(message)
        };
    },
    fromProtoMsg(message) {
        return exports.MsgSuperfluidUndelegateAndUnbondLockResponse.decode(message.value);
    },
    toProto(message) {
        return exports.MsgSuperfluidUndelegateAndUnbondLockResponse.encode(message).finish();
    },
    toProtoMsg(message) {
        return {
            typeUrl: "/osmosis.superfluid.MsgSuperfluidUndelegateAndUnbondLockResponse",
            value: exports.MsgSuperfluidUndelegateAndUnbondLockResponse.encode(message).finish()
        };
    }
};
function createBaseMsgLockAndSuperfluidDelegate() {
    return {
        sender: "",
        coins: [],
        valAddr: ""
    };
}
exports.MsgLockAndSuperfluidDelegate = {
    typeUrl: "/osmosis.superfluid.MsgLockAndSuperfluidDelegate",
    encode(message, writer = binary_1.BinaryWriter.create()) {
        if (message.sender !== "") {
            writer.uint32(10).string(message.sender);
        }
        for (const v of message.coins) {
            coin_1.Coin.encode(v, writer.uint32(18).fork()).ldelim();
        }
        if (message.valAddr !== "") {
            writer.uint32(26).string(message.valAddr);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof binary_1.BinaryReader ? input : new binary_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMsgLockAndSuperfluidDelegate();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.sender = reader.string();
                    break;
                case 2:
                    message.coins.push(coin_1.Coin.decode(reader, reader.uint32()));
                    break;
                case 3:
                    message.valAddr = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromPartial(object) {
        const message = createBaseMsgLockAndSuperfluidDelegate();
        message.sender = object.sender ?? "";
        message.coins = object.coins?.map(e => coin_1.Coin.fromPartial(e)) || [];
        message.valAddr = object.valAddr ?? "";
        return message;
    },
    fromAmino(object) {
        return {
            sender: object.sender,
            coins: Array.isArray(object?.coins) ? object.coins.map((e) => coin_1.Coin.fromAmino(e)) : [],
            valAddr: object.val_addr
        };
    },
    toAmino(message) {
        const obj = {};
        obj.sender = message.sender;
        if (message.coins) {
            obj.coins = message.coins.map(e => e ? coin_1.Coin.toAmino(e) : undefined);
        }
        else {
            obj.coins = [];
        }
        obj.val_addr = message.valAddr;
        return obj;
    },
    fromAminoMsg(object) {
        return exports.MsgLockAndSuperfluidDelegate.fromAmino(object.value);
    },
    toAminoMsg(message) {
        return {
            type: "osmosis/lock-and-superfluid-delegate",
            value: exports.MsgLockAndSuperfluidDelegate.toAmino(message)
        };
    },
    fromProtoMsg(message) {
        return exports.MsgLockAndSuperfluidDelegate.decode(message.value);
    },
    toProto(message) {
        return exports.MsgLockAndSuperfluidDelegate.encode(message).finish();
    },
    toProtoMsg(message) {
        return {
            typeUrl: "/osmosis.superfluid.MsgLockAndSuperfluidDelegate",
            value: exports.MsgLockAndSuperfluidDelegate.encode(message).finish()
        };
    }
};
function createBaseMsgLockAndSuperfluidDelegateResponse() {
    return {
        ID: BigInt(0)
    };
}
exports.MsgLockAndSuperfluidDelegateResponse = {
    typeUrl: "/osmosis.superfluid.MsgLockAndSuperfluidDelegateResponse",
    encode(message, writer = binary_1.BinaryWriter.create()) {
        if (message.ID !== BigInt(0)) {
            writer.uint32(8).uint64(message.ID);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof binary_1.BinaryReader ? input : new binary_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMsgLockAndSuperfluidDelegateResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.ID = reader.uint64();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromPartial(object) {
        const message = createBaseMsgLockAndSuperfluidDelegateResponse();
        message.ID = object.ID !== undefined && object.ID !== null ? BigInt(object.ID.toString()) : BigInt(0);
        return message;
    },
    fromAmino(object) {
        return {
            ID: BigInt(object.ID)
        };
    },
    toAmino(message) {
        const obj = {};
        obj.ID = message.ID ? message.ID.toString() : undefined;
        return obj;
    },
    fromAminoMsg(object) {
        return exports.MsgLockAndSuperfluidDelegateResponse.fromAmino(object.value);
    },
    toAminoMsg(message) {
        return {
            type: "osmosis/lock-and-superfluid-delegate-response",
            value: exports.MsgLockAndSuperfluidDelegateResponse.toAmino(message)
        };
    },
    fromProtoMsg(message) {
        return exports.MsgLockAndSuperfluidDelegateResponse.decode(message.value);
    },
    toProto(message) {
        return exports.MsgLockAndSuperfluidDelegateResponse.encode(message).finish();
    },
    toProtoMsg(message) {
        return {
            typeUrl: "/osmosis.superfluid.MsgLockAndSuperfluidDelegateResponse",
            value: exports.MsgLockAndSuperfluidDelegateResponse.encode(message).finish()
        };
    }
};
function createBaseMsgCreateFullRangePositionAndSuperfluidDelegate() {
    return {
        sender: "",
        coins: [],
        valAddr: "",
        poolId: BigInt(0)
    };
}
exports.MsgCreateFullRangePositionAndSuperfluidDelegate = {
    typeUrl: "/osmosis.superfluid.MsgCreateFullRangePositionAndSuperfluidDelegate",
    encode(message, writer = binary_1.BinaryWriter.create()) {
        if (message.sender !== "") {
            writer.uint32(10).string(message.sender);
        }
        for (const v of message.coins) {
            coin_1.Coin.encode(v, writer.uint32(18).fork()).ldelim();
        }
        if (message.valAddr !== "") {
            writer.uint32(26).string(message.valAddr);
        }
        if (message.poolId !== BigInt(0)) {
            writer.uint32(32).uint64(message.poolId);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof binary_1.BinaryReader ? input : new binary_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMsgCreateFullRangePositionAndSuperfluidDelegate();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.sender = reader.string();
                    break;
                case 2:
                    message.coins.push(coin_1.Coin.decode(reader, reader.uint32()));
                    break;
                case 3:
                    message.valAddr = reader.string();
                    break;
                case 4:
                    message.poolId = reader.uint64();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromPartial(object) {
        const message = createBaseMsgCreateFullRangePositionAndSuperfluidDelegate();
        message.sender = object.sender ?? "";
        message.coins = object.coins?.map(e => coin_1.Coin.fromPartial(e)) || [];
        message.valAddr = object.valAddr ?? "";
        message.poolId = object.poolId !== undefined && object.poolId !== null ? BigInt(object.poolId.toString()) : BigInt(0);
        return message;
    },
    fromAmino(object) {
        return {
            sender: object.sender,
            coins: Array.isArray(object?.coins) ? object.coins.map((e) => coin_1.Coin.fromAmino(e)) : [],
            valAddr: object.val_addr,
            poolId: BigInt(object.pool_id)
        };
    },
    toAmino(message) {
        const obj = {};
        obj.sender = message.sender;
        if (message.coins) {
            obj.coins = message.coins.map(e => e ? coin_1.Coin.toAmino(e) : undefined);
        }
        else {
            obj.coins = [];
        }
        obj.val_addr = message.valAddr;
        obj.pool_id = message.poolId ? message.poolId.toString() : undefined;
        return obj;
    },
    fromAminoMsg(object) {
        return exports.MsgCreateFullRangePositionAndSuperfluidDelegate.fromAmino(object.value);
    },
    toAminoMsg(message) {
        return {
            type: "osmosis/create-full-range-position-and-superfluid-delegate",
            value: exports.MsgCreateFullRangePositionAndSuperfluidDelegate.toAmino(message)
        };
    },
    fromProtoMsg(message) {
        return exports.MsgCreateFullRangePositionAndSuperfluidDelegate.decode(message.value);
    },
    toProto(message) {
        return exports.MsgCreateFullRangePositionAndSuperfluidDelegate.encode(message).finish();
    },
    toProtoMsg(message) {
        return {
            typeUrl: "/osmosis.superfluid.MsgCreateFullRangePositionAndSuperfluidDelegate",
            value: exports.MsgCreateFullRangePositionAndSuperfluidDelegate.encode(message).finish()
        };
    }
};
function createBaseMsgCreateFullRangePositionAndSuperfluidDelegateResponse() {
    return {
        lockID: BigInt(0),
        positionID: BigInt(0)
    };
}
exports.MsgCreateFullRangePositionAndSuperfluidDelegateResponse = {
    typeUrl: "/osmosis.superfluid.MsgCreateFullRangePositionAndSuperfluidDelegateResponse",
    encode(message, writer = binary_1.BinaryWriter.create()) {
        if (message.lockID !== BigInt(0)) {
            writer.uint32(8).uint64(message.lockID);
        }
        if (message.positionID !== BigInt(0)) {
            writer.uint32(16).uint64(message.positionID);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof binary_1.BinaryReader ? input : new binary_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMsgCreateFullRangePositionAndSuperfluidDelegateResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.lockID = reader.uint64();
                    break;
                case 2:
                    message.positionID = reader.uint64();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromPartial(object) {
        const message = createBaseMsgCreateFullRangePositionAndSuperfluidDelegateResponse();
        message.lockID = object.lockID !== undefined && object.lockID !== null ? BigInt(object.lockID.toString()) : BigInt(0);
        message.positionID = object.positionID !== undefined && object.positionID !== null ? BigInt(object.positionID.toString()) : BigInt(0);
        return message;
    },
    fromAmino(object) {
        return {
            lockID: BigInt(object.lockID),
            positionID: BigInt(object.positionID)
        };
    },
    toAmino(message) {
        const obj = {};
        obj.lockID = message.lockID ? message.lockID.toString() : undefined;
        obj.positionID = message.positionID ? message.positionID.toString() : undefined;
        return obj;
    },
    fromAminoMsg(object) {
        return exports.MsgCreateFullRangePositionAndSuperfluidDelegateResponse.fromAmino(object.value);
    },
    toAminoMsg(message) {
        return {
            type: "osmosis/create-full-range-position-and-superfluid-delegate-response",
            value: exports.MsgCreateFullRangePositionAndSuperfluidDelegateResponse.toAmino(message)
        };
    },
    fromProtoMsg(message) {
        return exports.MsgCreateFullRangePositionAndSuperfluidDelegateResponse.decode(message.value);
    },
    toProto(message) {
        return exports.MsgCreateFullRangePositionAndSuperfluidDelegateResponse.encode(message).finish();
    },
    toProtoMsg(message) {
        return {
            typeUrl: "/osmosis.superfluid.MsgCreateFullRangePositionAndSuperfluidDelegateResponse",
            value: exports.MsgCreateFullRangePositionAndSuperfluidDelegateResponse.encode(message).finish()
        };
    }
};
function createBaseMsgUnPoolWhitelistedPool() {
    return {
        sender: "",
        poolId: BigInt(0)
    };
}
exports.MsgUnPoolWhitelistedPool = {
    typeUrl: "/osmosis.superfluid.MsgUnPoolWhitelistedPool",
    encode(message, writer = binary_1.BinaryWriter.create()) {
        if (message.sender !== "") {
            writer.uint32(10).string(message.sender);
        }
        if (message.poolId !== BigInt(0)) {
            writer.uint32(16).uint64(message.poolId);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof binary_1.BinaryReader ? input : new binary_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMsgUnPoolWhitelistedPool();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.sender = reader.string();
                    break;
                case 2:
                    message.poolId = reader.uint64();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromPartial(object) {
        const message = createBaseMsgUnPoolWhitelistedPool();
        message.sender = object.sender ?? "";
        message.poolId = object.poolId !== undefined && object.poolId !== null ? BigInt(object.poolId.toString()) : BigInt(0);
        return message;
    },
    fromAmino(object) {
        return {
            sender: object.sender,
            poolId: BigInt(object.pool_id)
        };
    },
    toAmino(message) {
        const obj = {};
        obj.sender = message.sender;
        obj.pool_id = message.poolId ? message.poolId.toString() : undefined;
        return obj;
    },
    fromAminoMsg(object) {
        return exports.MsgUnPoolWhitelistedPool.fromAmino(object.value);
    },
    toAminoMsg(message) {
        return {
            type: "osmosis/unpool-whitelisted-pool",
            value: exports.MsgUnPoolWhitelistedPool.toAmino(message)
        };
    },
    fromProtoMsg(message) {
        return exports.MsgUnPoolWhitelistedPool.decode(message.value);
    },
    toProto(message) {
        return exports.MsgUnPoolWhitelistedPool.encode(message).finish();
    },
    toProtoMsg(message) {
        return {
            typeUrl: "/osmosis.superfluid.MsgUnPoolWhitelistedPool",
            value: exports.MsgUnPoolWhitelistedPool.encode(message).finish()
        };
    }
};
function createBaseMsgUnPoolWhitelistedPoolResponse() {
    return {
        exitedLockIds: []
    };
}
exports.MsgUnPoolWhitelistedPoolResponse = {
    typeUrl: "/osmosis.superfluid.MsgUnPoolWhitelistedPoolResponse",
    encode(message, writer = binary_1.BinaryWriter.create()) {
        writer.uint32(10).fork();
        for (const v of message.exitedLockIds) {
            writer.uint64(v);
        }
        writer.ldelim();
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof binary_1.BinaryReader ? input : new binary_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMsgUnPoolWhitelistedPoolResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    if ((tag & 7) === 2) {
                        const end2 = reader.uint32() + reader.pos;
                        while (reader.pos < end2) {
                            message.exitedLockIds.push(reader.uint64());
                        }
                    }
                    else {
                        message.exitedLockIds.push(reader.uint64());
                    }
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromPartial(object) {
        const message = createBaseMsgUnPoolWhitelistedPoolResponse();
        message.exitedLockIds = object.exitedLockIds?.map(e => BigInt(e.toString())) || [];
        return message;
    },
    fromAmino(object) {
        return {
            exitedLockIds: Array.isArray(object?.exited_lock_ids) ? object.exited_lock_ids.map((e) => BigInt(e)) : []
        };
    },
    toAmino(message) {
        const obj = {};
        if (message.exitedLockIds) {
            obj.exited_lock_ids = message.exitedLockIds.map(e => e.toString());
        }
        else {
            obj.exited_lock_ids = [];
        }
        return obj;
    },
    fromAminoMsg(object) {
        return exports.MsgUnPoolWhitelistedPoolResponse.fromAmino(object.value);
    },
    toAminoMsg(message) {
        return {
            type: "osmosis/un-pool-whitelisted-pool-response",
            value: exports.MsgUnPoolWhitelistedPoolResponse.toAmino(message)
        };
    },
    fromProtoMsg(message) {
        return exports.MsgUnPoolWhitelistedPoolResponse.decode(message.value);
    },
    toProto(message) {
        return exports.MsgUnPoolWhitelistedPoolResponse.encode(message).finish();
    },
    toProtoMsg(message) {
        return {
            typeUrl: "/osmosis.superfluid.MsgUnPoolWhitelistedPoolResponse",
            value: exports.MsgUnPoolWhitelistedPoolResponse.encode(message).finish()
        };
    }
};
function createBaseMsgUnlockAndMigrateSharesToFullRangeConcentratedPosition() {
    return {
        sender: "",
        lockId: BigInt(0),
        sharesToMigrate: undefined,
        tokenOutMins: []
    };
}
exports.MsgUnlockAndMigrateSharesToFullRangeConcentratedPosition = {
    typeUrl: "/osmosis.superfluid.MsgUnlockAndMigrateSharesToFullRangeConcentratedPosition",
    encode(message, writer = binary_1.BinaryWriter.create()) {
        if (message.sender !== "") {
            writer.uint32(10).string(message.sender);
        }
        if (message.lockId !== BigInt(0)) {
            writer.uint32(16).int64(message.lockId);
        }
        if (message.sharesToMigrate !== undefined) {
            coin_1.Coin.encode(message.sharesToMigrate, writer.uint32(26).fork()).ldelim();
        }
        for (const v of message.tokenOutMins) {
            coin_1.Coin.encode(v, writer.uint32(34).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof binary_1.BinaryReader ? input : new binary_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMsgUnlockAndMigrateSharesToFullRangeConcentratedPosition();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.sender = reader.string();
                    break;
                case 2:
                    message.lockId = reader.int64();
                    break;
                case 3:
                    message.sharesToMigrate = coin_1.Coin.decode(reader, reader.uint32());
                    break;
                case 4:
                    message.tokenOutMins.push(coin_1.Coin.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromPartial(object) {
        const message = createBaseMsgUnlockAndMigrateSharesToFullRangeConcentratedPosition();
        message.sender = object.sender ?? "";
        message.lockId = object.lockId !== undefined && object.lockId !== null ? BigInt(object.lockId.toString()) : BigInt(0);
        message.sharesToMigrate = object.sharesToMigrate !== undefined && object.sharesToMigrate !== null ? coin_1.Coin.fromPartial(object.sharesToMigrate) : undefined;
        message.tokenOutMins = object.tokenOutMins?.map(e => coin_1.Coin.fromPartial(e)) || [];
        return message;
    },
    fromAmino(object) {
        return {
            sender: object.sender,
            lockId: BigInt(object.lock_id),
            sharesToMigrate: object?.shares_to_migrate ? coin_1.Coin.fromAmino(object.shares_to_migrate) : undefined,
            tokenOutMins: Array.isArray(object?.token_out_mins) ? object.token_out_mins.map((e) => coin_1.Coin.fromAmino(e)) : []
        };
    },
    toAmino(message) {
        const obj = {};
        obj.sender = message.sender;
        obj.lock_id = message.lockId ? message.lockId.toString() : undefined;
        obj.shares_to_migrate = message.sharesToMigrate ? coin_1.Coin.toAmino(message.sharesToMigrate) : undefined;
        if (message.tokenOutMins) {
            obj.token_out_mins = message.tokenOutMins.map(e => e ? coin_1.Coin.toAmino(e) : undefined);
        }
        else {
            obj.token_out_mins = [];
        }
        return obj;
    },
    fromAminoMsg(object) {
        return exports.MsgUnlockAndMigrateSharesToFullRangeConcentratedPosition.fromAmino(object.value);
    },
    toAminoMsg(message) {
        return {
            type: "osmosis/unlock-and-migrate-shares-to-full-range-concentrated-position",
            value: exports.MsgUnlockAndMigrateSharesToFullRangeConcentratedPosition.toAmino(message)
        };
    },
    fromProtoMsg(message) {
        return exports.MsgUnlockAndMigrateSharesToFullRangeConcentratedPosition.decode(message.value);
    },
    toProto(message) {
        return exports.MsgUnlockAndMigrateSharesToFullRangeConcentratedPosition.encode(message).finish();
    },
    toProtoMsg(message) {
        return {
            typeUrl: "/osmosis.superfluid.MsgUnlockAndMigrateSharesToFullRangeConcentratedPosition",
            value: exports.MsgUnlockAndMigrateSharesToFullRangeConcentratedPosition.encode(message).finish()
        };
    }
};
function createBaseMsgUnlockAndMigrateSharesToFullRangeConcentratedPositionResponse() {
    return {
        amount0: "",
        amount1: "",
        liquidityCreated: "",
        joinTime: undefined
    };
}
exports.MsgUnlockAndMigrateSharesToFullRangeConcentratedPositionResponse = {
    typeUrl: "/osmosis.superfluid.MsgUnlockAndMigrateSharesToFullRangeConcentratedPositionResponse",
    encode(message, writer = binary_1.BinaryWriter.create()) {
        if (message.amount0 !== "") {
            writer.uint32(10).string(message.amount0);
        }
        if (message.amount1 !== "") {
            writer.uint32(18).string(message.amount1);
        }
        if (message.liquidityCreated !== "") {
            writer.uint32(26).string(math_1.Decimal.fromUserInput(message.liquidityCreated, 18).atomics);
        }
        if (message.joinTime !== undefined) {
            timestamp_1.Timestamp.encode((0, helpers_1.toTimestamp)(message.joinTime), writer.uint32(34).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof binary_1.BinaryReader ? input : new binary_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMsgUnlockAndMigrateSharesToFullRangeConcentratedPositionResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.amount0 = reader.string();
                    break;
                case 2:
                    message.amount1 = reader.string();
                    break;
                case 3:
                    message.liquidityCreated = math_1.Decimal.fromAtomics(reader.string(), 18).toString();
                    break;
                case 4:
                    message.joinTime = (0, helpers_1.fromTimestamp)(timestamp_1.Timestamp.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromPartial(object) {
        const message = createBaseMsgUnlockAndMigrateSharesToFullRangeConcentratedPositionResponse();
        message.amount0 = object.amount0 ?? "";
        message.amount1 = object.amount1 ?? "";
        message.liquidityCreated = object.liquidityCreated ?? "";
        message.joinTime = object.joinTime ?? undefined;
        return message;
    },
    fromAmino(object) {
        return {
            amount0: object.amount0,
            amount1: object.amount1,
            liquidityCreated: object.liquidity_created,
            joinTime: object.join_time
        };
    },
    toAmino(message) {
        const obj = {};
        obj.amount0 = message.amount0;
        obj.amount1 = message.amount1;
        obj.liquidity_created = message.liquidityCreated;
        obj.join_time = message.joinTime;
        return obj;
    },
    fromAminoMsg(object) {
        return exports.MsgUnlockAndMigrateSharesToFullRangeConcentratedPositionResponse.fromAmino(object.value);
    },
    toAminoMsg(message) {
        return {
            type: "osmosis/unlock-and-migrate-shares-to-full-range-concentrated-position-response",
            value: exports.MsgUnlockAndMigrateSharesToFullRangeConcentratedPositionResponse.toAmino(message)
        };
    },
    fromProtoMsg(message) {
        return exports.MsgUnlockAndMigrateSharesToFullRangeConcentratedPositionResponse.decode(message.value);
    },
    toProto(message) {
        return exports.MsgUnlockAndMigrateSharesToFullRangeConcentratedPositionResponse.encode(message).finish();
    },
    toProtoMsg(message) {
        return {
            typeUrl: "/osmosis.superfluid.MsgUnlockAndMigrateSharesToFullRangeConcentratedPositionResponse",
            value: exports.MsgUnlockAndMigrateSharesToFullRangeConcentratedPositionResponse.encode(message).finish()
        };
    }
};
function createBaseMsgAddToConcentratedLiquiditySuperfluidPosition() {
    return {
        positionId: BigInt(0),
        sender: "",
        tokenDesired0: undefined,
        tokenDesired1: undefined
    };
}
exports.MsgAddToConcentratedLiquiditySuperfluidPosition = {
    typeUrl: "/osmosis.superfluid.MsgAddToConcentratedLiquiditySuperfluidPosition",
    encode(message, writer = binary_1.BinaryWriter.create()) {
        if (message.positionId !== BigInt(0)) {
            writer.uint32(8).uint64(message.positionId);
        }
        if (message.sender !== "") {
            writer.uint32(18).string(message.sender);
        }
        if (message.tokenDesired0 !== undefined) {
            coin_1.Coin.encode(message.tokenDesired0, writer.uint32(26).fork()).ldelim();
        }
        if (message.tokenDesired1 !== undefined) {
            coin_1.Coin.encode(message.tokenDesired1, writer.uint32(34).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof binary_1.BinaryReader ? input : new binary_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMsgAddToConcentratedLiquiditySuperfluidPosition();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.positionId = reader.uint64();
                    break;
                case 2:
                    message.sender = reader.string();
                    break;
                case 3:
                    message.tokenDesired0 = coin_1.Coin.decode(reader, reader.uint32());
                    break;
                case 4:
                    message.tokenDesired1 = coin_1.Coin.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromPartial(object) {
        const message = createBaseMsgAddToConcentratedLiquiditySuperfluidPosition();
        message.positionId = object.positionId !== undefined && object.positionId !== null ? BigInt(object.positionId.toString()) : BigInt(0);
        message.sender = object.sender ?? "";
        message.tokenDesired0 = object.tokenDesired0 !== undefined && object.tokenDesired0 !== null ? coin_1.Coin.fromPartial(object.tokenDesired0) : undefined;
        message.tokenDesired1 = object.tokenDesired1 !== undefined && object.tokenDesired1 !== null ? coin_1.Coin.fromPartial(object.tokenDesired1) : undefined;
        return message;
    },
    fromAmino(object) {
        return {
            positionId: BigInt(object.position_id),
            sender: object.sender,
            tokenDesired0: object?.token_desired0 ? coin_1.Coin.fromAmino(object.token_desired0) : undefined,
            tokenDesired1: object?.token_desired1 ? coin_1.Coin.fromAmino(object.token_desired1) : undefined
        };
    },
    toAmino(message) {
        const obj = {};
        obj.position_id = message.positionId ? message.positionId.toString() : undefined;
        obj.sender = message.sender;
        obj.token_desired0 = message.tokenDesired0 ? coin_1.Coin.toAmino(message.tokenDesired0) : undefined;
        obj.token_desired1 = message.tokenDesired1 ? coin_1.Coin.toAmino(message.tokenDesired1) : undefined;
        return obj;
    },
    fromAminoMsg(object) {
        return exports.MsgAddToConcentratedLiquiditySuperfluidPosition.fromAmino(object.value);
    },
    toAminoMsg(message) {
        return {
            type: "osmosis/add-to-concentrated-liquidity-superfluid-position",
            value: exports.MsgAddToConcentratedLiquiditySuperfluidPosition.toAmino(message)
        };
    },
    fromProtoMsg(message) {
        return exports.MsgAddToConcentratedLiquiditySuperfluidPosition.decode(message.value);
    },
    toProto(message) {
        return exports.MsgAddToConcentratedLiquiditySuperfluidPosition.encode(message).finish();
    },
    toProtoMsg(message) {
        return {
            typeUrl: "/osmosis.superfluid.MsgAddToConcentratedLiquiditySuperfluidPosition",
            value: exports.MsgAddToConcentratedLiquiditySuperfluidPosition.encode(message).finish()
        };
    }
};
function createBaseMsgAddToConcentratedLiquiditySuperfluidPositionResponse() {
    return {
        positionId: BigInt(0),
        amount0: "",
        amount1: "",
        newLiquidity: "",
        lockId: BigInt(0)
    };
}
exports.MsgAddToConcentratedLiquiditySuperfluidPositionResponse = {
    typeUrl: "/osmosis.superfluid.MsgAddToConcentratedLiquiditySuperfluidPositionResponse",
    encode(message, writer = binary_1.BinaryWriter.create()) {
        if (message.positionId !== BigInt(0)) {
            writer.uint32(8).uint64(message.positionId);
        }
        if (message.amount0 !== "") {
            writer.uint32(18).string(message.amount0);
        }
        if (message.amount1 !== "") {
            writer.uint32(26).string(message.amount1);
        }
        if (message.newLiquidity !== "") {
            writer.uint32(42).string(math_1.Decimal.fromUserInput(message.newLiquidity, 18).atomics);
        }
        if (message.lockId !== BigInt(0)) {
            writer.uint32(32).uint64(message.lockId);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof binary_1.BinaryReader ? input : new binary_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseMsgAddToConcentratedLiquiditySuperfluidPositionResponse();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.positionId = reader.uint64();
                    break;
                case 2:
                    message.amount0 = reader.string();
                    break;
                case 3:
                    message.amount1 = reader.string();
                    break;
                case 5:
                    message.newLiquidity = math_1.Decimal.fromAtomics(reader.string(), 18).toString();
                    break;
                case 4:
                    message.lockId = reader.uint64();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromPartial(object) {
        const message = createBaseMsgAddToConcentratedLiquiditySuperfluidPositionResponse();
        message.positionId = object.positionId !== undefined && object.positionId !== null ? BigInt(object.positionId.toString()) : BigInt(0);
        message.amount0 = object.amount0 ?? "";
        message.amount1 = object.amount1 ?? "";
        message.newLiquidity = object.newLiquidity ?? "";
        message.lockId = object.lockId !== undefined && object.lockId !== null ? BigInt(object.lockId.toString()) : BigInt(0);
        return message;
    },
    fromAmino(object) {
        return {
            positionId: BigInt(object.position_id),
            amount0: object.amount0,
            amount1: object.amount1,
            newLiquidity: object.new_liquidity,
            lockId: BigInt(object.lock_id)
        };
    },
    toAmino(message) {
        const obj = {};
        obj.position_id = message.positionId ? message.positionId.toString() : undefined;
        obj.amount0 = message.amount0;
        obj.amount1 = message.amount1;
        obj.new_liquidity = message.newLiquidity;
        obj.lock_id = message.lockId ? message.lockId.toString() : undefined;
        return obj;
    },
    fromAminoMsg(object) {
        return exports.MsgAddToConcentratedLiquiditySuperfluidPositionResponse.fromAmino(object.value);
    },
    toAminoMsg(message) {
        return {
            type: "osmosis/add-to-concentrated-liquidity-superfluid-position-response",
            value: exports.MsgAddToConcentratedLiquiditySuperfluidPositionResponse.toAmino(message)
        };
    },
    fromProtoMsg(message) {
        return exports.MsgAddToConcentratedLiquiditySuperfluidPositionResponse.decode(message.value);
    },
    toProto(message) {
        return exports.MsgAddToConcentratedLiquiditySuperfluidPositionResponse.encode(message).finish();
    },
    toProtoMsg(message) {
        return {
            typeUrl: "/osmosis.superfluid.MsgAddToConcentratedLiquiditySuperfluidPositionResponse",
            value: exports.MsgAddToConcentratedLiquiditySuperfluidPositionResponse.encode(message).finish()
        };
    }
};
//# sourceMappingURL=tx.js.map
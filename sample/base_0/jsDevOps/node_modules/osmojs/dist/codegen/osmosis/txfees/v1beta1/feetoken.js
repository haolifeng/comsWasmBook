"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.FeeToken = void 0;
const binary_1 = require("../../../binary");
function createBaseFeeToken() {
    return {
        denom: "",
        poolID: BigInt(0)
    };
}
exports.FeeToken = {
    typeUrl: "/osmosis.txfees.v1beta1.FeeToken",
    encode(message, writer = binary_1.BinaryWriter.create()) {
        if (message.denom !== "") {
            writer.uint32(10).string(message.denom);
        }
        if (message.poolID !== BigInt(0)) {
            writer.uint32(16).uint64(message.poolID);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof binary_1.BinaryReader ? input : new binary_1.BinaryReader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseFeeToken();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.denom = reader.string();
                    break;
                case 2:
                    message.poolID = reader.uint64();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromPartial(object) {
        const message = createBaseFeeToken();
        message.denom = object.denom ?? "";
        message.poolID = object.poolID !== undefined && object.poolID !== null ? BigInt(object.poolID.toString()) : BigInt(0);
        return message;
    },
    fromAmino(object) {
        return {
            denom: object.denom,
            poolID: BigInt(object.poolID)
        };
    },
    toAmino(message) {
        const obj = {};
        obj.denom = message.denom;
        obj.poolID = message.poolID ? message.poolID.toString() : undefined;
        return obj;
    },
    fromAminoMsg(object) {
        return exports.FeeToken.fromAmino(object.value);
    },
    toAminoMsg(message) {
        return {
            type: "osmosis/txfees/fee-token",
            value: exports.FeeToken.toAmino(message)
        };
    },
    fromProtoMsg(message) {
        return exports.FeeToken.decode(message.value);
    },
    toProto(message) {
        return exports.FeeToken.encode(message).finish();
    },
    toProtoMsg(message) {
        return {
            typeUrl: "/osmosis.txfees.v1beta1.FeeToken",
            value: exports.FeeToken.encode(message).finish()
        };
    }
};
//# sourceMappingURL=feetoken.js.map